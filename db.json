{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/matery/source/favicon.jpg","path":"favicon.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/clipboard.min.js","path":"libs/codeBlock/clipboard.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/explosion.min.js","path":"libs/others/explosion.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/fireworks.js","path":"libs/others/fireworks.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/snow.js","path":"libs/others/snow.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/text.js","path":"libs/others/text.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/avatar.jpg","path":"medias/avatars/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/files/cv-en.pdf","path":"medias/files/cv-en.pdf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/jquery/jquery-2.2.0.min.js","path":"libs/jquery/jquery-2.2.0.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/files/cv-zh.pdf","path":"medias/files/cv-zh.pdf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/tiantangdemogui.jpg","path":"medias/music/avatars/tiantangdemogui.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/yequ.jpg","path":"medias/music/avatars/yequ.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/yiluxiangbei.jpg","path":"medias/music/avatars/yiluxiangbei.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/css/font-awesome.min.css","path":"libs/awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff","path":"libs/awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","path":"libs/awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/FontAwesome.otf","path":"libs/awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.eot","path":"libs/awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","path":"libs/awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/daoshu.jpg","path":"medias/music/avatars/daoshu.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.svg","path":"libs/awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/Tonya Mitchell-Stay.mp3","path":"medias/music/Tonya Mitchell-Stay.mp3","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/bgc.jpg","path":"medias/banner/bgc.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/reward/wechat.jpg","path":"medias/reward/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/reward/alipay.png","path":"medias/reward/alipay.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/bgc.jpg","path":"medias/featureimages/bgc.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/Punch[韩]-Done For Me-《德鲁纳酒店》韩剧插曲.mp3","path":"medias/music/avatars/Punch[韩]-Done For Me-《德鲁纳酒店》韩剧插曲.mp3","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/周杰伦_潘儿-夜的第七章.mp3","path":"medias/music/avatars/周杰伦_潘儿-夜的第七章.mp3","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/周杰伦_潘儿-夜的第七章.mp3","path":"medias/music/周杰伦_潘儿-夜的第七章.mp3","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/Done For Me.mp3","path":"medias/music/Done For Me.mp3","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.md","hash":"d97f69ff63501de89cfd341c68e4d6ed5c8a5b3a","modified":1617779189244},{"_id":"source/CNAME","hash":"b8bda8a8a2b7d9895527115fab04a267cf53cc8e","modified":1617779189246},{"_id":"themes/matery/.gitignore","hash":"eaa3d84cb77d92a21b111fd1e37f53edc1ff9de0","modified":1617779189253},{"_id":"themes/matery/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1617779189253},{"_id":"themes/matery/README.md","hash":"7ef16198a2c5ff580f006582286354caf160c7fe","modified":1617779189254},{"_id":"themes/matery/README_CN.md","hash":"a94324950e0299bcfcbc106cf2ca65c93e1fe843","modified":1617779189254},{"_id":"themes/matery/_config.yml","hash":"df783909213cb12476d32e2f19cf1ceab0f1e6cb","modified":1617789129955},{"_id":"source/_data/friends.json","hash":"01ce6690ad7dea1a9a96525def748ebb5ddbdb3e","modified":1617785049567},{"_id":"source/_posts/5w2h-godweiyang.md","hash":"0b09c3f6afac55471926f865e612fc7dc02f08d4","modified":1617783058911},{"_id":"source/_data/musics.json","hash":"040ea82ed7b605c02ce0008c4c792e672bf21d96","modified":1617788836357},{"_id":"source/about/index.md","hash":"03c3cfe477fc49fb7742e31254ed2e3a4620ddf9","modified":1617779189249},{"_id":"source/archives/index.md","hash":"a62b7d9b8a8bdf966ec5c823e71581d2b185156e","modified":1617779189249},{"_id":"source/categories/index.md","hash":"76889deb16e0d61d5c585f26a0e69f01de6cab74","modified":1617779189250},{"_id":"source/contact/index.md","hash":"50a4552f14c32f7f219a148aa3cc531c053af8b2","modified":1617779189251},{"_id":"source/friends/index.md","hash":"1a50bb92fcf805d3188191c44f451b327db14d92","modified":1617779189251},{"_id":"source/tags/index.md","hash":"98697833897097a5c65521ea02baa1c6f85948d8","modified":1617779189252},{"_id":"themes/matery/languages/default.yml","hash":"527c795b8c41fe62bf35603ffebfa6d4a7929a2c","modified":1617779189256},{"_id":"themes/matery/languages/zh-CN.yml","hash":"d92db4b986bb6f0d228e9a8249383103bf56342d","modified":1617779189256},{"_id":"themes/matery/layout/404.ejs","hash":"f08a0f507b36f3652520a41381f71167488405c7","modified":1617779189257},{"_id":"themes/matery/layout/about.ejs","hash":"e87752e59f021b5139b1155a264da11ab469a9aa","modified":1617779189281},{"_id":"themes/matery/layout/archive.ejs","hash":"1b5023571894404d75caffa28128fc9c49f9095d","modified":1617779189281},{"_id":"themes/matery/layout/categories.ejs","hash":"c431e772d0f7700592228bbd9502793bdc28a893","modified":1617779189282},{"_id":"themes/matery/layout/category.ejs","hash":"2d421e10c3b8fd2c4f725e5eaa967c4a1429c707","modified":1617779189283},{"_id":"themes/matery/layout/contact.ejs","hash":"1513c5a40b7cc0b6e5854cf8c3253958bcb486cb","modified":1617779189283},{"_id":"themes/matery/layout/friends.ejs","hash":"895e40a864796680fbef581e4b09f252fbdd963a","modified":1617779189284},{"_id":"themes/matery/layout/index.ejs","hash":"7fc5a6c4f0229c0be43b7d1315524c468346fbb8","modified":1617779189284},{"_id":"themes/matery/layout/layout.ejs","hash":"2ba4110dc596424b1220a259c8e594da774e7f59","modified":1617779189285},{"_id":"themes/matery/layout/post.ejs","hash":"f1a35f32e5901e167ae9a750e7cb3635549cea2e","modified":1617779189285},{"_id":"themes/matery/layout/tag.ejs","hash":"5cdf3a1d72f54285ee9cb826fd0e4a0449093215","modified":1617779189286},{"_id":"themes/matery/layout/tags.ejs","hash":"851c0ee599e91e7b1d657673859e8b6ff79cf50b","modified":1617779189286},{"_id":"themes/matery/source/favicon.jpg","hash":"a20ae118dccc56d07493a0879f5a7309a2daf829","modified":1614311020652},{"_id":"themes/matery/layout/_widget/category-radar.ejs","hash":"5284712d84bbaa4f0d88026ac3ec5a8c13e00056","modified":1617779189275},{"_id":"themes/matery/layout/_widget/category-cloud.ejs","hash":"b2b22d4fc4e46b051f67216c391f629f4ff552b5","modified":1617779189274},{"_id":"themes/matery/layout/_widget/dream.ejs","hash":"4f8fa0dceff7f942c54cab3040ef47dbf58531b6","modified":1617784282481},{"_id":"themes/matery/layout/_widget/music.ejs","hash":"fc50cb4bbc1f4d0e4c9f5941f1c3c74bea742db7","modified":1617779189275},{"_id":"themes/matery/layout/_widget/my-gallery.ejs","hash":"9ea672db65f1e5b8fad1ffafb1614f25adc97e63","modified":1617779189276},{"_id":"themes/matery/layout/_widget/my-projects.ejs","hash":"785cb588a31215876f6737213054ba0e8552fff0","modified":1617779189277},{"_id":"themes/matery/layout/_widget/my-skills.ejs","hash":"c6f713316ce75ad08ac5d1587bd8ce42e894e9ae","modified":1617779189277},{"_id":"themes/matery/layout/_widget/post-calendar.ejs","hash":"4608af6151f0e32f668c89f09343748340021478","modified":1617779189278},{"_id":"themes/matery/layout/_widget/post-charts.ejs","hash":"0aaf0a111b9aa07ff37f6286eeac5506283f47f8","modified":1617779189278},{"_id":"themes/matery/layout/_widget/recommend.ejs","hash":"d439d86818de179d64965d4f7f5fa56147fd9221","modified":1617779189279},{"_id":"themes/matery/layout/_widget/tag-cloud.ejs","hash":"6310903eb0e434d6f9a59ca669aab7fae38d4797","modified":1617779189280},{"_id":"themes/matery/layout/_widget/tag-wordcloud.ejs","hash":"bf604fe9c435f0fb9a559cac9c35772579b590e8","modified":1617779189280},{"_id":"themes/matery/layout/_widget/video.ejs","hash":"05f5e2acace5730cdf7bed650375ad88f6b5d1b7","modified":1617779189280},{"_id":"themes/matery/layout/_partial/back-top.ejs","hash":"cb99dc352397ec5d0765794d7b8884972e61973b","modified":1617779189258},{"_id":"themes/matery/layout/_partial/bg-cover-content.ejs","hash":"fd5d5a97171474508b8d9886443e724deb3017b2","modified":1617780843130},{"_id":"themes/matery/layout/_partial/bg-cover.ejs","hash":"d5a7b9bb96e04c0a3485dd873748f19c50a6a04f","modified":1617779189258},{"_id":"themes/matery/layout/_partial/disqus.ejs","hash":"42dda8e67f7f09d148347887e52f18aea546df26","modified":1617779189259},{"_id":"themes/matery/layout/_partial/footer.ejs","hash":"4d4b85b2ddcd15598e49af972efd9c709c578168","modified":1617781321673},{"_id":"themes/matery/layout/_partial/gitalk.ejs","hash":"a3a140e6aeeb6f289e4b821a577ef548267f3de1","modified":1617779189261},{"_id":"themes/matery/layout/_partial/github-link.ejs","hash":"fd4034bca2eb3987dcf113e6477260bee97eb1e7","modified":1617779189263},{"_id":"themes/matery/layout/_partial/gitment.ejs","hash":"d8c40dbc8106b5bc53ceb727ad968c1d8f234261","modified":1617779189264},{"_id":"themes/matery/layout/_partial/google-analytics.ejs","hash":"890c8f04c1f4905dfceb3ea9fd6efdd040d79c01","modified":1617779189264},{"_id":"themes/matery/layout/_partial/head.ejs","hash":"fb572df037b5a6eb563912caa1f1967ca835a70a","modified":1617779189265},{"_id":"themes/matery/layout/_partial/header.ejs","hash":"821e1af65990521c9e0288178d8e5b18c73a9cab","modified":1617779189265},{"_id":"themes/matery/layout/_partial/index-cover.ejs","hash":"d4042e5521ceb5f3255cd4455ac7ccd227fee6df","modified":1617779189266},{"_id":"themes/matery/layout/_partial/mobile-nav.ejs","hash":"e761f0104fbf431671bbe6bebc91ca82f737f4d2","modified":1617779189267},{"_id":"themes/matery/layout/_partial/navigation.ejs","hash":"3a82fcb6f31d69971cb564985842c14ac02cdca0","modified":1617779189267},{"_id":"themes/matery/layout/_partial/paging.ejs","hash":"dfdeea9c59d157acb851d4bf44bf95f81787523c","modified":1617779189268},{"_id":"themes/matery/layout/_partial/livere.ejs","hash":"42728561c09589f79b698eb059ab4def53ed3642","modified":1617779189266},{"_id":"themes/matery/layout/_partial/post-cover.ejs","hash":"166c0b9753f3f913bd801e82ad5b268004be198d","modified":1617779189268},{"_id":"themes/matery/layout/_partial/post-detail-toc.ejs","hash":"82cb8090cde663fa7ad67418a802997b3057e957","modified":1617779189269},{"_id":"themes/matery/layout/_partial/post-detail.ejs","hash":"31b6d4fdc3cb2b133e7d6288a4850d92ebdc5911","modified":1617782755742},{"_id":"themes/matery/layout/_partial/post-statis.ejs","hash":"3b42900247d5ea4ea5b68e2be44420a0d54785ad","modified":1617779189270},{"_id":"themes/matery/layout/_partial/prev-next.ejs","hash":"4e73f10eacb5d00a0681cb44fe5c039cd8ab03cd","modified":1617779189271},{"_id":"themes/matery/layout/_partial/reprint-statement.ejs","hash":"f85a222ec3f9bc27eb7978015e63a16514b38791","modified":1617779189271},{"_id":"themes/matery/layout/_partial/reward.ejs","hash":"73624d9db81e87ff0c12310bb873fbd0b5221021","modified":1617779189272},{"_id":"themes/matery/layout/_partial/search.ejs","hash":"e859fe6e0259e0c123cb7ceda6e4cac836318ffc","modified":1617779189272},{"_id":"themes/matery/layout/_partial/share.ejs","hash":"0f2e1e27d21492cf228e786daead985b1e1dcea4","modified":1617779189273},{"_id":"themes/matery/layout/_partial/social-link.ejs","hash":"97cc90d2796e32661d15e27a6f4b503ef1419d09","modified":1617789261529},{"_id":"themes/matery/layout/_partial/valine.ejs","hash":"c3039180ddb2eb17e724b8441e5f93e79859aef7","modified":1617779189274},{"_id":"themes/matery/source/css/gitment.css","hash":"d5ef623065d1fbc897119f7b70ccf7563e329917","modified":1617779189287},{"_id":"themes/matery/source/css/matery.css","hash":"0d345a72318fd7aadcb6fcaa6f3abac94b91001c","modified":1617779189288},{"_id":"themes/matery/source/css/my-gitalk.css","hash":"4e3e855767ac5a48b13af1d6a42df13d8975e03f","modified":1617779189289},{"_id":"themes/matery/source/css/my.css","hash":"37683a9f11c68903a53e2b8593ca8c095a721896","modified":1617779189290},{"_id":"themes/matery/source/js/matery.js","hash":"208b7806caa943c115aa0825c9c72a0781404775","modified":1617779189292},{"_id":"themes/matery/source/js/search.js","hash":"77ecae23dd3edd8ad962c5b12954652bb2f7a1b6","modified":1617779189293},{"_id":"themes/matery/source/medias/logo.png","hash":"a20ae118dccc56d07493a0879f5a7309a2daf829","modified":1614311020657},{"_id":"themes/matery/source/libs/animate/animate.min.css","hash":"5dfcbcee866e9dc564916416281885f3e320871e","modified":1617779189294},{"_id":"themes/matery/source/libs/aos/aos.css","hash":"ded9739f803d114c9168d3351fded72b3b478b4c","modified":1617779189296},{"_id":"themes/matery/source/libs/aos/aos.js","hash":"5a8e6d07ffa55642418ab3fd4b263aa08284b77a","modified":1617779189296},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","hash":"7f4f8913f2d46ade2def5134e2cc8684a4b87939","modified":1617779189297},{"_id":"themes/matery/source/libs/codeBlock/clipboard.min.js","hash":"98f626d784a94ebe653b13f3a4c79e483264cae7","modified":1617779189312},{"_id":"themes/matery/source/libs/codeBlock/codeBlockFuction.js","hash":"a8133367d48199e7505c2d831ca848b4202b9ba6","modified":1617779189313},{"_id":"themes/matery/source/libs/codeBlock/codeCopy.js","hash":"d54f6205b35dceba1d66da761c00ff9fad9cf857","modified":1617779189313},{"_id":"themes/matery/source/libs/codeBlock/codeLang.js","hash":"6ad8984746f0ff4e2fc81f0c04f12874fa752683","modified":1617779189314},{"_id":"themes/matery/source/libs/codeBlock/codeShrink.js","hash":"743114dcd6f3addc973778b1b248f88d42b05278","modified":1617779189315},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","hash":"33810b2b757fc4327bc1d3b83bb5e0d3dc1fec5b","modified":1617779189316},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","hash":"5d52d3b34fceb9d7e11f1beaf7ed380b4249dec4","modified":1617779189317},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","hash":"021898a16279ac2ffe75af4f902fab2a0a39f11a","modified":1617779189325},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","hash":"a0625d8b432af8bdc820f8768d36cde439e7257c","modified":1617779189329},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"26849509f196a2d21bbfd15696e5d5153163b8f1","modified":1617779189333},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","hash":"4e6538c8312aeeab845d361c37a8c1a0931241f0","modified":1617779189333},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","hash":"f81cd7bfcf7aa2d043bd3e6077df42656fc44b82","modified":1617779189343},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1617779189347},{"_id":"themes/matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1617779189347},{"_id":"themes/matery/source/libs/others/explosion.min.js","hash":"5b76fa72a85cfb27d54b00128393ece773d65386","modified":1617779189348},{"_id":"themes/matery/source/libs/others/fireworks.js","hash":"e9c74f2dd3953d4d8dec44e9977574d00702e84d","modified":1617779189349},{"_id":"themes/matery/source/libs/others/snow.js","hash":"b393f069781eef788a0ae66b2681cece8fea2851","modified":1617779189349},{"_id":"themes/matery/source/libs/others/text.js","hash":"fdf18f65977e4bc358dfb5fb0b7c98492ae72efd","modified":1617779189350},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1617779189353},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","hash":"f646f2bb75bcd1eb65b2788ac7bf15d4fd243ce9","modified":1617779189360},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1617779189360},{"_id":"themes/matery/source/medias/avatars/ajin.jpg","hash":"76cb8e872472ff47a1b061c3bcff1c03f30c02b8","modified":1617779189365},{"_id":"themes/matery/source/medias/avatars/avatar.jpg","hash":"a20ae118dccc56d07493a0879f5a7309a2daf829","modified":1614311020652},{"_id":"themes/matery/source/medias/avatars/babyq.png","hash":"be5432588003e5a52c02e690622eec72b5f7346c","modified":1617779189367},{"_id":"themes/matery/source/medias/avatars/cww97.jpg","hash":"6af987cafc55d8d031534dd5e0f722fff19f70ec","modified":1617779189370},{"_id":"themes/matery/source/medias/avatars/fun4go.png","hash":"0f4333973a972a629cfbabf601bc7c192b65376c","modified":1617779189376},{"_id":"themes/matery/source/medias/avatars/hael.jpg","hash":"e66ccedab38bb2e8fc45fac024e234ab8e7b9d54","modified":1617779189378},{"_id":"themes/matery/source/medias/avatars/huaji.jpg","hash":"86be7eed2a491455ccfe3e7da46366ff477765ca","modified":1617779189379},{"_id":"themes/matery/source/medias/avatars/hzwer.jpg","hash":"53a66bb5e65d2abd5b7412edf094c1e0b1094492","modified":1617779189380},{"_id":"themes/matery/source/medias/avatars/ids2.jpg","hash":"2c8d3ac6ab5ac6196bac83766fde975daca91c32","modified":1617779189380},{"_id":"themes/matery/source/medias/avatars/kewlgrl.jpg","hash":"3af0fd1029a1511bb3c0e90871e41b35e714b01f","modified":1617779189386},{"_id":"themes/matery/source/medias/avatars/ldy.jpg","hash":"906ef214d1f2fe52a663738340ad5623f826bd82","modified":1617779189387},{"_id":"themes/matery/source/medias/avatars/lijiaqian.png","hash":"9d96b3838acfae9a23b6e290fcfafceff0419c63","modified":1617779189388},{"_id":"themes/matery/source/medias/avatars/liyangzone.jpg","hash":"febab557e4c0d859ab4cc14b57d8106f5e3fccfb","modified":1617779189389},{"_id":"themes/matery/source/medias/avatars/liyucheng.jpg","hash":"12055a27fa667c87d2319475968056e1a8ad0f08","modified":1617779189389},{"_id":"themes/matery/source/medias/avatars/masterx.jpg","hash":"c9f7e83d895fa241cefd6e742f356106b35f1b89","modified":1617779189394},{"_id":"themes/matery/source/medias/avatars/michael.jpg","hash":"331a2ab20c299196f5a3089b8445fc8f55346cb6","modified":1617779189395},{"_id":"themes/matery/source/medias/avatars/mouse.jpg","hash":"2eae273885b9859150a1f98f74b3df12ca9a207c","modified":1617779189399},{"_id":"themes/matery/source/medias/avatars/mpy634.png","hash":"30f88e09c02b37c2dc684d4ee3237e327bb23f8b","modified":1617779189400},{"_id":"themes/matery/source/medias/avatars/qiqiang.jpg","hash":"081459866f922d9558a88cd4d7155d91fa730322","modified":1617779189404},{"_id":"themes/matery/source/medias/avatars/spacesac.png","hash":"ff1bdb058f1f0499312da1a082ba97d78590db1a","modified":1617779189404},{"_id":"themes/matery/source/medias/avatars/sunchangzhi.jpg","hash":"bbe2a15fd474ab62dbd14fea72deb1113a4fb005","modified":1617779189405},{"_id":"themes/matery/source/medias/avatars/taowei.jpg","hash":"e58b03b70656aa7a27238be38dac3896d9d16f10","modified":1617779189406},{"_id":"themes/matery/source/medias/avatars/tawn.jpg","hash":"68a1cbacbb2370912b000c9d8d2b16196c918a50","modified":1617779189407},{"_id":"themes/matery/source/medias/avatars/yezijie.png","hash":"8a53537eb69f749115e512b6da061e7f23cd04e5","modified":1617779189410},{"_id":"themes/matery/source/medias/avatars/taotao.jpg","hash":"e668254375ddd40a684ff4669c3421851bebd36e","modified":1617779189406},{"_id":"themes/matery/source/medias/avatars/zhaokangzhe.jpg","hash":"c8242bd13f08a9ddb97e26f216bc729b12ed9058","modified":1617779189414},{"_id":"themes/matery/source/medias/contact.jpg","hash":"7eb0906c0e2be9d96650e3bc01da0dc66167aa85","modified":1617779189432},{"_id":"themes/matery/source/medias/featureimages/0.jpg","hash":"1f8bbfbd625448b4b2a748b75636e456b826dcd3","modified":1617779189433},{"_id":"themes/matery/source/medias/featureimages/5.jpg","hash":"a19498f41b46b3caa1345b3ebf9f797e683025ab","modified":1607575395650},{"_id":"themes/matery/source/medias/gzh.jpg","hash":"2ba0d0e95e8a079f6293cc8578c17034b5e6b8cf","modified":1617779189553},{"_id":"themes/matery/source/medias/files/cv-en.pdf","hash":"2a62ab3797f8bc8e2e5e04c4950198525c635139","modified":1617779189549},{"_id":"themes/matery/source/medias/reward/wechat.png","hash":"61eb27bc4ec65f4f116d34740903fb5af75bf561","modified":1617779189565},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","hash":"70c0c4a9bf698747b7c058c21287ad617355e5dd","modified":1617779189298},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","hash":"82276be41d2001e820020a219b90ad5b026302d1","modified":1617779189317},{"_id":"themes/matery/source/libs/gitment/gitment.js","hash":"ec7363de0bdbf5748bc2d2b42d395dd8ad6c6224","modified":1617789337202},{"_id":"themes/matery/source/libs/jquery/jquery-2.2.0.min.js","hash":"7a551393b8360731104fdef1af36a6f3638f5855","modified":1617779189334},{"_id":"themes/matery/source/libs/valine/Valine.min.js","hash":"f1558f12d96a352e490166d543a8e821dd3bb2bc","modified":1617779189362},{"_id":"themes/matery/source/medias/avatars/antnlp.ico","hash":"29475f350b989331cebd702a315f020917d06ed8","modified":1617779189366},{"_id":"themes/matery/source/medias/avatars/bytedtrans.png","hash":"ce59d69e5106f20548f4ec9b6429c8fcc787ea08","modified":1617779189370},{"_id":"themes/matery/source/medias/avatars/duyupei.jpg","hash":"3c02ed4cf57dc37e4f4b8314bf5094833a854cb0","modified":1617779189372},{"_id":"themes/matery/source/medias/avatars/feibar.jpg","hash":"343f47cb5c83cd866a1c824cbe2a112d02516d06","modified":1617779189373},{"_id":"themes/matery/source/medias/avatars/gsy.jpg","hash":"6a175e2ba56a2280d40a2e654b559be41c3a0a48","modified":1617779189378},{"_id":"themes/matery/source/medias/avatars/jiejie.jpg","hash":"a52476e25bec2391674e77a889a89341fbb29791","modified":1617779189381},{"_id":"themes/matery/source/medias/avatars/milyyy.jpg","hash":"ac2826d9c28346efeb967df01465a2c74d9041fe","modified":1617779189397},{"_id":"themes/matery/source/medias/avatars/mizunashi.png","hash":"5fc300701d3b4250a307ed70e3a3aa0d5395c808","modified":1617779189398},{"_id":"themes/matery/source/medias/avatars/myzhihu.png","hash":"992e0d803160d2ae867be5eb0032d324d1cedffb","modified":1617779189401},{"_id":"themes/matery/source/medias/avatars/qiandongwei.jpg","hash":"6873551596a4513d01898ad866c4073c68270c57","modified":1617779189402},{"_id":"themes/matery/source/medias/avatars/xiejiadong.jpg","hash":"f1a31f89426bd4dccdaba2170f4fc701336702e1","modified":1617779189409},{"_id":"themes/matery/source/medias/avatars/xuzhongyou.jpg","hash":"1db4dfaf23cf250f222a398326562d4170d3aaa1","modified":1617779189410},{"_id":"themes/matery/source/medias/avatars/zhangting.jpg","hash":"10ee25ae3531f046a8bd3696c1cc8a16f0f25e1b","modified":1617779189412},{"_id":"themes/matery/source/medias/avatars/zzw.jpg","hash":"5d385b5732644b07b937a4919abc83cb95e14513","modified":1617779189416},{"_id":"themes/matery/source/medias/banner/1.jpg","hash":"309f484b6e69e877de6a7fb847d66497d22bbd65","modified":1617779189419},{"_id":"themes/matery/source/medias/files/cv-zh.pdf","hash":"4f58778031b0a0e669e036b16639741e44fc2375","modified":1617779189551},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","hash":"f63c7c489524ccb5d95e74fcd6618116c58fb305","modified":1617779189327},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1617779189335},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1617779189336},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1617779189336},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1617779189338},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1617779189338},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1617779189339},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1617779189340},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1617779189340},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1617779189341},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"f8cd48e1fff82ecd54a7ce3e69de8dba7c92d113","modified":1617779189342},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","hash":"2c27939768606603bee3b5e6c8a722596a667e60","modified":1617779189344},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","hash":"c843f0dc497314574c608ca28cc742bb041786d5","modified":1617779189346},{"_id":"themes/matery/source/libs/share/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1617779189354},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1617779189355},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1617779189356},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1617779189357},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1617779189357},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1617779189358},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1617779189359},{"_id":"themes/matery/source/libs/valine/av-min.js","hash":"04c6b2782ce4610c429563110f6a20a47432fc4c","modified":1617779189363},{"_id":"themes/matery/source/medias/avatars/0xbird.png","hash":"f9d597dfcb49e1e2be06138b24028291f5638610","modified":1617779189365},{"_id":"themes/matery/source/medias/avatars/lyn-draw.jpg","hash":"837d5d5df4dcb086d2da114d0d85084b4ec18768","modified":1617779189391},{"_id":"themes/matery/source/medias/avatars/mashiro.jpg","hash":"250e911c16eeb6acb1e6214ad3e6a3d762850a8e","modified":1617779189394},{"_id":"themes/matery/source/medias/avatars/qianqian.png","hash":"fed254c4e7eb58ee22d647acb83f1d08f4508f8f","modified":1617779189403},{"_id":"themes/matery/source/medias/banner/0.jpg","hash":"d4db93afdff4ce889dd8271bcf9e80eb3c0bf866","modified":1617779189418},{"_id":"themes/matery/source/medias/banner/6.jpg","hash":"4fcbc9dd8ec0316e9dd5bfd0caf86f1520b10b3f","modified":1617779189431},{"_id":"themes/matery/source/medias/featureimages/13.jpg","hash":"2eb4d6a3723ad046009b037438533174428da1dc","modified":1607575354677},{"_id":"themes/matery/source/medias/featureimages/14.jpg","hash":"1e17b8609e09d62775fbffebfa3b203d4dcbcfac","modified":1607575393212},{"_id":"themes/matery/source/medias/featureimages/22.jpg","hash":"02ec4566225102778c3837f08b24de02faf460a6","modified":1617779189479},{"_id":"themes/matery/source/medias/music/avatars/tiantangdemogui.jpg","hash":"f005578ddb4d3d731838db89a708f39f18d50e60","modified":1617779189559},{"_id":"themes/matery/source/medias/music/avatars/yequ.jpg","hash":"103beb9ab33434b434fa37a30aecdb29db633024","modified":1617779189560},{"_id":"themes/matery/source/medias/music/avatars/yiluxiangbei.jpg","hash":"01b12e3aca7385a88412c12539e1a608a78896fa","modified":1617779189561},{"_id":"themes/matery/source/medias/reward/alipay.jpg","hash":"9bade255a1918cfb3c3bcefbbbc8f163bf2e19e3","modified":1617779189564},{"_id":"themes/matery/source/libs/awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1617779189300},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1617779189311},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1617779189312},{"_id":"themes/matery/source/medias/avatars/jitao.jpg","hash":"5934b9baccebccbc2be2ead5d84ad32dd41f9559","modified":1617779189385},{"_id":"themes/matery/source/medias/avatars/lzh.png","hash":"8ffcbf19d6b38b891dbe408d9a4e9513b56f247e","modified":1617779189392},{"_id":"themes/matery/source/medias/banner/2.jpg","hash":"280fa1c6493d7fdccfc18bd486446bacd9afe623","modified":1617779189421},{"_id":"themes/matery/source/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1617779189302},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1617779189304},{"_id":"themes/matery/source/medias/avatars/feibar.png","hash":"eceaefcbbca1bf49b582eaa649d311cf4fe69dd6","modified":1617779189375},{"_id":"themes/matery/source/medias/avatars/zhangyi.jpg","hash":"c9130036aac9a7ac8d62e33550a9d64896cdc364","modified":1617779189413},{"_id":"themes/matery/source/medias/featureimages/25.jpg","hash":"d0668539783fc615f14178644e486a6befb90c0c","modified":1617779189496},{"_id":"themes/matery/source/medias/featureimages/28.jpg","hash":"c73036359640a67a8b17db7ba0e968c088957ab8","modified":1617779189509},{"_id":"themes/matery/source/medias/featureimages/3.jpg","hash":"1ec6b6012e3886b268f3bbda9d9c3926df379f9b","modified":1595898533929},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1617779189310},{"_id":"themes/matery/source/medias/avatars/jingjing.jpg","hash":"bfcab0139edb2509de984cb0a9b156879c355158","modified":1617779189383},{"_id":"themes/matery/source/medias/featureimages/12.jpg","hash":"61ff9a06a46fa5fcfd42475c5b8b0bd5eae46076","modified":1607575329000},{"_id":"themes/matery/source/medias/featureimages/17.jpg","hash":"11a6de283124964370dbfaf0e74f2f1e9ac8394d","modified":1617779189458},{"_id":"themes/matery/source/medias/featureimages/2.jpg","hash":"fc55410fbdebb221d678c034fdba732e3b3c256b","modified":1611561770558},{"_id":"themes/matery/source/medias/featureimages/23.jpg","hash":"ee598933707f8bb98ecbf36925f24e8a1c4bd2d6","modified":1617779189483},{"_id":"themes/matery/source/medias/featureimages/26.jpg","hash":"c66a4e7a2e670b63759a091f9428ee7f971d7b56","modified":1617779189500},{"_id":"themes/matery/source/medias/featureimages/27.jpg","hash":"7ea6f890cc59def8b1c9f393e4ae77cd16c79aad","modified":1617779189503},{"_id":"themes/matery/source/medias/banner/3.jpg","hash":"255aaa4375da855bd80b38cfcc253de892a9d4cf","modified":1617779189423},{"_id":"themes/matery/source/medias/banner/4.jpg","hash":"a3cfdee2120195ab36b2fdd074d5558852e69297","modified":1617779189425},{"_id":"themes/matery/source/medias/banner/5.jpg","hash":"6ddd1bcbb62a2d28c5be3b9acb7418849d60b2e7","modified":1617779189427},{"_id":"themes/matery/source/medias/featureimages/24.jpg","hash":"72bc68fb0673b84ab9f863d2979396cdc268a76c","modified":1617779189490},{"_id":"themes/matery/source/medias/featureimages/6.jpg","hash":"46133f37ff984a86b77c08298a31e05b1ade24ae","modified":1607575375796},{"_id":"themes/matery/source/medias/featureimages/7.jpg","hash":"23ef5d3a2af7aa2b1ddd2db65de35b5e0d999360","modified":1607575352254},{"_id":"themes/matery/source/medias/featureimages/10.jpg","hash":"c53c421b9863627122771575ba7270329ca04405","modified":1616465846012},{"_id":"themes/matery/source/medias/featureimages/16.jpg","hash":"16d66ae7e1b5c7994e62f914d28f5fc2794a8714","modified":1607575349446},{"_id":"themes/matery/source/medias/featureimages/18.jpg","hash":"c74ce6fa4eee122e147ec55532744f34a87ae2bf","modified":1617779189460},{"_id":"themes/matery/source/medias/featureimages/19.jpg","hash":"2a47d1123d9c4c6255b7b4817a582d2fa9aea808","modified":1617779189466},{"_id":"themes/matery/source/medias/featureimages/20.jpg","hash":"84ba9cf61045de789426eeb6333910266ce29b8c","modified":1617779189472},{"_id":"themes/matery/source/medias/featureimages/21.jpg","hash":"a77810cc2224446f5d4e1a857a8d480f21e81f83","modified":1617779189476},{"_id":"themes/matery/source/medias/music/avatars/daoshu.jpg","hash":"eee120fdf5ccbe86aa7d51826c4c773e76e6357f","modified":1617779189558},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1617779189307},{"_id":"themes/matery/source/medias/featureimages/11.jpg","hash":"4b10679327bbea0a2a357b1dad01bb27069bf5fc","modified":1608167676174},{"_id":"themes/matery/source/medias/featureimages/8.jpg","hash":"9ee4b61821974b53aecff113aca2ff5d3e0752da","modified":1615965453277},{"_id":"themes/matery/source/medias/featureimages/1.jpg","hash":"2d81b1a59a0130f75824af2a6d2995d2183d9fde","modified":1611649995549},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","hash":"8789b5e4daf0029a6c88f238f10e54d01c4fce82","modified":1617779189322},{"_id":"themes/matery/source/medias/featureimages/15.jpg","hash":"36a00ed9fd808e906e5b7fac6bbeb72b059d30b9","modified":1607575354145},{"_id":"themes/matery/source/medias/featureimages/9.jpg","hash":"4ad94fa513ec05d7c7f8c316d80f5878bd60416d","modified":1608167676555},{"_id":"themes/matery/source/medias/featureimages/4.jpg","hash":"87685f95e79470995bef4dfddb248e0a3ef4362f","modified":1607575413121},{"_id":"themes/matery/source/medias/music/Tonya Mitchell-Stay.mp3","hash":"c9b1055570b9b3235b64bc08be78c3dda2cda55f","modified":1617788636620},{"_id":"themes/matery/source/medias/banner/bgc.jpg","hash":"9b61afd163619035bb8e55b5d9824aeb94a5c78b","modified":1607575376510},{"_id":"source/_posts/git使用命令.md","hash":"731b9f842140f0db29ea24bbef262ad6732180fc","modified":1617785581341},{"_id":"source/_posts/javascript/JavaScript揭秘之原型和原型链.md","hash":"637a4f2960e50b027f83aab0123096405557a771","modified":1617785778276},{"_id":"source/_posts/javascript/this的指向探索.md","hash":"59d8cb762ef2716ce7f3a66e98996d644e7dfe97","modified":1617785492838},{"_id":"source/_posts/javascript/JavaScript数据类型那些可能会中招的细节.md","hash":"a7a2197af4eaf8a9cc9a6b00da8d58c74d5297af","modified":1617785975387},{"_id":"source/_posts/npm/npm发布组件库的流程.md","hash":"32c1971f48d943cf673640b1385048e4e2c623b7","modified":1617785527870},{"_id":"source/_posts/npm/npm私有服务器搭建.md","hash":"d0bb7377a0c0870e18b33841d314114c06ee1cbd","modified":1617785531775},{"_id":"themes/matery/source/medias/reward/wechat.jpg","hash":"025c80f4b07b884e3d77ef9a7a7fdcfa94eb5da5","modified":1617783764613},{"_id":"themes/matery/source/medias/reward/alipay.png","hash":"a42e27eacbb87aec9651b8204667c3bbd4cb6088","modified":1617783838624},{"_id":"themes/matery/source/medias/featureimages/bgc.jpg","hash":"9b61afd163619035bb8e55b5d9824aeb94a5c78b","modified":1607575376510},{"_id":"themes/matery/source/medias/music/周杰伦_潘儿-夜的第七章.mp3","hash":"739bc902da17d784aa3f2fb2f1379c5eacfaec78","modified":1606890919212},{"_id":"themes/matery/source/medias/music/avatars/Punch[韩]-Done For Me-《德鲁纳酒店》韩剧插曲.mp3","hash":"ac9e4648c299d72c23504ec2f8786adc20ffd77b","modified":1617788702481},{"_id":"themes/matery/source/medias/music/avatars/周杰伦_潘儿-夜的第七章.mp3","hash":"739bc902da17d784aa3f2fb2f1379c5eacfaec78","modified":1606890919212},{"_id":"themes/matery/source/medias/music/Done For Me.mp3","hash":"ac9e4648c299d72c23504ec2f8786adc20ffd77b","modified":1617788702481}],"Category":[{"name":"随笔","_id":"ckn74id9b0007w8nj9od0ylrb"},{"name":"git","_id":"ckn75jvkv0001p8njl4zs5ujg"},{"name":"npm服务器","_id":"ckn77iy470004xwnj7l1jwy9k"},{"name":"JavaScript","_id":"ckn77nlpf000lxwnjh1z0nfcj"},{"name":"随笔","parent":"ckn75jvkv0001p8njl4zs5ujg","_id":"ckn77rjmv0014xwnjaynzh5gs"}],"Data":[{"_id":"musics","data":[{"name":"Stay","artist":"Tonya Mitchell","url":"/medias/music/Tonya Mitchell-Stay.mp3","cover":"/medias/music/avatars/daoshu.jpg"},{"name":"Done For Me","artist":"李知恩","url":"/medias/music/Done For Me.mp3","cover":"/medias/music/avatars/daoshu.jpg"},{"name":"夜的第七章","artist":"周杰伦","url":"/medias/music/周杰伦_潘儿-夜的第七章.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]},{"_id":"friends","data":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"},{"name":"火山翻译","url":"https://translate.volcengine.cn","title":"访问主页","introduction":"提供全球领先的翻译技术与服务","avatar":"/medias/avatars/bytedtrans.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"李佳倩的博客","url":"https://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.com/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://www.cnblogs.com/cww97/","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"https://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"https://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"lucifer的博客","url":"https://lucifer.ren/blog/","title":"访问主页","introduction":"一个脑洞很大的程序员。","avatar":"https://tva1.sinaimg.cn/large/006tNbRwly1ga7ognflh9j30b40b4q3w.jpg"},{"name":"钱栋伟","url":"https://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"CJ Blog","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"},{"name":"Tawn","url":"https://tawn0000.github.io/","title":"访问主页","introduction":"JNU ACMer","avatar":"/medias/avatars/tawn.jpg"},{"name":"Master X","url":"https://masterx.top/","title":"访问主页","introduction":"ECNU&ML&DL","avatar":"/medias/avatars/masterx.jpg"},{"name":"分享客","url":"https://sharerdiary.com/","title":"访问主页","introduction":"爱生活，爱分享！","avatar":"/medias/avatars/yezijie.png"},{"name":"taotao","url":"https://zouzhitao.github.io","title":"访问主页","introduction":"taotao 码字的地方","avatar":"/medias/avatars/taotao.jpg"},{"name":"Xiejiadong","url":"https://xiejiadong.com","title":"访问主页","introduction":"Xiejiadong's blog","avatar":"/medias/avatars/xiejiadong.jpg"},{"name":"飞吧","url":"https://fei.bar","title":"访问主页","introduction":"啓飞的个人博客","avatar":"/medias/avatars/feibar.png"},{"name":"ajin","url":"https://ajin.cloud","title":"访问主页","introduction":"Always be enthusiastic","avatar":"/medias/avatars/ajin.jpg"},{"name":"Hiyoung","url":"https://hiyoungai.com/","title":"访问主页","introduction":"宠辱不惊，看庭前花开花落；去留无意，望天空云卷云舒。","avatar":"https://cdn.jsdelivr.net/gh/hiyoung123/cdn/img/avatar.jpg"},{"name":"无言的博客","url":"https://www.yzplove.top","title":"访问主页","introduction":"代码真是越敲越香","avatar":"https://cdn.jsdelivr.net/gh/yzp-99/yzp-99.github.io/medias/avatars/me.jpg"},{"name":"Naixin Zhang","url":"https://naixinzhang.github.io/","title":"访问主页","introduction":"Econ Master | Data Analyst/scientist Candidate","avatar":"https://naixinzhang.github.io/medias/avatars/avatar.jpg"}]}],"Page":[{"title":"404","date":"2019-07-19T08:41:10.000Z","type":"404","layout":"404","description":"你来到了没有知识的荒原 :(","_content":"","source":"404.md","raw":"---\ntitle: 404\ndate: 2019-07-19 16:41:10\ntype: \"404\"\nlayout: \"404\"\ndescription: \"你来到了没有知识的荒原 :(\"\n---\n","updated":"2021-04-07T07:06:29.244Z","path":"404.html","comments":1,"_id":"ckn74id6h0000w8nj9wxs0k0t","content":"","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"},{"name":"火山翻译","url":"https://translate.volcengine.cn","title":"访问主页","introduction":"提供全球领先的翻译技术与服务","avatar":"/medias/avatars/bytedtrans.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"李佳倩的博客","url":"https://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.com/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://www.cnblogs.com/cww97/","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"https://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"https://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"lucifer的博客","url":"https://lucifer.ren/blog/","title":"访问主页","introduction":"一个脑洞很大的程序员。","avatar":"https://tva1.sinaimg.cn/large/006tNbRwly1ga7ognflh9j30b40b4q3w.jpg"},{"name":"钱栋伟","url":"https://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"CJ Blog","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"},{"name":"Tawn","url":"https://tawn0000.github.io/","title":"访问主页","introduction":"JNU ACMer","avatar":"/medias/avatars/tawn.jpg"},{"name":"Master X","url":"https://masterx.top/","title":"访问主页","introduction":"ECNU&ML&DL","avatar":"/medias/avatars/masterx.jpg"},{"name":"分享客","url":"https://sharerdiary.com/","title":"访问主页","introduction":"爱生活，爱分享！","avatar":"/medias/avatars/yezijie.png"},{"name":"taotao","url":"https://zouzhitao.github.io","title":"访问主页","introduction":"taotao 码字的地方","avatar":"/medias/avatars/taotao.jpg"},{"name":"Xiejiadong","url":"https://xiejiadong.com","title":"访问主页","introduction":"Xiejiadong's blog","avatar":"/medias/avatars/xiejiadong.jpg"},{"name":"飞吧","url":"https://fei.bar","title":"访问主页","introduction":"啓飞的个人博客","avatar":"/medias/avatars/feibar.png"},{"name":"ajin","url":"https://ajin.cloud","title":"访问主页","introduction":"Always be enthusiastic","avatar":"/medias/avatars/ajin.jpg"},{"name":"Hiyoung","url":"https://hiyoungai.com/","title":"访问主页","introduction":"宠辱不惊，看庭前花开花落；去留无意，望天空云卷云舒。","avatar":"https://cdn.jsdelivr.net/gh/hiyoung123/cdn/img/avatar.jpg"},{"name":"无言的博客","url":"https://www.yzplove.top","title":"访问主页","introduction":"代码真是越敲越香","avatar":"https://cdn.jsdelivr.net/gh/yzp-99/yzp-99.github.io/medias/avatars/me.jpg"},{"name":"Naixin Zhang","url":"https://naixinzhang.github.io/","title":"访问主页","introduction":"Econ Master | Data Analyst/scientist Candidate","avatar":"https://naixinzhang.github.io/medias/avatars/avatar.jpg"},{"name":"帅张的梦呓","url":"https://ishuaizhang.com","title":"访问主页","introduction":"XDUer","avatar":"https://ishuaizhang.com/medias/avatars/avatar.jpg"},{"name":"Gatsby’s blog","url":"https://a347807131.github.io/","title":"访问主页","introduction":"Nothing perfect, Noting special.","avatar":"https://a347807131.github.io/medias/avatar.gif"},{"name":"宇宙湾","url":"https://yuzhouwan.com/","title":"访问主页","introduction":"主要是大数据和人工智能的原创文章。","avatar":"https://yuzhouwan.com/yuzhouwan_logo_128x128.ico"},{"name":"Dotnet9的博客","url":"https://dotnet9.com","title":"访问主页","introduction":"一个热衷于互联网分享精神的个人博客站点","avatar":"https://img.dotnet9.com/logo-foot.png"},{"name":"Macchiato","url":"https://hcj123123.oschina.io","title":"访问主页","introduction":"java学习者","avatar":"https://y.gtimg.cn/music/photo_new/T002R300x300M000002qD7gF3fW0JL_1.jpg?max_age=2592000"},{"name":"过客~励む","url":"https://yafine-blog.cn","title":"访问主页","introduction":"你现在的努力，是为了以后有更多的选择。","avatar":"https://yafine-blog.cn/medias/avatar.jpg"},{"name":"meteorsh","url":"https://weisenhui.top","title":"访问主页","introduction":"Data Science & Engineering","avatar":"https://weisenhui.top/medias/avatar.jpg"},{"name":"Kuroko","url":"https://kuroko.info","title":"访问主页","introduction":"浓烟下的诗歌电台","avatar":"http://kuroko.info/wp-content/uploads/2020/11/2.jpg"}]}},"excerpt":"","more":""},{"title":"about","date":"2019-07-19T08:41:10.000Z","type":"about","layout":"about","mathjax":true,"_content":"\n\n## CV\n[中文版](/medias/files/cv-zh.pdf)\n[English Version](/medias/files/cv-en.pdf)\n\n## 教育背景\n* <b>硕士 华东师范大学 计算机科学与技术</b>\n2018/06 - 至今\n *均分：91.5/100*\n* <b>本科 华东师范大学 计算机科学与技术</b>\n2014/09 - 2018/06\n *排名：1/110*\n\n## 研究方向\n主要研究**成分句法分析、依存句法分析、机器翻译**等方向，\n对**序列标注、语言模型、实体关系抽取、迁移学习**等方向也感兴趣。\n\n## 实习经历\n* <b>字节跳动AI Lab NLP算法工程师</b>\n2020/05 - 至今\n主要研究机器翻译模型的压缩与加速。\n利用参数共享、词向量分解、量化、蒸馏等模型压缩技术，减小模型的体积，最终部署到移动端上。\n最终实现模型体积压缩20倍，同时效果基本无损。\n\n## 学术成果\n* **A Span-based Linearization for Constituent Trees**\n *Yang Wei, Yuanbin Wu and Man Lan*， **ACL 2020**\n提出了一种成分句法树的序列化表示方法。\n基于该表示方法，模型的解码复杂度从O(n^3)降低到了O(n log n)，\n实际解码速度从30句/秒提高到了150句/秒，\n同时效果没有任何损失。\n\n## 获奖情况\n### 2020\n* <b>国家奖学金（硕士）</b>\n研二学年\n\n### 2017\n* <b>金牌</b>\nACM-ICPC全国邀请赛（陕西）\n* <b>团体一等奖</b>\n中国高校计算机大赛-团体程序设计天梯赛\n* <b>高校一等奖</b>\n中国高校计算机大赛-团体程序设计天梯赛\n* <b>特等奖学金</b>\n大三学年\n\n### 2016\n* <b>银牌</b>\nACM-ICPC亚洲区域赛（青岛）\n* <b>铜牌</b>\nACM-CCPC总决赛（宁波）\n* <b>铜牌</b>\nACM-CCPC（杭州）\n* <b>一等奖学金</b>\n大二学年\n\n### 2015\n* <b>铜牌</b>\nACM-ICPC亚洲区域赛（上海）\n* <b>铜牌</b>\nACM-ICPC上海大都会赛\n* <b>国家奖学金</b>\n大一学年\n\n## 联系方式\n* <b>电子邮箱</b>\ngodweiyang@gmail.com\n792321264@qq.com\n* <b>地址</b>\n上海市普陀区中山北路3663号理科大楼B906，邮编200062\n* <b>微信</b>\ngodweiyang\n* <b>QQ 技术交流群</b>\n864832264\n\n![](/medias/contact.jpg)","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-07-19 16:41:10\ntype: \"about\"\nlayout: \"about\"\nmathjax: true\n---\n\n\n## CV\n[中文版](/medias/files/cv-zh.pdf)\n[English Version](/medias/files/cv-en.pdf)\n\n## 教育背景\n* <b>硕士 华东师范大学 计算机科学与技术</b>\n2018/06 - 至今\n *均分：91.5/100*\n* <b>本科 华东师范大学 计算机科学与技术</b>\n2014/09 - 2018/06\n *排名：1/110*\n\n## 研究方向\n主要研究**成分句法分析、依存句法分析、机器翻译**等方向，\n对**序列标注、语言模型、实体关系抽取、迁移学习**等方向也感兴趣。\n\n## 实习经历\n* <b>字节跳动AI Lab NLP算法工程师</b>\n2020/05 - 至今\n主要研究机器翻译模型的压缩与加速。\n利用参数共享、词向量分解、量化、蒸馏等模型压缩技术，减小模型的体积，最终部署到移动端上。\n最终实现模型体积压缩20倍，同时效果基本无损。\n\n## 学术成果\n* **A Span-based Linearization for Constituent Trees**\n *Yang Wei, Yuanbin Wu and Man Lan*， **ACL 2020**\n提出了一种成分句法树的序列化表示方法。\n基于该表示方法，模型的解码复杂度从O(n^3)降低到了O(n log n)，\n实际解码速度从30句/秒提高到了150句/秒，\n同时效果没有任何损失。\n\n## 获奖情况\n### 2020\n* <b>国家奖学金（硕士）</b>\n研二学年\n\n### 2017\n* <b>金牌</b>\nACM-ICPC全国邀请赛（陕西）\n* <b>团体一等奖</b>\n中国高校计算机大赛-团体程序设计天梯赛\n* <b>高校一等奖</b>\n中国高校计算机大赛-团体程序设计天梯赛\n* <b>特等奖学金</b>\n大三学年\n\n### 2016\n* <b>银牌</b>\nACM-ICPC亚洲区域赛（青岛）\n* <b>铜牌</b>\nACM-CCPC总决赛（宁波）\n* <b>铜牌</b>\nACM-CCPC（杭州）\n* <b>一等奖学金</b>\n大二学年\n\n### 2015\n* <b>铜牌</b>\nACM-ICPC亚洲区域赛（上海）\n* <b>铜牌</b>\nACM-ICPC上海大都会赛\n* <b>国家奖学金</b>\n大一学年\n\n## 联系方式\n* <b>电子邮箱</b>\ngodweiyang@gmail.com\n792321264@qq.com\n* <b>地址</b>\n上海市普陀区中山北路3663号理科大楼B906，邮编200062\n* <b>微信</b>\ngodweiyang\n* <b>QQ 技术交流群</b>\n864832264\n\n![](/medias/contact.jpg)","updated":"2021-04-07T07:06:29.249Z","path":"about/index.html","comments":1,"_id":"ckn74id7t0001w8nj00wtsfrl","content":"<h2 id=\"CV\"><a href=\"#CV\" class=\"headerlink\" title=\"CV\"></a>CV</h2><p><a href=\"/medias/files/cv-zh.pdf\">中文版</a><br><a href=\"/medias/files/cv-en.pdf\">English Version</a></p>\n<h2 id=\"教育背景\"><a href=\"#教育背景\" class=\"headerlink\" title=\"教育背景\"></a>教育背景</h2><ul>\n<li><b>硕士 华东师范大学 计算机科学与技术</b><br>2018/06 - 至今<br><em>均分：91.5/100</em></li>\n<li><b>本科 华东师范大学 计算机科学与技术</b><br>2014/09 - 2018/06<br><em>排名：1/110</em></li>\n</ul>\n<h2 id=\"研究方向\"><a href=\"#研究方向\" class=\"headerlink\" title=\"研究方向\"></a>研究方向</h2><p>主要研究<strong>成分句法分析、依存句法分析、机器翻译</strong>等方向，<br>对<strong>序列标注、语言模型、实体关系抽取、迁移学习</strong>等方向也感兴趣。</p>\n<h2 id=\"实习经历\"><a href=\"#实习经历\" class=\"headerlink\" title=\"实习经历\"></a>实习经历</h2><ul>\n<li><b>字节跳动AI Lab NLP算法工程师</b><br>2020/05 - 至今<br>主要研究机器翻译模型的压缩与加速。<br>利用参数共享、词向量分解、量化、蒸馏等模型压缩技术，减小模型的体积，最终部署到移动端上。<br>最终实现模型体积压缩20倍，同时效果基本无损。</li>\n</ul>\n<h2 id=\"学术成果\"><a href=\"#学术成果\" class=\"headerlink\" title=\"学术成果\"></a>学术成果</h2><ul>\n<li><strong>A Span-based Linearization for Constituent Trees</strong><br><em>Yang Wei, Yuanbin Wu and Man Lan</em>， <strong>ACL 2020</strong><br>提出了一种成分句法树的序列化表示方法。<br>基于该表示方法，模型的解码复杂度从O(n^3)降低到了O(n log n)，<br>实际解码速度从30句/秒提高到了150句/秒，<br>同时效果没有任何损失。</li>\n</ul>\n<h2 id=\"获奖情况\"><a href=\"#获奖情况\" class=\"headerlink\" title=\"获奖情况\"></a>获奖情况</h2><h3 id=\"2020\"><a href=\"#2020\" class=\"headerlink\" title=\"2020\"></a>2020</h3><ul>\n<li><b>国家奖学金（硕士）</b><br>研二学年</li>\n</ul>\n<h3 id=\"2017\"><a href=\"#2017\" class=\"headerlink\" title=\"2017\"></a>2017</h3><ul>\n<li><b>金牌</b><br>ACM-ICPC全国邀请赛（陕西）</li>\n<li><b>团体一等奖</b><br>中国高校计算机大赛-团体程序设计天梯赛</li>\n<li><b>高校一等奖</b><br>中国高校计算机大赛-团体程序设计天梯赛</li>\n<li><b>特等奖学金</b><br>大三学年</li>\n</ul>\n<h3 id=\"2016\"><a href=\"#2016\" class=\"headerlink\" title=\"2016\"></a>2016</h3><ul>\n<li><b>银牌</b><br>ACM-ICPC亚洲区域赛（青岛）</li>\n<li><b>铜牌</b><br>ACM-CCPC总决赛（宁波）</li>\n<li><b>铜牌</b><br>ACM-CCPC（杭州）</li>\n<li><b>一等奖学金</b><br>大二学年</li>\n</ul>\n<h3 id=\"2015\"><a href=\"#2015\" class=\"headerlink\" title=\"2015\"></a>2015</h3><ul>\n<li><b>铜牌</b><br>ACM-ICPC亚洲区域赛（上海）</li>\n<li><b>铜牌</b><br>ACM-ICPC上海大都会赛</li>\n<li><b>国家奖学金</b><br>大一学年</li>\n</ul>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><ul>\n<li><b>电子邮箱</b><br><a href=\"mailto:godweiyang@gmail.com\" target=\"_blank\" rel=\"noopener\">godweiyang@gmail.com</a><br><a href=\"mailto:792321264@qq.com\" target=\"_blank\" rel=\"noopener\">792321264@qq.com</a></li>\n<li><b>地址</b><br>上海市普陀区中山北路3663号理科大楼B906，邮编200062</li>\n<li><b>微信</b><br>godweiyang</li>\n<li><b>QQ 技术交流群</b><br>864832264</li>\n</ul>\n<p><img src=\"/medias/contact.jpg\" alt></p>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"},{"name":"火山翻译","url":"https://translate.volcengine.cn","title":"访问主页","introduction":"提供全球领先的翻译技术与服务","avatar":"/medias/avatars/bytedtrans.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"李佳倩的博客","url":"https://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.com/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://www.cnblogs.com/cww97/","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"https://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"https://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"lucifer的博客","url":"https://lucifer.ren/blog/","title":"访问主页","introduction":"一个脑洞很大的程序员。","avatar":"https://tva1.sinaimg.cn/large/006tNbRwly1ga7ognflh9j30b40b4q3w.jpg"},{"name":"钱栋伟","url":"https://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"CJ Blog","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"},{"name":"Tawn","url":"https://tawn0000.github.io/","title":"访问主页","introduction":"JNU ACMer","avatar":"/medias/avatars/tawn.jpg"},{"name":"Master X","url":"https://masterx.top/","title":"访问主页","introduction":"ECNU&ML&DL","avatar":"/medias/avatars/masterx.jpg"},{"name":"分享客","url":"https://sharerdiary.com/","title":"访问主页","introduction":"爱生活，爱分享！","avatar":"/medias/avatars/yezijie.png"},{"name":"taotao","url":"https://zouzhitao.github.io","title":"访问主页","introduction":"taotao 码字的地方","avatar":"/medias/avatars/taotao.jpg"},{"name":"Xiejiadong","url":"https://xiejiadong.com","title":"访问主页","introduction":"Xiejiadong's blog","avatar":"/medias/avatars/xiejiadong.jpg"},{"name":"飞吧","url":"https://fei.bar","title":"访问主页","introduction":"啓飞的个人博客","avatar":"/medias/avatars/feibar.png"},{"name":"ajin","url":"https://ajin.cloud","title":"访问主页","introduction":"Always be enthusiastic","avatar":"/medias/avatars/ajin.jpg"},{"name":"Hiyoung","url":"https://hiyoungai.com/","title":"访问主页","introduction":"宠辱不惊，看庭前花开花落；去留无意，望天空云卷云舒。","avatar":"https://cdn.jsdelivr.net/gh/hiyoung123/cdn/img/avatar.jpg"},{"name":"无言的博客","url":"https://www.yzplove.top","title":"访问主页","introduction":"代码真是越敲越香","avatar":"https://cdn.jsdelivr.net/gh/yzp-99/yzp-99.github.io/medias/avatars/me.jpg"},{"name":"Naixin Zhang","url":"https://naixinzhang.github.io/","title":"访问主页","introduction":"Econ Master | Data Analyst/scientist Candidate","avatar":"https://naixinzhang.github.io/medias/avatars/avatar.jpg"},{"name":"帅张的梦呓","url":"https://ishuaizhang.com","title":"访问主页","introduction":"XDUer","avatar":"https://ishuaizhang.com/medias/avatars/avatar.jpg"},{"name":"Gatsby’s blog","url":"https://a347807131.github.io/","title":"访问主页","introduction":"Nothing perfect, Noting special.","avatar":"https://a347807131.github.io/medias/avatar.gif"},{"name":"宇宙湾","url":"https://yuzhouwan.com/","title":"访问主页","introduction":"主要是大数据和人工智能的原创文章。","avatar":"https://yuzhouwan.com/yuzhouwan_logo_128x128.ico"},{"name":"Dotnet9的博客","url":"https://dotnet9.com","title":"访问主页","introduction":"一个热衷于互联网分享精神的个人博客站点","avatar":"https://img.dotnet9.com/logo-foot.png"},{"name":"Macchiato","url":"https://hcj123123.oschina.io","title":"访问主页","introduction":"java学习者","avatar":"https://y.gtimg.cn/music/photo_new/T002R300x300M000002qD7gF3fW0JL_1.jpg?max_age=2592000"},{"name":"过客~励む","url":"https://yafine-blog.cn","title":"访问主页","introduction":"你现在的努力，是为了以后有更多的选择。","avatar":"https://yafine-blog.cn/medias/avatar.jpg"},{"name":"meteorsh","url":"https://weisenhui.top","title":"访问主页","introduction":"Data Science & Engineering","avatar":"https://weisenhui.top/medias/avatar.jpg"},{"name":"Kuroko","url":"https://kuroko.info","title":"访问主页","introduction":"浓烟下的诗歌电台","avatar":"http://kuroko.info/wp-content/uploads/2020/11/2.jpg"}]}},"excerpt":"","more":"<h2 id=\"CV\"><a href=\"#CV\" class=\"headerlink\" title=\"CV\"></a>CV</h2><p><a href=\"/medias/files/cv-zh.pdf\">中文版</a><br><a href=\"/medias/files/cv-en.pdf\">English Version</a></p>\n<h2 id=\"教育背景\"><a href=\"#教育背景\" class=\"headerlink\" title=\"教育背景\"></a>教育背景</h2><ul>\n<li><b>硕士 华东师范大学 计算机科学与技术</b><br>2018/06 - 至今<br><em>均分：91.5/100</em></li>\n<li><b>本科 华东师范大学 计算机科学与技术</b><br>2014/09 - 2018/06<br><em>排名：1/110</em></li>\n</ul>\n<h2 id=\"研究方向\"><a href=\"#研究方向\" class=\"headerlink\" title=\"研究方向\"></a>研究方向</h2><p>主要研究<strong>成分句法分析、依存句法分析、机器翻译</strong>等方向，<br>对<strong>序列标注、语言模型、实体关系抽取、迁移学习</strong>等方向也感兴趣。</p>\n<h2 id=\"实习经历\"><a href=\"#实习经历\" class=\"headerlink\" title=\"实习经历\"></a>实习经历</h2><ul>\n<li><b>字节跳动AI Lab NLP算法工程师</b><br>2020/05 - 至今<br>主要研究机器翻译模型的压缩与加速。<br>利用参数共享、词向量分解、量化、蒸馏等模型压缩技术，减小模型的体积，最终部署到移动端上。<br>最终实现模型体积压缩20倍，同时效果基本无损。</li>\n</ul>\n<h2 id=\"学术成果\"><a href=\"#学术成果\" class=\"headerlink\" title=\"学术成果\"></a>学术成果</h2><ul>\n<li><strong>A Span-based Linearization for Constituent Trees</strong><br><em>Yang Wei, Yuanbin Wu and Man Lan</em>， <strong>ACL 2020</strong><br>提出了一种成分句法树的序列化表示方法。<br>基于该表示方法，模型的解码复杂度从O(n^3)降低到了O(n log n)，<br>实际解码速度从30句/秒提高到了150句/秒，<br>同时效果没有任何损失。</li>\n</ul>\n<h2 id=\"获奖情况\"><a href=\"#获奖情况\" class=\"headerlink\" title=\"获奖情况\"></a>获奖情况</h2><h3 id=\"2020\"><a href=\"#2020\" class=\"headerlink\" title=\"2020\"></a>2020</h3><ul>\n<li><b>国家奖学金（硕士）</b><br>研二学年</li>\n</ul>\n<h3 id=\"2017\"><a href=\"#2017\" class=\"headerlink\" title=\"2017\"></a>2017</h3><ul>\n<li><b>金牌</b><br>ACM-ICPC全国邀请赛（陕西）</li>\n<li><b>团体一等奖</b><br>中国高校计算机大赛-团体程序设计天梯赛</li>\n<li><b>高校一等奖</b><br>中国高校计算机大赛-团体程序设计天梯赛</li>\n<li><b>特等奖学金</b><br>大三学年</li>\n</ul>\n<h3 id=\"2016\"><a href=\"#2016\" class=\"headerlink\" title=\"2016\"></a>2016</h3><ul>\n<li><b>银牌</b><br>ACM-ICPC亚洲区域赛（青岛）</li>\n<li><b>铜牌</b><br>ACM-CCPC总决赛（宁波）</li>\n<li><b>铜牌</b><br>ACM-CCPC（杭州）</li>\n<li><b>一等奖学金</b><br>大二学年</li>\n</ul>\n<h3 id=\"2015\"><a href=\"#2015\" class=\"headerlink\" title=\"2015\"></a>2015</h3><ul>\n<li><b>铜牌</b><br>ACM-ICPC亚洲区域赛（上海）</li>\n<li><b>铜牌</b><br>ACM-ICPC上海大都会赛</li>\n<li><b>国家奖学金</b><br>大一学年</li>\n</ul>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><ul>\n<li><b>电子邮箱</b><br><a href=\"mailto:godweiyang@gmail.com\" target=\"_blank\" rel=\"noopener\">godweiyang@gmail.com</a><br><a href=\"mailto:792321264@qq.com\" target=\"_blank\" rel=\"noopener\">792321264@qq.com</a></li>\n<li><b>地址</b><br>上海市普陀区中山北路3663号理科大楼B906，邮编200062</li>\n<li><b>微信</b><br>godweiyang</li>\n<li><b>QQ 技术交流群</b><br>864832264</li>\n</ul>\n<p><img src=\"/medias/contact.jpg\" alt></p>\n"},{"title":"archives","date":"2019-07-19T08:39:20.000Z","type":"archives","layout":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2019-07-19 16:39:20\ntype: \"archives\"\nlayout: \"archives\"\n---","updated":"2021-04-07T07:06:29.249Z","path":"archives/index.html","comments":1,"_id":"ckn74id7u0002w8njl3ogjgfm","content":"","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"},{"name":"火山翻译","url":"https://translate.volcengine.cn","title":"访问主页","introduction":"提供全球领先的翻译技术与服务","avatar":"/medias/avatars/bytedtrans.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"李佳倩的博客","url":"https://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.com/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://www.cnblogs.com/cww97/","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"https://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"https://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"lucifer的博客","url":"https://lucifer.ren/blog/","title":"访问主页","introduction":"一个脑洞很大的程序员。","avatar":"https://tva1.sinaimg.cn/large/006tNbRwly1ga7ognflh9j30b40b4q3w.jpg"},{"name":"钱栋伟","url":"https://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"CJ Blog","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"},{"name":"Tawn","url":"https://tawn0000.github.io/","title":"访问主页","introduction":"JNU ACMer","avatar":"/medias/avatars/tawn.jpg"},{"name":"Master X","url":"https://masterx.top/","title":"访问主页","introduction":"ECNU&ML&DL","avatar":"/medias/avatars/masterx.jpg"},{"name":"分享客","url":"https://sharerdiary.com/","title":"访问主页","introduction":"爱生活，爱分享！","avatar":"/medias/avatars/yezijie.png"},{"name":"taotao","url":"https://zouzhitao.github.io","title":"访问主页","introduction":"taotao 码字的地方","avatar":"/medias/avatars/taotao.jpg"},{"name":"Xiejiadong","url":"https://xiejiadong.com","title":"访问主页","introduction":"Xiejiadong's blog","avatar":"/medias/avatars/xiejiadong.jpg"},{"name":"飞吧","url":"https://fei.bar","title":"访问主页","introduction":"啓飞的个人博客","avatar":"/medias/avatars/feibar.png"},{"name":"ajin","url":"https://ajin.cloud","title":"访问主页","introduction":"Always be enthusiastic","avatar":"/medias/avatars/ajin.jpg"},{"name":"Hiyoung","url":"https://hiyoungai.com/","title":"访问主页","introduction":"宠辱不惊，看庭前花开花落；去留无意，望天空云卷云舒。","avatar":"https://cdn.jsdelivr.net/gh/hiyoung123/cdn/img/avatar.jpg"},{"name":"无言的博客","url":"https://www.yzplove.top","title":"访问主页","introduction":"代码真是越敲越香","avatar":"https://cdn.jsdelivr.net/gh/yzp-99/yzp-99.github.io/medias/avatars/me.jpg"},{"name":"Naixin Zhang","url":"https://naixinzhang.github.io/","title":"访问主页","introduction":"Econ Master | Data Analyst/scientist Candidate","avatar":"https://naixinzhang.github.io/medias/avatars/avatar.jpg"},{"name":"帅张的梦呓","url":"https://ishuaizhang.com","title":"访问主页","introduction":"XDUer","avatar":"https://ishuaizhang.com/medias/avatars/avatar.jpg"},{"name":"Gatsby’s blog","url":"https://a347807131.github.io/","title":"访问主页","introduction":"Nothing perfect, Noting special.","avatar":"https://a347807131.github.io/medias/avatar.gif"},{"name":"宇宙湾","url":"https://yuzhouwan.com/","title":"访问主页","introduction":"主要是大数据和人工智能的原创文章。","avatar":"https://yuzhouwan.com/yuzhouwan_logo_128x128.ico"},{"name":"Dotnet9的博客","url":"https://dotnet9.com","title":"访问主页","introduction":"一个热衷于互联网分享精神的个人博客站点","avatar":"https://img.dotnet9.com/logo-foot.png"},{"name":"Macchiato","url":"https://hcj123123.oschina.io","title":"访问主页","introduction":"java学习者","avatar":"https://y.gtimg.cn/music/photo_new/T002R300x300M000002qD7gF3fW0JL_1.jpg?max_age=2592000"},{"name":"过客~励む","url":"https://yafine-blog.cn","title":"访问主页","introduction":"你现在的努力，是为了以后有更多的选择。","avatar":"https://yafine-blog.cn/medias/avatar.jpg"},{"name":"meteorsh","url":"https://weisenhui.top","title":"访问主页","introduction":"Data Science & Engineering","avatar":"https://weisenhui.top/medias/avatar.jpg"},{"name":"Kuroko","url":"https://kuroko.info","title":"访问主页","introduction":"浓烟下的诗歌电台","avatar":"http://kuroko.info/wp-content/uploads/2020/11/2.jpg"}]}},"excerpt":"","more":""},{"title":"categories","date":"2019-07-19T08:39:20.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-07-19 16:39:20\ntype: \"categories\"\nlayout: \"categories\"\n---","updated":"2021-04-07T07:06:29.250Z","path":"categories/index.html","comments":1,"_id":"ckn74id7v0003w8njgzddtbsv","content":"","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"},{"name":"火山翻译","url":"https://translate.volcengine.cn","title":"访问主页","introduction":"提供全球领先的翻译技术与服务","avatar":"/medias/avatars/bytedtrans.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"李佳倩的博客","url":"https://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.com/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://www.cnblogs.com/cww97/","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"https://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"https://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"lucifer的博客","url":"https://lucifer.ren/blog/","title":"访问主页","introduction":"一个脑洞很大的程序员。","avatar":"https://tva1.sinaimg.cn/large/006tNbRwly1ga7ognflh9j30b40b4q3w.jpg"},{"name":"钱栋伟","url":"https://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"CJ Blog","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"},{"name":"Tawn","url":"https://tawn0000.github.io/","title":"访问主页","introduction":"JNU ACMer","avatar":"/medias/avatars/tawn.jpg"},{"name":"Master X","url":"https://masterx.top/","title":"访问主页","introduction":"ECNU&ML&DL","avatar":"/medias/avatars/masterx.jpg"},{"name":"分享客","url":"https://sharerdiary.com/","title":"访问主页","introduction":"爱生活，爱分享！","avatar":"/medias/avatars/yezijie.png"},{"name":"taotao","url":"https://zouzhitao.github.io","title":"访问主页","introduction":"taotao 码字的地方","avatar":"/medias/avatars/taotao.jpg"},{"name":"Xiejiadong","url":"https://xiejiadong.com","title":"访问主页","introduction":"Xiejiadong's blog","avatar":"/medias/avatars/xiejiadong.jpg"},{"name":"飞吧","url":"https://fei.bar","title":"访问主页","introduction":"啓飞的个人博客","avatar":"/medias/avatars/feibar.png"},{"name":"ajin","url":"https://ajin.cloud","title":"访问主页","introduction":"Always be enthusiastic","avatar":"/medias/avatars/ajin.jpg"},{"name":"Hiyoung","url":"https://hiyoungai.com/","title":"访问主页","introduction":"宠辱不惊，看庭前花开花落；去留无意，望天空云卷云舒。","avatar":"https://cdn.jsdelivr.net/gh/hiyoung123/cdn/img/avatar.jpg"},{"name":"无言的博客","url":"https://www.yzplove.top","title":"访问主页","introduction":"代码真是越敲越香","avatar":"https://cdn.jsdelivr.net/gh/yzp-99/yzp-99.github.io/medias/avatars/me.jpg"},{"name":"Naixin Zhang","url":"https://naixinzhang.github.io/","title":"访问主页","introduction":"Econ Master | Data Analyst/scientist Candidate","avatar":"https://naixinzhang.github.io/medias/avatars/avatar.jpg"},{"name":"帅张的梦呓","url":"https://ishuaizhang.com","title":"访问主页","introduction":"XDUer","avatar":"https://ishuaizhang.com/medias/avatars/avatar.jpg"},{"name":"Gatsby’s blog","url":"https://a347807131.github.io/","title":"访问主页","introduction":"Nothing perfect, Noting special.","avatar":"https://a347807131.github.io/medias/avatar.gif"},{"name":"宇宙湾","url":"https://yuzhouwan.com/","title":"访问主页","introduction":"主要是大数据和人工智能的原创文章。","avatar":"https://yuzhouwan.com/yuzhouwan_logo_128x128.ico"},{"name":"Dotnet9的博客","url":"https://dotnet9.com","title":"访问主页","introduction":"一个热衷于互联网分享精神的个人博客站点","avatar":"https://img.dotnet9.com/logo-foot.png"},{"name":"Macchiato","url":"https://hcj123123.oschina.io","title":"访问主页","introduction":"java学习者","avatar":"https://y.gtimg.cn/music/photo_new/T002R300x300M000002qD7gF3fW0JL_1.jpg?max_age=2592000"},{"name":"过客~励む","url":"https://yafine-blog.cn","title":"访问主页","introduction":"你现在的努力，是为了以后有更多的选择。","avatar":"https://yafine-blog.cn/medias/avatar.jpg"},{"name":"meteorsh","url":"https://weisenhui.top","title":"访问主页","introduction":"Data Science & Engineering","avatar":"https://weisenhui.top/medias/avatar.jpg"},{"name":"Kuroko","url":"https://kuroko.info","title":"访问主页","introduction":"浓烟下的诗歌电台","avatar":"http://kuroko.info/wp-content/uploads/2020/11/2.jpg"}]}},"excerpt":"","more":""},{"title":"contact","date":"2019-07-26T09:17:02.000Z","type":"contact","layout":"contact","_content":"\n# 欢迎留言\n大家有任何问题，都可以在评论区给我留言，或者加 QQ 技术交流群【群号：864832264】。\n\n我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在评论区留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**godweiyang\n* **地址：**https://godweiyang.com\n* **简介：**公众号【算法码上来】，分享深度学习与NLP算法\n* **头像：**https://godweiyang.com/medias/avatars/avatar.jpg\n","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2019-07-26 17:17:02\ntype: \"contact\"\nlayout: \"contact\"\n---\n\n# 欢迎留言\n大家有任何问题，都可以在评论区给我留言，或者加 QQ 技术交流群【群号：864832264】。\n\n我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在评论区留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**godweiyang\n* **地址：**https://godweiyang.com\n* **简介：**公众号【算法码上来】，分享深度学习与NLP算法\n* **头像：**https://godweiyang.com/medias/avatars/avatar.jpg\n","updated":"2021-04-07T07:06:29.251Z","path":"contact/index.html","comments":1,"_id":"ckn74id980005w8nj4fwoyr4o","content":"<h1 id=\"欢迎留言\"><a href=\"#欢迎留言\" class=\"headerlink\" title=\"欢迎留言\"></a>欢迎留言</h1><p>大家有任何问题，都可以在评论区给我留言，或者加 QQ 技术交流群【群号：864832264】。</p>\n<p>我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。</p>\n<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在评论区留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>godweiyang</li>\n<li><strong>地址：</strong><a href=\"https://godweiyang.com\">https://godweiyang.com</a></li>\n<li><strong>简介：</strong>公众号【算法码上来】，分享深度学习与NLP算法</li>\n<li><strong>头像：</strong><a href=\"https://godweiyang.com/medias/avatars/avatar.jpg\">https://godweiyang.com/medias/avatars/avatar.jpg</a></li>\n</ul>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"},{"name":"火山翻译","url":"https://translate.volcengine.cn","title":"访问主页","introduction":"提供全球领先的翻译技术与服务","avatar":"/medias/avatars/bytedtrans.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"李佳倩的博客","url":"https://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.com/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://www.cnblogs.com/cww97/","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"https://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"https://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"lucifer的博客","url":"https://lucifer.ren/blog/","title":"访问主页","introduction":"一个脑洞很大的程序员。","avatar":"https://tva1.sinaimg.cn/large/006tNbRwly1ga7ognflh9j30b40b4q3w.jpg"},{"name":"钱栋伟","url":"https://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"CJ Blog","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"},{"name":"Tawn","url":"https://tawn0000.github.io/","title":"访问主页","introduction":"JNU ACMer","avatar":"/medias/avatars/tawn.jpg"},{"name":"Master X","url":"https://masterx.top/","title":"访问主页","introduction":"ECNU&ML&DL","avatar":"/medias/avatars/masterx.jpg"},{"name":"分享客","url":"https://sharerdiary.com/","title":"访问主页","introduction":"爱生活，爱分享！","avatar":"/medias/avatars/yezijie.png"},{"name":"taotao","url":"https://zouzhitao.github.io","title":"访问主页","introduction":"taotao 码字的地方","avatar":"/medias/avatars/taotao.jpg"},{"name":"Xiejiadong","url":"https://xiejiadong.com","title":"访问主页","introduction":"Xiejiadong's blog","avatar":"/medias/avatars/xiejiadong.jpg"},{"name":"飞吧","url":"https://fei.bar","title":"访问主页","introduction":"啓飞的个人博客","avatar":"/medias/avatars/feibar.png"},{"name":"ajin","url":"https://ajin.cloud","title":"访问主页","introduction":"Always be enthusiastic","avatar":"/medias/avatars/ajin.jpg"},{"name":"Hiyoung","url":"https://hiyoungai.com/","title":"访问主页","introduction":"宠辱不惊，看庭前花开花落；去留无意，望天空云卷云舒。","avatar":"https://cdn.jsdelivr.net/gh/hiyoung123/cdn/img/avatar.jpg"},{"name":"无言的博客","url":"https://www.yzplove.top","title":"访问主页","introduction":"代码真是越敲越香","avatar":"https://cdn.jsdelivr.net/gh/yzp-99/yzp-99.github.io/medias/avatars/me.jpg"},{"name":"Naixin Zhang","url":"https://naixinzhang.github.io/","title":"访问主页","introduction":"Econ Master | Data Analyst/scientist Candidate","avatar":"https://naixinzhang.github.io/medias/avatars/avatar.jpg"},{"name":"帅张的梦呓","url":"https://ishuaizhang.com","title":"访问主页","introduction":"XDUer","avatar":"https://ishuaizhang.com/medias/avatars/avatar.jpg"},{"name":"Gatsby’s blog","url":"https://a347807131.github.io/","title":"访问主页","introduction":"Nothing perfect, Noting special.","avatar":"https://a347807131.github.io/medias/avatar.gif"},{"name":"宇宙湾","url":"https://yuzhouwan.com/","title":"访问主页","introduction":"主要是大数据和人工智能的原创文章。","avatar":"https://yuzhouwan.com/yuzhouwan_logo_128x128.ico"},{"name":"Dotnet9的博客","url":"https://dotnet9.com","title":"访问主页","introduction":"一个热衷于互联网分享精神的个人博客站点","avatar":"https://img.dotnet9.com/logo-foot.png"},{"name":"Macchiato","url":"https://hcj123123.oschina.io","title":"访问主页","introduction":"java学习者","avatar":"https://y.gtimg.cn/music/photo_new/T002R300x300M000002qD7gF3fW0JL_1.jpg?max_age=2592000"},{"name":"过客~励む","url":"https://yafine-blog.cn","title":"访问主页","introduction":"你现在的努力，是为了以后有更多的选择。","avatar":"https://yafine-blog.cn/medias/avatar.jpg"},{"name":"meteorsh","url":"https://weisenhui.top","title":"访问主页","introduction":"Data Science & Engineering","avatar":"https://weisenhui.top/medias/avatar.jpg"},{"name":"Kuroko","url":"https://kuroko.info","title":"访问主页","introduction":"浓烟下的诗歌电台","avatar":"http://kuroko.info/wp-content/uploads/2020/11/2.jpg"}]}},"excerpt":"","more":"<h1 id=\"欢迎留言\"><a href=\"#欢迎留言\" class=\"headerlink\" title=\"欢迎留言\"></a>欢迎留言</h1><p>大家有任何问题，都可以在评论区给我留言，或者加 QQ 技术交流群【群号：864832264】。</p>\n<p>我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。</p>\n<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在评论区留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>godweiyang</li>\n<li><strong>地址：</strong><a href=\"https://godweiyang.com\">https://godweiyang.com</a></li>\n<li><strong>简介：</strong>公众号【算法码上来】，分享深度学习与NLP算法</li>\n<li><strong>头像：</strong><a href=\"https://godweiyang.com/medias/avatars/avatar.jpg\">https://godweiyang.com/medias/avatars/avatar.jpg</a></li>\n</ul>\n"},{"title":"friends","date":"2019-07-19T08:42:10.000Z","type":"friends","layout":"friends","_content":"\n# 友链交换\n想要交换友链的小伙伴，欢迎在留言板留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**godweiyang\n* **地址：**https://godweiyang.com\n* **简介：**公众号【算法码上来】，分享深度学习与NLP算法\n* **头像：**https://godweiyang.com/medias/avatars/avatar.jpg\n","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2019-07-19 16:42:10\ntype: \"friends\"\nlayout: \"friends\"\n---\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在留言板留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**godweiyang\n* **地址：**https://godweiyang.com\n* **简介：**公众号【算法码上来】，分享深度学习与NLP算法\n* **头像：**https://godweiyang.com/medias/avatars/avatar.jpg\n","updated":"2021-04-07T07:06:29.251Z","path":"friends/index.html","comments":1,"_id":"ckn74id990006w8njzv0ibg0e","content":"<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在留言板留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>godweiyang</li>\n<li><strong>地址：</strong><a href=\"https://godweiyang.com\">https://godweiyang.com</a></li>\n<li><strong>简介：</strong>公众号【算法码上来】，分享深度学习与NLP算法</li>\n<li><strong>头像：</strong><a href=\"https://godweiyang.com/medias/avatars/avatar.jpg\">https://godweiyang.com/medias/avatars/avatar.jpg</a></li>\n</ul>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"},{"name":"火山翻译","url":"https://translate.volcengine.cn","title":"访问主页","introduction":"提供全球领先的翻译技术与服务","avatar":"/medias/avatars/bytedtrans.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"李佳倩的博客","url":"https://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.com/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://www.cnblogs.com/cww97/","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"https://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"https://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"lucifer的博客","url":"https://lucifer.ren/blog/","title":"访问主页","introduction":"一个脑洞很大的程序员。","avatar":"https://tva1.sinaimg.cn/large/006tNbRwly1ga7ognflh9j30b40b4q3w.jpg"},{"name":"钱栋伟","url":"https://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"CJ Blog","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"},{"name":"Tawn","url":"https://tawn0000.github.io/","title":"访问主页","introduction":"JNU ACMer","avatar":"/medias/avatars/tawn.jpg"},{"name":"Master X","url":"https://masterx.top/","title":"访问主页","introduction":"ECNU&ML&DL","avatar":"/medias/avatars/masterx.jpg"},{"name":"分享客","url":"https://sharerdiary.com/","title":"访问主页","introduction":"爱生活，爱分享！","avatar":"/medias/avatars/yezijie.png"},{"name":"taotao","url":"https://zouzhitao.github.io","title":"访问主页","introduction":"taotao 码字的地方","avatar":"/medias/avatars/taotao.jpg"},{"name":"Xiejiadong","url":"https://xiejiadong.com","title":"访问主页","introduction":"Xiejiadong's blog","avatar":"/medias/avatars/xiejiadong.jpg"},{"name":"飞吧","url":"https://fei.bar","title":"访问主页","introduction":"啓飞的个人博客","avatar":"/medias/avatars/feibar.png"},{"name":"ajin","url":"https://ajin.cloud","title":"访问主页","introduction":"Always be enthusiastic","avatar":"/medias/avatars/ajin.jpg"},{"name":"Hiyoung","url":"https://hiyoungai.com/","title":"访问主页","introduction":"宠辱不惊，看庭前花开花落；去留无意，望天空云卷云舒。","avatar":"https://cdn.jsdelivr.net/gh/hiyoung123/cdn/img/avatar.jpg"},{"name":"无言的博客","url":"https://www.yzplove.top","title":"访问主页","introduction":"代码真是越敲越香","avatar":"https://cdn.jsdelivr.net/gh/yzp-99/yzp-99.github.io/medias/avatars/me.jpg"},{"name":"Naixin Zhang","url":"https://naixinzhang.github.io/","title":"访问主页","introduction":"Econ Master | Data Analyst/scientist Candidate","avatar":"https://naixinzhang.github.io/medias/avatars/avatar.jpg"},{"name":"帅张的梦呓","url":"https://ishuaizhang.com","title":"访问主页","introduction":"XDUer","avatar":"https://ishuaizhang.com/medias/avatars/avatar.jpg"},{"name":"Gatsby’s blog","url":"https://a347807131.github.io/","title":"访问主页","introduction":"Nothing perfect, Noting special.","avatar":"https://a347807131.github.io/medias/avatar.gif"},{"name":"宇宙湾","url":"https://yuzhouwan.com/","title":"访问主页","introduction":"主要是大数据和人工智能的原创文章。","avatar":"https://yuzhouwan.com/yuzhouwan_logo_128x128.ico"},{"name":"Dotnet9的博客","url":"https://dotnet9.com","title":"访问主页","introduction":"一个热衷于互联网分享精神的个人博客站点","avatar":"https://img.dotnet9.com/logo-foot.png"},{"name":"Macchiato","url":"https://hcj123123.oschina.io","title":"访问主页","introduction":"java学习者","avatar":"https://y.gtimg.cn/music/photo_new/T002R300x300M000002qD7gF3fW0JL_1.jpg?max_age=2592000"},{"name":"过客~励む","url":"https://yafine-blog.cn","title":"访问主页","introduction":"你现在的努力，是为了以后有更多的选择。","avatar":"https://yafine-blog.cn/medias/avatar.jpg"},{"name":"meteorsh","url":"https://weisenhui.top","title":"访问主页","introduction":"Data Science & Engineering","avatar":"https://weisenhui.top/medias/avatar.jpg"},{"name":"Kuroko","url":"https://kuroko.info","title":"访问主页","introduction":"浓烟下的诗歌电台","avatar":"http://kuroko.info/wp-content/uploads/2020/11/2.jpg"}]}},"excerpt":"","more":"<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在留言板留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>godweiyang</li>\n<li><strong>地址：</strong><a href=\"https://godweiyang.com\">https://godweiyang.com</a></li>\n<li><strong>简介：</strong>公众号【算法码上来】，分享深度学习与NLP算法</li>\n<li><strong>头像：</strong><a href=\"https://godweiyang.com/medias/avatars/avatar.jpg\">https://godweiyang.com/medias/avatars/avatar.jpg</a></li>\n</ul>\n"},{"title":"tags","date":"2019-07-19T08:40:27.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-07-19 16:40:27\ntype: \"tags\"\nlayout: \"tags\"\n---","updated":"2021-04-07T07:06:29.252Z","path":"tags/index.html","comments":1,"_id":"ckn74id9e0009w8njd2nbboee","content":"","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"},{"name":"火山翻译","url":"https://translate.volcengine.cn","title":"访问主页","introduction":"提供全球领先的翻译技术与服务","avatar":"/medias/avatars/bytedtrans.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"李佳倩的博客","url":"https://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.com/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://www.cnblogs.com/cww97/","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"https://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"https://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"lucifer的博客","url":"https://lucifer.ren/blog/","title":"访问主页","introduction":"一个脑洞很大的程序员。","avatar":"https://tva1.sinaimg.cn/large/006tNbRwly1ga7ognflh9j30b40b4q3w.jpg"},{"name":"钱栋伟","url":"https://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"CJ Blog","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"},{"name":"Tawn","url":"https://tawn0000.github.io/","title":"访问主页","introduction":"JNU ACMer","avatar":"/medias/avatars/tawn.jpg"},{"name":"Master X","url":"https://masterx.top/","title":"访问主页","introduction":"ECNU&ML&DL","avatar":"/medias/avatars/masterx.jpg"},{"name":"分享客","url":"https://sharerdiary.com/","title":"访问主页","introduction":"爱生活，爱分享！","avatar":"/medias/avatars/yezijie.png"},{"name":"taotao","url":"https://zouzhitao.github.io","title":"访问主页","introduction":"taotao 码字的地方","avatar":"/medias/avatars/taotao.jpg"},{"name":"Xiejiadong","url":"https://xiejiadong.com","title":"访问主页","introduction":"Xiejiadong's blog","avatar":"/medias/avatars/xiejiadong.jpg"},{"name":"飞吧","url":"https://fei.bar","title":"访问主页","introduction":"啓飞的个人博客","avatar":"/medias/avatars/feibar.png"},{"name":"ajin","url":"https://ajin.cloud","title":"访问主页","introduction":"Always be enthusiastic","avatar":"/medias/avatars/ajin.jpg"},{"name":"Hiyoung","url":"https://hiyoungai.com/","title":"访问主页","introduction":"宠辱不惊，看庭前花开花落；去留无意，望天空云卷云舒。","avatar":"https://cdn.jsdelivr.net/gh/hiyoung123/cdn/img/avatar.jpg"},{"name":"无言的博客","url":"https://www.yzplove.top","title":"访问主页","introduction":"代码真是越敲越香","avatar":"https://cdn.jsdelivr.net/gh/yzp-99/yzp-99.github.io/medias/avatars/me.jpg"},{"name":"Naixin Zhang","url":"https://naixinzhang.github.io/","title":"访问主页","introduction":"Econ Master | Data Analyst/scientist Candidate","avatar":"https://naixinzhang.github.io/medias/avatars/avatar.jpg"},{"name":"帅张的梦呓","url":"https://ishuaizhang.com","title":"访问主页","introduction":"XDUer","avatar":"https://ishuaizhang.com/medias/avatars/avatar.jpg"},{"name":"Gatsby’s blog","url":"https://a347807131.github.io/","title":"访问主页","introduction":"Nothing perfect, Noting special.","avatar":"https://a347807131.github.io/medias/avatar.gif"},{"name":"宇宙湾","url":"https://yuzhouwan.com/","title":"访问主页","introduction":"主要是大数据和人工智能的原创文章。","avatar":"https://yuzhouwan.com/yuzhouwan_logo_128x128.ico"},{"name":"Dotnet9的博客","url":"https://dotnet9.com","title":"访问主页","introduction":"一个热衷于互联网分享精神的个人博客站点","avatar":"https://img.dotnet9.com/logo-foot.png"},{"name":"Macchiato","url":"https://hcj123123.oschina.io","title":"访问主页","introduction":"java学习者","avatar":"https://y.gtimg.cn/music/photo_new/T002R300x300M000002qD7gF3fW0JL_1.jpg?max_age=2592000"},{"name":"过客~励む","url":"https://yafine-blog.cn","title":"访问主页","introduction":"你现在的努力，是为了以后有更多的选择。","avatar":"https://yafine-blog.cn/medias/avatar.jpg"},{"name":"meteorsh","url":"https://weisenhui.top","title":"访问主页","introduction":"Data Science & Engineering","avatar":"https://weisenhui.top/medias/avatar.jpg"},{"name":"Kuroko","url":"https://kuroko.info","title":"访问主页","introduction":"浓烟下的诗歌电台","avatar":"http://kuroko.info/wp-content/uploads/2020/11/2.jpg"}]}},"excerpt":"","more":""}],"Post":[{"title":"git | 常用命令","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-01-27T07:27:31.000Z","password":false,"summary":false,"_content":"\n#### 1、git初始化仓库\n```\n   git init  创建一个.git目录，跟踪管理版本\n```\n#### 2、 git 添加文件\n```\n git add xxx.xxx 添加文件到暂缓存区里\n git add .  添加目录下所有文件\n```\n#### 3、git提交\n```\n  git commit -m  \"提交文字说明\"\n```\n#### 4、查看提交状态\n```\n git status\n```\n\n#### 5、查看文件修改内容\n```\ngit diff xxx.xxx (具体文件名称) \n```\n\n#### 6、查看历史记录\n\n```\nget log \n\ngit log -n(n表示前N条)\n```\n\n> - 如果不带任何参数，它会列出所有历史记录，最近的排在最上方，显示提交对象的哈希值，作者、提交日期、和提交说明。如果记录过多，则按Page Up、Page Down、↓、↑来控制显示；按q退出历史记录列表。\n> - 如果不想向上面那样全部显示，可以选择显示前N条。\n\n```\n如两天前的提交历史：git log --since=2.days\n\n如指定作者为\"BeginMan\"的所有提交:$ git log --author=BeginMan\n\n如指定关键字为“init”的所有提交：$ git log --grep=init\n\n如指定提交者为\"Jack\"的所有提交：$ git log --committer=Jack\n\n注意作者与提交者的关系：作者是程序的修改者，提交者是代码提交人。\n```\n\n如指定2天前，作者为“BeginMan”的提交含有关键字'init'的前2条记录：\n\n> git log --since=2.days --author=BeginMan --grep=init -2\n\n\n查看某次commit做了哪些修改\n\n\n```\n  git log                       #查看commit的历史\n  git show <commit-hash-id>     #查看某次commit的修改内容\n```\n\n#### 7、获取版本号\n\n```\n  git reflog\n```\n#### 8、版本回退\n```\n  git reset --hard HEAD^ 回退上一个版本\n  git reset --hard HEAD^^ 回退上上个版本\n\n  git reset --hard HEAD~n 回退前n个版本\n  git reset --hard xxxxxx # 回退到某个版本回退点之前的所有信息。 (输入版本号)\n  git reset --hard origin/master    # 将本地的状态回退到和远程的一样 \n  git  reset  xxxxxx  # 回退到指定版本(输入版本号)\n```\n#### 9、关联远程仓库\n```\n  git remote add origin xxx (xxx为github/码云/其他仓库的项目地址)\n```\n#### 10、从仓库更新代码\n```\n  git pull\n  \n  git pull origin\n```\n将远程主机 origin 的 master 分支拉取过来，与本地的 brantest 分支合并。\n> git pull origin master:brantest\n如果远程分支是与当前分支合并，则冒号后面的部分可以省略。\n> git pull origin master\n#### 11、推送到远程库\n```\n  git push -u origin master\n  \n  git push\n  \n  git push --all origin\n```\n> - (1)、 git push -u origin master 如果当前分支与多个主机存在追踪关系，则可以使用 -u 参数指定一个默认主机，这样后面就可以不加任何参数使用git push，不带任何参数的git push，默认只推送当前分支，这叫做simple方式，还有一种matching方式，会推送所有有对应的远程分支的本地分支， Git 2.0之前默认使用matching，现在改为simple方式,如果想更改设置，可以使用git config命令。git config --global push.default matching OR git config --global push.default simple；可以使用git config -l 查看配置\n> - (2)、 git push --all origin 当遇到这种情况就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要 -all 选项\n> - (3)、 git push --force origin git push的时候需要本地先git pull更新到跟服务器版本一致，如果本地版本库比远程服务器上的低，那么一般会提示你git pull更新，如果一定要提交，那么可以使用这个命令。\n> - (4)、 git push origin --tags //git push 的时候不会推送分支，如果一定要推送标签的话那么可以使用这个命令\n\n#### 12、克隆远程仓库\n```\n  git clone 链接\n```\n#### 13、操作远程仓库\n```\n　1.git remote 不带参数，列出已经存在的远程分支\n\n　2.git remote -v | --verbose 列出详细信息，在每一个名字后面列出其远程url，此时， -v 选项(译注:此为 –verbose 的简写,取首字母),显示对应的克隆地址。\n\n　3.git remote add url   添加一个远程仓库\n```\n#### 14、分支\n```\n  git checkout -b dev 创建分支 \n  \n  git branch 查看当前分支\n  \n  git checkout master 切换到分支master\n  \n  git merge dev 把master分支合并到dev\n  \n  git branch xx 创建分支\n  \n  git branch -d xx 删除分支xx\n```\n以上只是罗列比较常用的命令，如果需要查看更详细的内容，大家可以去[菜鸟教程](  https://www.runoob.com/git/git-create-repository.html)的git教程学习，里面详细列举了git的所有使用方式。\n","source":"_posts/git使用命令.md","raw":"---\ntitle: git | 常用命令\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-01-27 15:27:31\npassword: false\nsummary: false\ntags:\n    - 博客\n    - git\n    - 命令\ncategories:\n    - git\n    - 随笔\n---\n\n#### 1、git初始化仓库\n```\n   git init  创建一个.git目录，跟踪管理版本\n```\n#### 2、 git 添加文件\n```\n git add xxx.xxx 添加文件到暂缓存区里\n git add .  添加目录下所有文件\n```\n#### 3、git提交\n```\n  git commit -m  \"提交文字说明\"\n```\n#### 4、查看提交状态\n```\n git status\n```\n\n#### 5、查看文件修改内容\n```\ngit diff xxx.xxx (具体文件名称) \n```\n\n#### 6、查看历史记录\n\n```\nget log \n\ngit log -n(n表示前N条)\n```\n\n> - 如果不带任何参数，它会列出所有历史记录，最近的排在最上方，显示提交对象的哈希值，作者、提交日期、和提交说明。如果记录过多，则按Page Up、Page Down、↓、↑来控制显示；按q退出历史记录列表。\n> - 如果不想向上面那样全部显示，可以选择显示前N条。\n\n```\n如两天前的提交历史：git log --since=2.days\n\n如指定作者为\"BeginMan\"的所有提交:$ git log --author=BeginMan\n\n如指定关键字为“init”的所有提交：$ git log --grep=init\n\n如指定提交者为\"Jack\"的所有提交：$ git log --committer=Jack\n\n注意作者与提交者的关系：作者是程序的修改者，提交者是代码提交人。\n```\n\n如指定2天前，作者为“BeginMan”的提交含有关键字'init'的前2条记录：\n\n> git log --since=2.days --author=BeginMan --grep=init -2\n\n\n查看某次commit做了哪些修改\n\n\n```\n  git log                       #查看commit的历史\n  git show <commit-hash-id>     #查看某次commit的修改内容\n```\n\n#### 7、获取版本号\n\n```\n  git reflog\n```\n#### 8、版本回退\n```\n  git reset --hard HEAD^ 回退上一个版本\n  git reset --hard HEAD^^ 回退上上个版本\n\n  git reset --hard HEAD~n 回退前n个版本\n  git reset --hard xxxxxx # 回退到某个版本回退点之前的所有信息。 (输入版本号)\n  git reset --hard origin/master    # 将本地的状态回退到和远程的一样 \n  git  reset  xxxxxx  # 回退到指定版本(输入版本号)\n```\n#### 9、关联远程仓库\n```\n  git remote add origin xxx (xxx为github/码云/其他仓库的项目地址)\n```\n#### 10、从仓库更新代码\n```\n  git pull\n  \n  git pull origin\n```\n将远程主机 origin 的 master 分支拉取过来，与本地的 brantest 分支合并。\n> git pull origin master:brantest\n如果远程分支是与当前分支合并，则冒号后面的部分可以省略。\n> git pull origin master\n#### 11、推送到远程库\n```\n  git push -u origin master\n  \n  git push\n  \n  git push --all origin\n```\n> - (1)、 git push -u origin master 如果当前分支与多个主机存在追踪关系，则可以使用 -u 参数指定一个默认主机，这样后面就可以不加任何参数使用git push，不带任何参数的git push，默认只推送当前分支，这叫做simple方式，还有一种matching方式，会推送所有有对应的远程分支的本地分支， Git 2.0之前默认使用matching，现在改为simple方式,如果想更改设置，可以使用git config命令。git config --global push.default matching OR git config --global push.default simple；可以使用git config -l 查看配置\n> - (2)、 git push --all origin 当遇到这种情况就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要 -all 选项\n> - (3)、 git push --force origin git push的时候需要本地先git pull更新到跟服务器版本一致，如果本地版本库比远程服务器上的低，那么一般会提示你git pull更新，如果一定要提交，那么可以使用这个命令。\n> - (4)、 git push origin --tags //git push 的时候不会推送分支，如果一定要推送标签的话那么可以使用这个命令\n\n#### 12、克隆远程仓库\n```\n  git clone 链接\n```\n#### 13、操作远程仓库\n```\n　1.git remote 不带参数，列出已经存在的远程分支\n\n　2.git remote -v | --verbose 列出详细信息，在每一个名字后面列出其远程url，此时， -v 选项(译注:此为 –verbose 的简写,取首字母),显示对应的克隆地址。\n\n　3.git remote add url   添加一个远程仓库\n```\n#### 14、分支\n```\n  git checkout -b dev 创建分支 \n  \n  git branch 查看当前分支\n  \n  git checkout master 切换到分支master\n  \n  git merge dev 把master分支合并到dev\n  \n  git branch xx 创建分支\n  \n  git branch -d xx 删除分支xx\n```\n以上只是罗列比较常用的命令，如果需要查看更详细的内容，大家可以去[菜鸟教程](  https://www.runoob.com/git/git-create-repository.html)的git教程学习，里面详细列举了git的所有使用方式。\n","slug":"git使用命令","published":1,"updated":"2021-04-07T08:53:01.341Z","_id":"ckn75jvix0000p8nj9q54g9dt","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"1、git初始化仓库\"><a href=\"#1、git初始化仓库\" class=\"headerlink\" title=\"1、git初始化仓库\"></a>1、git初始化仓库</h4><pre><code>   git init  创建一个.git目录，跟踪管理版本</code></pre><h4 id=\"2、-git-添加文件\"><a href=\"#2、-git-添加文件\" class=\"headerlink\" title=\"2、 git 添加文件\"></a>2、 git 添加文件</h4><pre><code> git add xxx.xxx 添加文件到暂缓存区里\n git add .  添加目录下所有文件</code></pre><h4 id=\"3、git提交\"><a href=\"#3、git提交\" class=\"headerlink\" title=\"3、git提交\"></a>3、git提交</h4><pre><code>  git commit -m  &quot;提交文字说明&quot;</code></pre><h4 id=\"4、查看提交状态\"><a href=\"#4、查看提交状态\" class=\"headerlink\" title=\"4、查看提交状态\"></a>4、查看提交状态</h4><pre><code> git status</code></pre><h4 id=\"5、查看文件修改内容\"><a href=\"#5、查看文件修改内容\" class=\"headerlink\" title=\"5、查看文件修改内容\"></a>5、查看文件修改内容</h4><pre><code>git diff xxx.xxx (具体文件名称) </code></pre><h4 id=\"6、查看历史记录\"><a href=\"#6、查看历史记录\" class=\"headerlink\" title=\"6、查看历史记录\"></a>6、查看历史记录</h4><pre><code>get log \n\ngit log -n(n表示前N条)</code></pre><blockquote>\n<ul>\n<li>如果不带任何参数，它会列出所有历史记录，最近的排在最上方，显示提交对象的哈希值，作者、提交日期、和提交说明。如果记录过多，则按Page Up、Page Down、↓、↑来控制显示；按q退出历史记录列表。</li>\n<li>如果不想向上面那样全部显示，可以选择显示前N条。</li>\n</ul>\n</blockquote>\n<pre><code>如两天前的提交历史：git log --since=2.days\n\n如指定作者为&quot;BeginMan&quot;的所有提交:$ git log --author=BeginMan\n\n如指定关键字为“init”的所有提交：$ git log --grep=init\n\n如指定提交者为&quot;Jack&quot;的所有提交：$ git log --committer=Jack\n\n注意作者与提交者的关系：作者是程序的修改者，提交者是代码提交人。</code></pre><p>如指定2天前，作者为“BeginMan”的提交含有关键字’init’的前2条记录：</p>\n<blockquote>\n<p>git log –since=2.days –author=BeginMan –grep=init -2</p>\n</blockquote>\n<p>查看某次commit做了哪些修改</p>\n<pre><code>  git log                       #查看commit的历史\n  git show &lt;commit-hash-id&gt;     #查看某次commit的修改内容</code></pre><h4 id=\"7、获取版本号\"><a href=\"#7、获取版本号\" class=\"headerlink\" title=\"7、获取版本号\"></a>7、获取版本号</h4><pre><code>  git reflog</code></pre><h4 id=\"8、版本回退\"><a href=\"#8、版本回退\" class=\"headerlink\" title=\"8、版本回退\"></a>8、版本回退</h4><pre><code>  git reset --hard HEAD^ 回退上一个版本\n  git reset --hard HEAD^^ 回退上上个版本\n\n  git reset --hard HEAD~n 回退前n个版本\n  git reset --hard xxxxxx # 回退到某个版本回退点之前的所有信息。 (输入版本号)\n  git reset --hard origin/master    # 将本地的状态回退到和远程的一样 \n  git  reset  xxxxxx  # 回退到指定版本(输入版本号)</code></pre><h4 id=\"9、关联远程仓库\"><a href=\"#9、关联远程仓库\" class=\"headerlink\" title=\"9、关联远程仓库\"></a>9、关联远程仓库</h4><pre><code>  git remote add origin xxx (xxx为github/码云/其他仓库的项目地址)</code></pre><h4 id=\"10、从仓库更新代码\"><a href=\"#10、从仓库更新代码\" class=\"headerlink\" title=\"10、从仓库更新代码\"></a>10、从仓库更新代码</h4><pre><code>  git pull\n\n  git pull origin</code></pre><p>将远程主机 origin 的 master 分支拉取过来，与本地的 brantest 分支合并。</p>\n<blockquote>\n<p>git pull origin master:brantest<br>如果远程分支是与当前分支合并，则冒号后面的部分可以省略。<br>git pull origin master</p>\n</blockquote>\n<h4 id=\"11、推送到远程库\"><a href=\"#11、推送到远程库\" class=\"headerlink\" title=\"11、推送到远程库\"></a>11、推送到远程库</h4><pre><code>  git push -u origin master\n\n  git push\n\n  git push --all origin</code></pre><blockquote>\n<ul>\n<li>(1)、 git push -u origin master 如果当前分支与多个主机存在追踪关系，则可以使用 -u 参数指定一个默认主机，这样后面就可以不加任何参数使用git push，不带任何参数的git push，默认只推送当前分支，这叫做simple方式，还有一种matching方式，会推送所有有对应的远程分支的本地分支， Git 2.0之前默认使用matching，现在改为simple方式,如果想更改设置，可以使用git config命令。git config –global push.default matching OR git config –global push.default simple；可以使用git config -l 查看配置</li>\n<li>(2)、 git push –all origin 当遇到这种情况就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要 -all 选项</li>\n<li>(3)、 git push –force origin git push的时候需要本地先git pull更新到跟服务器版本一致，如果本地版本库比远程服务器上的低，那么一般会提示你git pull更新，如果一定要提交，那么可以使用这个命令。</li>\n<li>(4)、 git push origin –tags //git push 的时候不会推送分支，如果一定要推送标签的话那么可以使用这个命令</li>\n</ul>\n</blockquote>\n<h4 id=\"12、克隆远程仓库\"><a href=\"#12、克隆远程仓库\" class=\"headerlink\" title=\"12、克隆远程仓库\"></a>12、克隆远程仓库</h4><pre><code>  git clone 链接</code></pre><h4 id=\"13、操作远程仓库\"><a href=\"#13、操作远程仓库\" class=\"headerlink\" title=\"13、操作远程仓库\"></a>13、操作远程仓库</h4><pre><code>　1.git remote 不带参数，列出已经存在的远程分支\n\n　2.git remote -v | --verbose 列出详细信息，在每一个名字后面列出其远程url，此时， -v 选项(译注:此为 –verbose 的简写,取首字母),显示对应的克隆地址。\n\n　3.git remote add url   添加一个远程仓库</code></pre><h4 id=\"14、分支\"><a href=\"#14、分支\" class=\"headerlink\" title=\"14、分支\"></a>14、分支</h4><pre><code>  git checkout -b dev 创建分支 \n\n  git branch 查看当前分支\n\n  git checkout master 切换到分支master\n\n  git merge dev 把master分支合并到dev\n\n  git branch xx 创建分支\n\n  git branch -d xx 删除分支xx</code></pre><p>以上只是罗列比较常用的命令，如果需要查看更详细的内容，大家可以去<a href=\"https://www.runoob.com/git/git-create-repository.html\" target=\"_blank\" rel=\"noopener\">菜鸟教程</a>的git教程学习，里面详细列举了git的所有使用方式。</p>\n","site":{"data":{"musics":[{"name":"Stay","artist":"Tonya Mitchell","url":"/medias/music/Tonya Mitchell-Stay.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"},{"name":"火山翻译","url":"https://translate.volcengine.cn","title":"访问主页","introduction":"提供全球领先的翻译技术与服务","avatar":"/medias/avatars/bytedtrans.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"李佳倩的博客","url":"https://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.com/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://www.cnblogs.com/cww97/","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"https://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"https://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"lucifer的博客","url":"https://lucifer.ren/blog/","title":"访问主页","introduction":"一个脑洞很大的程序员。","avatar":"https://tva1.sinaimg.cn/large/006tNbRwly1ga7ognflh9j30b40b4q3w.jpg"},{"name":"钱栋伟","url":"https://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"CJ Blog","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"},{"name":"Tawn","url":"https://tawn0000.github.io/","title":"访问主页","introduction":"JNU ACMer","avatar":"/medias/avatars/tawn.jpg"},{"name":"Master X","url":"https://masterx.top/","title":"访问主页","introduction":"ECNU&ML&DL","avatar":"/medias/avatars/masterx.jpg"},{"name":"分享客","url":"https://sharerdiary.com/","title":"访问主页","introduction":"爱生活，爱分享！","avatar":"/medias/avatars/yezijie.png"},{"name":"taotao","url":"https://zouzhitao.github.io","title":"访问主页","introduction":"taotao 码字的地方","avatar":"/medias/avatars/taotao.jpg"},{"name":"Xiejiadong","url":"https://xiejiadong.com","title":"访问主页","introduction":"Xiejiadong's blog","avatar":"/medias/avatars/xiejiadong.jpg"},{"name":"飞吧","url":"https://fei.bar","title":"访问主页","introduction":"啓飞的个人博客","avatar":"/medias/avatars/feibar.png"},{"name":"ajin","url":"https://ajin.cloud","title":"访问主页","introduction":"Always be enthusiastic","avatar":"/medias/avatars/ajin.jpg"},{"name":"Hiyoung","url":"https://hiyoungai.com/","title":"访问主页","introduction":"宠辱不惊，看庭前花开花落；去留无意，望天空云卷云舒。","avatar":"https://cdn.jsdelivr.net/gh/hiyoung123/cdn/img/avatar.jpg"},{"name":"无言的博客","url":"https://www.yzplove.top","title":"访问主页","introduction":"代码真是越敲越香","avatar":"https://cdn.jsdelivr.net/gh/yzp-99/yzp-99.github.io/medias/avatars/me.jpg"},{"name":"Naixin Zhang","url":"https://naixinzhang.github.io/","title":"访问主页","introduction":"Econ Master | Data Analyst/scientist Candidate","avatar":"https://naixinzhang.github.io/medias/avatars/avatar.jpg"}]}},"excerpt":"","more":"<h4 id=\"1、git初始化仓库\"><a href=\"#1、git初始化仓库\" class=\"headerlink\" title=\"1、git初始化仓库\"></a>1、git初始化仓库</h4><pre><code>   git init  创建一个.git目录，跟踪管理版本</code></pre><h4 id=\"2、-git-添加文件\"><a href=\"#2、-git-添加文件\" class=\"headerlink\" title=\"2、 git 添加文件\"></a>2、 git 添加文件</h4><pre><code> git add xxx.xxx 添加文件到暂缓存区里\n git add .  添加目录下所有文件</code></pre><h4 id=\"3、git提交\"><a href=\"#3、git提交\" class=\"headerlink\" title=\"3、git提交\"></a>3、git提交</h4><pre><code>  git commit -m  &quot;提交文字说明&quot;</code></pre><h4 id=\"4、查看提交状态\"><a href=\"#4、查看提交状态\" class=\"headerlink\" title=\"4、查看提交状态\"></a>4、查看提交状态</h4><pre><code> git status</code></pre><h4 id=\"5、查看文件修改内容\"><a href=\"#5、查看文件修改内容\" class=\"headerlink\" title=\"5、查看文件修改内容\"></a>5、查看文件修改内容</h4><pre><code>git diff xxx.xxx (具体文件名称) </code></pre><h4 id=\"6、查看历史记录\"><a href=\"#6、查看历史记录\" class=\"headerlink\" title=\"6、查看历史记录\"></a>6、查看历史记录</h4><pre><code>get log \n\ngit log -n(n表示前N条)</code></pre><blockquote>\n<ul>\n<li>如果不带任何参数，它会列出所有历史记录，最近的排在最上方，显示提交对象的哈希值，作者、提交日期、和提交说明。如果记录过多，则按Page Up、Page Down、↓、↑来控制显示；按q退出历史记录列表。</li>\n<li>如果不想向上面那样全部显示，可以选择显示前N条。</li>\n</ul>\n</blockquote>\n<pre><code>如两天前的提交历史：git log --since=2.days\n\n如指定作者为&quot;BeginMan&quot;的所有提交:$ git log --author=BeginMan\n\n如指定关键字为“init”的所有提交：$ git log --grep=init\n\n如指定提交者为&quot;Jack&quot;的所有提交：$ git log --committer=Jack\n\n注意作者与提交者的关系：作者是程序的修改者，提交者是代码提交人。</code></pre><p>如指定2天前，作者为“BeginMan”的提交含有关键字’init’的前2条记录：</p>\n<blockquote>\n<p>git log –since=2.days –author=BeginMan –grep=init -2</p>\n</blockquote>\n<p>查看某次commit做了哪些修改</p>\n<pre><code>  git log                       #查看commit的历史\n  git show &lt;commit-hash-id&gt;     #查看某次commit的修改内容</code></pre><h4 id=\"7、获取版本号\"><a href=\"#7、获取版本号\" class=\"headerlink\" title=\"7、获取版本号\"></a>7、获取版本号</h4><pre><code>  git reflog</code></pre><h4 id=\"8、版本回退\"><a href=\"#8、版本回退\" class=\"headerlink\" title=\"8、版本回退\"></a>8、版本回退</h4><pre><code>  git reset --hard HEAD^ 回退上一个版本\n  git reset --hard HEAD^^ 回退上上个版本\n\n  git reset --hard HEAD~n 回退前n个版本\n  git reset --hard xxxxxx # 回退到某个版本回退点之前的所有信息。 (输入版本号)\n  git reset --hard origin/master    # 将本地的状态回退到和远程的一样 \n  git  reset  xxxxxx  # 回退到指定版本(输入版本号)</code></pre><h4 id=\"9、关联远程仓库\"><a href=\"#9、关联远程仓库\" class=\"headerlink\" title=\"9、关联远程仓库\"></a>9、关联远程仓库</h4><pre><code>  git remote add origin xxx (xxx为github/码云/其他仓库的项目地址)</code></pre><h4 id=\"10、从仓库更新代码\"><a href=\"#10、从仓库更新代码\" class=\"headerlink\" title=\"10、从仓库更新代码\"></a>10、从仓库更新代码</h4><pre><code>  git pull\n\n  git pull origin</code></pre><p>将远程主机 origin 的 master 分支拉取过来，与本地的 brantest 分支合并。</p>\n<blockquote>\n<p>git pull origin master:brantest<br>如果远程分支是与当前分支合并，则冒号后面的部分可以省略。<br>git pull origin master</p>\n</blockquote>\n<h4 id=\"11、推送到远程库\"><a href=\"#11、推送到远程库\" class=\"headerlink\" title=\"11、推送到远程库\"></a>11、推送到远程库</h4><pre><code>  git push -u origin master\n\n  git push\n\n  git push --all origin</code></pre><blockquote>\n<ul>\n<li>(1)、 git push -u origin master 如果当前分支与多个主机存在追踪关系，则可以使用 -u 参数指定一个默认主机，这样后面就可以不加任何参数使用git push，不带任何参数的git push，默认只推送当前分支，这叫做simple方式，还有一种matching方式，会推送所有有对应的远程分支的本地分支， Git 2.0之前默认使用matching，现在改为simple方式,如果想更改设置，可以使用git config命令。git config –global push.default matching OR git config –global push.default simple；可以使用git config -l 查看配置</li>\n<li>(2)、 git push –all origin 当遇到这种情况就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要 -all 选项</li>\n<li>(3)、 git push –force origin git push的时候需要本地先git pull更新到跟服务器版本一致，如果本地版本库比远程服务器上的低，那么一般会提示你git pull更新，如果一定要提交，那么可以使用这个命令。</li>\n<li>(4)、 git push origin –tags //git push 的时候不会推送分支，如果一定要推送标签的话那么可以使用这个命令</li>\n</ul>\n</blockquote>\n<h4 id=\"12、克隆远程仓库\"><a href=\"#12、克隆远程仓库\" class=\"headerlink\" title=\"12、克隆远程仓库\"></a>12、克隆远程仓库</h4><pre><code>  git clone 链接</code></pre><h4 id=\"13、操作远程仓库\"><a href=\"#13、操作远程仓库\" class=\"headerlink\" title=\"13、操作远程仓库\"></a>13、操作远程仓库</h4><pre><code>　1.git remote 不带参数，列出已经存在的远程分支\n\n　2.git remote -v | --verbose 列出详细信息，在每一个名字后面列出其远程url，此时， -v 选项(译注:此为 –verbose 的简写,取首字母),显示对应的克隆地址。\n\n　3.git remote add url   添加一个远程仓库</code></pre><h4 id=\"14、分支\"><a href=\"#14、分支\" class=\"headerlink\" title=\"14、分支\"></a>14、分支</h4><pre><code>  git checkout -b dev 创建分支 \n\n  git branch 查看当前分支\n\n  git checkout master 切换到分支master\n\n  git merge dev 把master分支合并到dev\n\n  git branch xx 创建分支\n\n  git branch -d xx 删除分支xx</code></pre><p>以上只是罗列比较常用的命令，如果需要查看更详细的内容，大家可以去<a href=\"https://www.runoob.com/git/git-create-repository.html\" target=\"_blank\" rel=\"noopener\">菜鸟教程</a>的git教程学习，里面详细列举了git的所有使用方式。</p>\n"},{"title":"npm发布组件库的流程","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-01-25T16:00:00.000Z","password":false,"summary":false,"_content":"\n\n1、首先去npm官网注册自己的账号密码   \n2、在项目文件夹中打开命令行  输入 npm login命令，然后输入用户名密码邮箱登录    \n3、成功后，输入npm publish发布(此处应保证为npm原始镜像，并非淘宝镜像) \n - 全局配置切换到淘宝源\n  ```\n    npm config set registry https://registry.npm.taobao.org\n  ```\n - 全局配置切换到官方源\n```\n  npm config set registry http://www.npmjs.org\n```\n> 注意： 如果是淘宝镜像，则需要切换为npm原始镜像，然后重新登录。不然回报(404 错误，提示不在注册表的错误信息)\n\n```\n撤销或者删除某个包\n npm unpublish --force an_util@1.0.1\n --force 表示强制删除\n```\n","source":"_posts/npm/npm发布组件库的流程.md","raw":"---\ntitle: npm发布组件库的流程\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-01-26 \npassword: false\nsummary: false\ntags:\n    - npm\ncategories:\n    - npm服务器\n---\n\n\n1、首先去npm官网注册自己的账号密码   \n2、在项目文件夹中打开命令行  输入 npm login命令，然后输入用户名密码邮箱登录    \n3、成功后，输入npm publish发布(此处应保证为npm原始镜像，并非淘宝镜像) \n - 全局配置切换到淘宝源\n  ```\n    npm config set registry https://registry.npm.taobao.org\n  ```\n - 全局配置切换到官方源\n```\n  npm config set registry http://www.npmjs.org\n```\n> 注意： 如果是淘宝镜像，则需要切换为npm原始镜像，然后重新登录。不然回报(404 错误，提示不在注册表的错误信息)\n\n```\n撤销或者删除某个包\n npm unpublish --force an_util@1.0.1\n --force 表示强制删除\n```\n","slug":"npm/npm发布组件库的流程","published":1,"updated":"2021-04-07T08:52:07.870Z","_id":"ckn77mqok000dxwnjayh8dicd","comments":1,"layout":"post","photos":[],"link":"","content":"<p>1、首先去npm官网注册自己的账号密码<br>2、在项目文件夹中打开命令行  输入 npm login命令，然后输入用户名密码邮箱登录<br>3、成功后，输入npm publish发布(此处应保证为npm原始镜像，并非淘宝镜像) </p>\n<ul>\n<li>全局配置切换到淘宝源<pre><code> npm config set registry https://registry.npm.taobao.org</code></pre></li>\n<li>全局配置切换到官方源<pre><code>npm config set registry http://www.npmjs.org</code></pre><blockquote>\n<p>注意： 如果是淘宝镜像，则需要切换为npm原始镜像，然后重新登录。不然回报(404 错误，提示不在注册表的错误信息)</p>\n</blockquote>\n</li>\n</ul>\n<pre><code>撤销或者删除某个包\n npm unpublish --force an_util@1.0.1\n --force 表示强制删除</code></pre>","site":{"data":{"musics":[{"name":"Stay","artist":"Tonya Mitchell","url":"/medias/music/Tonya Mitchell-Stay.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"},{"name":"火山翻译","url":"https://translate.volcengine.cn","title":"访问主页","introduction":"提供全球领先的翻译技术与服务","avatar":"/medias/avatars/bytedtrans.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"李佳倩的博客","url":"https://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.com/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://www.cnblogs.com/cww97/","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"https://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"https://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"lucifer的博客","url":"https://lucifer.ren/blog/","title":"访问主页","introduction":"一个脑洞很大的程序员。","avatar":"https://tva1.sinaimg.cn/large/006tNbRwly1ga7ognflh9j30b40b4q3w.jpg"},{"name":"钱栋伟","url":"https://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"CJ Blog","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"},{"name":"Tawn","url":"https://tawn0000.github.io/","title":"访问主页","introduction":"JNU ACMer","avatar":"/medias/avatars/tawn.jpg"},{"name":"Master X","url":"https://masterx.top/","title":"访问主页","introduction":"ECNU&ML&DL","avatar":"/medias/avatars/masterx.jpg"},{"name":"分享客","url":"https://sharerdiary.com/","title":"访问主页","introduction":"爱生活，爱分享！","avatar":"/medias/avatars/yezijie.png"},{"name":"taotao","url":"https://zouzhitao.github.io","title":"访问主页","introduction":"taotao 码字的地方","avatar":"/medias/avatars/taotao.jpg"},{"name":"Xiejiadong","url":"https://xiejiadong.com","title":"访问主页","introduction":"Xiejiadong's blog","avatar":"/medias/avatars/xiejiadong.jpg"},{"name":"飞吧","url":"https://fei.bar","title":"访问主页","introduction":"啓飞的个人博客","avatar":"/medias/avatars/feibar.png"},{"name":"ajin","url":"https://ajin.cloud","title":"访问主页","introduction":"Always be enthusiastic","avatar":"/medias/avatars/ajin.jpg"},{"name":"Hiyoung","url":"https://hiyoungai.com/","title":"访问主页","introduction":"宠辱不惊，看庭前花开花落；去留无意，望天空云卷云舒。","avatar":"https://cdn.jsdelivr.net/gh/hiyoung123/cdn/img/avatar.jpg"},{"name":"无言的博客","url":"https://www.yzplove.top","title":"访问主页","introduction":"代码真是越敲越香","avatar":"https://cdn.jsdelivr.net/gh/yzp-99/yzp-99.github.io/medias/avatars/me.jpg"},{"name":"Naixin Zhang","url":"https://naixinzhang.github.io/","title":"访问主页","introduction":"Econ Master | Data Analyst/scientist Candidate","avatar":"https://naixinzhang.github.io/medias/avatars/avatar.jpg"}]}},"excerpt":"","more":"<p>1、首先去npm官网注册自己的账号密码<br>2、在项目文件夹中打开命令行  输入 npm login命令，然后输入用户名密码邮箱登录<br>3、成功后，输入npm publish发布(此处应保证为npm原始镜像，并非淘宝镜像) </p>\n<ul>\n<li>全局配置切换到淘宝源<pre><code> npm config set registry https://registry.npm.taobao.org</code></pre></li>\n<li>全局配置切换到官方源<pre><code>npm config set registry http://www.npmjs.org</code></pre><blockquote>\n<p>注意： 如果是淘宝镜像，则需要切换为npm原始镜像，然后重新登录。不然回报(404 错误，提示不在注册表的错误信息)</p>\n</blockquote>\n</li>\n</ul>\n<pre><code>撤销或者删除某个包\n npm unpublish --force an_util@1.0.1\n --force 表示强制删除</code></pre>"},{"title":"npm私有服务器搭建","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-01-24T16:00:00.000Z","password":false,"summary":false,"_content":"\n### 一、搭建npm私有服务器\n1、首先安装 Node,然后输入以下命令，安装 verdaccio，\n\n```\n    npm install -g verdaccio\n```\n\n2、如果在安装过程中报 grywarn 的权限错的话，那么需要加上 --unsafe-perm, 如下命令\n\n```\n    npm install -g verdaccio --unsafe-perm\n```\n\n3、在命令行中输入 verdaccio 命令回车, 如下图:\n\n- (1)、config file 表示配置文件所在的位置\n  \n  ![](https://static01.imgkr.com/temp/a1fe5b2609de42f6a203a91992289b64.png)\n\n- > http address 表示运行的地址\n\n4、打开上图显示的 http://localhost:4873 地址，显示以下页面表示安装成功\n\n![](https://imgkr2.cn-bj.ufileos.com/18ad683c-83b1-42e9-860a-f61661053a6e.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=UrTxP2i%252BIh6mAf7uukjBocu5ATM%253D&Expires=1611726293)\n\n5、找到以上第三步显示的配置文件地址，修改配置文件，末尾新增 listen: 0.0.0.0:4873 ，通过访问本机 ip 地址访问。\n\n> 如下是新增的，默认是没有的，只能在本机访问，添加完成后就可以在外网访问了~ \n>       listen: 0.0.0.0:4873\n\n6、下载 nrm 管理 npm 镜像地址。\n\n- (1)、安装命令：npm install -g nrm\n  想要了解更多有关的 nrm 命令，可以使用 nrm --help, 会列出所有的命令行的\n- (2)、添加私有镜像，设置别名（此处地址为我本地搭建地址，此处可以修改为自己的服务器地址）\n\n> nrm add  verdaccio（此名字可自定义）http://192.168.6.98:4873\n\n- (3)、nrm 查看全部镜像\n\n```\n  nrm  ls\n```\n\n![](https://imgkr2.cn-bj.ufileos.com/f7fb7dd7-3d96-4d4d-bcf4-a3032b570dc7.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=n3s%252BlN42GFr6dGIKdvR%252Bpz0cxA0%253D&Expires=1611726454)\n此处最后一项是我添加的私有镜像。\n\n- (4)、切换镜像\n  nrm use  镜像名称(verdaccio)\n  如果不想使用私有 npm 上下载包的话，可以使用 nrm use xxx 命令，切换镜像\n\n7、npm 发布包  \n要在私有 npm 仓库中发布包首先需要注册或者登陆账号。如果我们还没有账号的话，通过输入命令 npm adduser，然后依次输入用户名，密码即可创建完毕，如果已有账号，通过 npm login，依次输入用户名密码即可登陆。然后进入我们需要上传的代码目录，执行发布命令即可\n> 如果出现以下错误日志可以先忽略\n![](https://imgkr2.cn-bj.ufileos.com/1e8be315-df95-4207-bd38-1185955cf993.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=cbfzcQNQnwY7pWwqAyY%252FUVMND5o%253D&Expires=1611726576)\n\n输入用户名、 密码、邮箱  ，出现登录再某某地址表示登录成功\n![](https://imgkr2.cn-bj.ufileos.com/555471a5-5506-4415-a5e3-ea359d4f4823.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=C6IXiwMnd44tuRs94jON93WxpU4%253D&Expires=1611726595)\n8、进入需要组件库项目中，输入以下命令 上传组件库到私有服务器中\n```\n npm publish --registry http://192.168.6.98:4873\n```\n\n![](https://imgkr2.cn-bj.ufileos.com/c517471c-e14b-4419-a333-66292b23e442.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=lDOe1kbLBpTSEkZywEOYWzPoJCc%253D&Expires=1611726954)\n\n![](https://static01.imgkr.com/temp/69b55129fb9c4bc3beb80a81807bc4d5.png)\n上传成功后 ，进入刚才启动的cerdaccio服务，刷新页面。看到以下组件库名称，表示上传成功。\n\n![](https://static01.imgkr.com/temp/5d263d0dbf1b41fca110e3e9dce1787c.png)\n这样私有组件库就算搭建成功了。\n\n### 二、私有服务器的组件下载使用\n\n1、首先根据上面的nrm use 命令 切换npm 为私有组件库源镜像。\n\n2、 创建一个vue 项目\n```\n   使用 npm install -s test_ui  \n```\n![](https://static01.imgkr.com/temp/2e35d790c65b452e9f58dbdc2af1dadc.png)\n> 注意：此处的 test_ui 为上面上传到私有组件库服务的组件库名称\n\n3、在main.js里面导入使用组件库\n\n![](https://imgkr2.cn-bj.ufileos.com/2c81eaa1-9604-470a-b0c7-ec630e033fac.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=DmyNjO7zkbz0gZUen4mOxWx%252BVsQ%253D&Expires=1611727080)\n\n4、成功后 在组件中引用message组件\n\n![](https://static01.imgkr.com/temp/cbcf0191f01e4ba088c3ea0cafe28f68.png)\n\n5、npm run start 启动项目，出现以下字样表示引用成功。\n\n![](https://static01.imgkr.com/temp/2558b4a84ba146eebfe82a5d87202dee.png)\n\n这样组件库使用成功咯，是不是非常的简单~~\n\n>本文适用于部分中小型公司搭建自己前端的生态体系的私有服务器，可以自己搭建，也可以直接去npm上购买私服，此方法只是其中一种，还有很多方式可以搭建私有npm组件库，仅供大家参考，有疑问随时与我联系，大家一起学习一起成长。\n","source":"_posts/npm/npm私有服务器搭建.md","raw":"---\ntitle: npm私有服务器搭建\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-01-25\npassword: false\nsummary: false\ntags:\n    - npm\n    - 服务器\ncategories:\n    - npm服务器\n---\n\n### 一、搭建npm私有服务器\n1、首先安装 Node,然后输入以下命令，安装 verdaccio，\n\n```\n    npm install -g verdaccio\n```\n\n2、如果在安装过程中报 grywarn 的权限错的话，那么需要加上 --unsafe-perm, 如下命令\n\n```\n    npm install -g verdaccio --unsafe-perm\n```\n\n3、在命令行中输入 verdaccio 命令回车, 如下图:\n\n- (1)、config file 表示配置文件所在的位置\n  \n  ![](https://static01.imgkr.com/temp/a1fe5b2609de42f6a203a91992289b64.png)\n\n- > http address 表示运行的地址\n\n4、打开上图显示的 http://localhost:4873 地址，显示以下页面表示安装成功\n\n![](https://imgkr2.cn-bj.ufileos.com/18ad683c-83b1-42e9-860a-f61661053a6e.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=UrTxP2i%252BIh6mAf7uukjBocu5ATM%253D&Expires=1611726293)\n\n5、找到以上第三步显示的配置文件地址，修改配置文件，末尾新增 listen: 0.0.0.0:4873 ，通过访问本机 ip 地址访问。\n\n> 如下是新增的，默认是没有的，只能在本机访问，添加完成后就可以在外网访问了~ \n>       listen: 0.0.0.0:4873\n\n6、下载 nrm 管理 npm 镜像地址。\n\n- (1)、安装命令：npm install -g nrm\n  想要了解更多有关的 nrm 命令，可以使用 nrm --help, 会列出所有的命令行的\n- (2)、添加私有镜像，设置别名（此处地址为我本地搭建地址，此处可以修改为自己的服务器地址）\n\n> nrm add  verdaccio（此名字可自定义）http://192.168.6.98:4873\n\n- (3)、nrm 查看全部镜像\n\n```\n  nrm  ls\n```\n\n![](https://imgkr2.cn-bj.ufileos.com/f7fb7dd7-3d96-4d4d-bcf4-a3032b570dc7.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=n3s%252BlN42GFr6dGIKdvR%252Bpz0cxA0%253D&Expires=1611726454)\n此处最后一项是我添加的私有镜像。\n\n- (4)、切换镜像\n  nrm use  镜像名称(verdaccio)\n  如果不想使用私有 npm 上下载包的话，可以使用 nrm use xxx 命令，切换镜像\n\n7、npm 发布包  \n要在私有 npm 仓库中发布包首先需要注册或者登陆账号。如果我们还没有账号的话，通过输入命令 npm adduser，然后依次输入用户名，密码即可创建完毕，如果已有账号，通过 npm login，依次输入用户名密码即可登陆。然后进入我们需要上传的代码目录，执行发布命令即可\n> 如果出现以下错误日志可以先忽略\n![](https://imgkr2.cn-bj.ufileos.com/1e8be315-df95-4207-bd38-1185955cf993.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=cbfzcQNQnwY7pWwqAyY%252FUVMND5o%253D&Expires=1611726576)\n\n输入用户名、 密码、邮箱  ，出现登录再某某地址表示登录成功\n![](https://imgkr2.cn-bj.ufileos.com/555471a5-5506-4415-a5e3-ea359d4f4823.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=C6IXiwMnd44tuRs94jON93WxpU4%253D&Expires=1611726595)\n8、进入需要组件库项目中，输入以下命令 上传组件库到私有服务器中\n```\n npm publish --registry http://192.168.6.98:4873\n```\n\n![](https://imgkr2.cn-bj.ufileos.com/c517471c-e14b-4419-a333-66292b23e442.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=lDOe1kbLBpTSEkZywEOYWzPoJCc%253D&Expires=1611726954)\n\n![](https://static01.imgkr.com/temp/69b55129fb9c4bc3beb80a81807bc4d5.png)\n上传成功后 ，进入刚才启动的cerdaccio服务，刷新页面。看到以下组件库名称，表示上传成功。\n\n![](https://static01.imgkr.com/temp/5d263d0dbf1b41fca110e3e9dce1787c.png)\n这样私有组件库就算搭建成功了。\n\n### 二、私有服务器的组件下载使用\n\n1、首先根据上面的nrm use 命令 切换npm 为私有组件库源镜像。\n\n2、 创建一个vue 项目\n```\n   使用 npm install -s test_ui  \n```\n![](https://static01.imgkr.com/temp/2e35d790c65b452e9f58dbdc2af1dadc.png)\n> 注意：此处的 test_ui 为上面上传到私有组件库服务的组件库名称\n\n3、在main.js里面导入使用组件库\n\n![](https://imgkr2.cn-bj.ufileos.com/2c81eaa1-9604-470a-b0c7-ec630e033fac.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=DmyNjO7zkbz0gZUen4mOxWx%252BVsQ%253D&Expires=1611727080)\n\n4、成功后 在组件中引用message组件\n\n![](https://static01.imgkr.com/temp/cbcf0191f01e4ba088c3ea0cafe28f68.png)\n\n5、npm run start 启动项目，出现以下字样表示引用成功。\n\n![](https://static01.imgkr.com/temp/2558b4a84ba146eebfe82a5d87202dee.png)\n\n这样组件库使用成功咯，是不是非常的简单~~\n\n>本文适用于部分中小型公司搭建自己前端的生态体系的私有服务器，可以自己搭建，也可以直接去npm上购买私服，此方法只是其中一种，还有很多方式可以搭建私有npm组件库，仅供大家参考，有疑问随时与我联系，大家一起学习一起成长。\n","slug":"npm/npm私有服务器搭建","published":1,"updated":"2021-04-07T08:52:11.775Z","_id":"ckn77mqp0000gxwnjn5wbe2kt","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"一、搭建npm私有服务器\"><a href=\"#一、搭建npm私有服务器\" class=\"headerlink\" title=\"一、搭建npm私有服务器\"></a>一、搭建npm私有服务器</h3><p>1、首先安装 Node,然后输入以下命令，安装 verdaccio，</p>\n<pre><code>    npm install -g verdaccio</code></pre><p>2、如果在安装过程中报 grywarn 的权限错的话，那么需要加上 –unsafe-perm, 如下命令</p>\n<pre><code>    npm install -g verdaccio --unsafe-perm</code></pre><p>3、在命令行中输入 verdaccio 命令回车, 如下图:</p>\n<ul>\n<li><p>(1)、config file 表示配置文件所在的位置</p>\n<p><img src=\"https://static01.imgkr.com/temp/a1fe5b2609de42f6a203a91992289b64.png\" alt></p>\n</li>\n<li><blockquote>\n<p>http address 表示运行的地址</p>\n</blockquote>\n</li>\n</ul>\n<p>4、打开上图显示的 <a href=\"http://localhost:4873\" target=\"_blank\" rel=\"noopener\">http://localhost:4873</a> 地址，显示以下页面表示安装成功</p>\n<p><img src=\"https://imgkr2.cn-bj.ufileos.com/18ad683c-83b1-42e9-860a-f61661053a6e.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=UrTxP2i%252BIh6mAf7uukjBocu5ATM%253D&Expires=1611726293\" alt></p>\n<p>5、找到以上第三步显示的配置文件地址，修改配置文件，末尾新增 listen: 0.0.0.0:4873 ，通过访问本机 ip 地址访问。</p>\n<blockquote>\n<p>如下是新增的，默认是没有的，只能在本机访问，添加完成后就可以在外网访问了~<br>      listen: 0.0.0.0:4873</p>\n</blockquote>\n<p>6、下载 nrm 管理 npm 镜像地址。</p>\n<ul>\n<li>(1)、安装命令：npm install -g nrm<br>想要了解更多有关的 nrm 命令，可以使用 nrm –help, 会列出所有的命令行的</li>\n<li>(2)、添加私有镜像，设置别名（此处地址为我本地搭建地址，此处可以修改为自己的服务器地址）</li>\n</ul>\n<blockquote>\n<p>nrm add  verdaccio（此名字可自定义）<a href=\"http://192.168.6.98:4873\" target=\"_blank\" rel=\"noopener\">http://192.168.6.98:4873</a></p>\n</blockquote>\n<ul>\n<li>(3)、nrm 查看全部镜像</li>\n</ul>\n<pre><code>  nrm  ls</code></pre><p><img src=\"https://imgkr2.cn-bj.ufileos.com/f7fb7dd7-3d96-4d4d-bcf4-a3032b570dc7.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=n3s%252BlN42GFr6dGIKdvR%252Bpz0cxA0%253D&Expires=1611726454\" alt><br>此处最后一项是我添加的私有镜像。</p>\n<ul>\n<li>(4)、切换镜像<br>nrm use  镜像名称(verdaccio)<br>如果不想使用私有 npm 上下载包的话，可以使用 nrm use xxx 命令，切换镜像</li>\n</ul>\n<p>7、npm 发布包<br>要在私有 npm 仓库中发布包首先需要注册或者登陆账号。如果我们还没有账号的话，通过输入命令 npm adduser，然后依次输入用户名，密码即可创建完毕，如果已有账号，通过 npm login，依次输入用户名密码即可登陆。然后进入我们需要上传的代码目录，执行发布命令即可</p>\n<blockquote>\n<p>如果出现以下错误日志可以先忽略<br><img src=\"https://imgkr2.cn-bj.ufileos.com/1e8be315-df95-4207-bd38-1185955cf993.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=cbfzcQNQnwY7pWwqAyY%252FUVMND5o%253D&Expires=1611726576\" alt></p>\n</blockquote>\n<p>输入用户名、 密码、邮箱  ，出现登录再某某地址表示登录成功<br><img src=\"https://imgkr2.cn-bj.ufileos.com/555471a5-5506-4415-a5e3-ea359d4f4823.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=C6IXiwMnd44tuRs94jON93WxpU4%253D&Expires=1611726595\" alt><br>8、进入需要组件库项目中，输入以下命令 上传组件库到私有服务器中</p>\n<pre><code> npm publish --registry http://192.168.6.98:4873</code></pre><p><img src=\"https://imgkr2.cn-bj.ufileos.com/c517471c-e14b-4419-a333-66292b23e442.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=lDOe1kbLBpTSEkZywEOYWzPoJCc%253D&Expires=1611726954\" alt></p>\n<p><img src=\"https://static01.imgkr.com/temp/69b55129fb9c4bc3beb80a81807bc4d5.png\" alt><br>上传成功后 ，进入刚才启动的cerdaccio服务，刷新页面。看到以下组件库名称，表示上传成功。</p>\n<p><img src=\"https://static01.imgkr.com/temp/5d263d0dbf1b41fca110e3e9dce1787c.png\" alt><br>这样私有组件库就算搭建成功了。</p>\n<h3 id=\"二、私有服务器的组件下载使用\"><a href=\"#二、私有服务器的组件下载使用\" class=\"headerlink\" title=\"二、私有服务器的组件下载使用\"></a>二、私有服务器的组件下载使用</h3><p>1、首先根据上面的nrm use 命令 切换npm 为私有组件库源镜像。</p>\n<p>2、 创建一个vue 项目</p>\n<pre><code>   使用 npm install -s test_ui  </code></pre><p><img src=\"https://static01.imgkr.com/temp/2e35d790c65b452e9f58dbdc2af1dadc.png\" alt></p>\n<blockquote>\n<p>注意：此处的 test_ui 为上面上传到私有组件库服务的组件库名称</p>\n</blockquote>\n<p>3、在main.js里面导入使用组件库</p>\n<p><img src=\"https://imgkr2.cn-bj.ufileos.com/2c81eaa1-9604-470a-b0c7-ec630e033fac.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=DmyNjO7zkbz0gZUen4mOxWx%252BVsQ%253D&Expires=1611727080\" alt></p>\n<p>4、成功后 在组件中引用message组件</p>\n<p><img src=\"https://static01.imgkr.com/temp/cbcf0191f01e4ba088c3ea0cafe28f68.png\" alt></p>\n<p>5、npm run start 启动项目，出现以下字样表示引用成功。</p>\n<p><img src=\"https://static01.imgkr.com/temp/2558b4a84ba146eebfe82a5d87202dee.png\" alt></p>\n<p>这样组件库使用成功咯，是不是非常的简单~~</p>\n<blockquote>\n<p>本文适用于部分中小型公司搭建自己前端的生态体系的私有服务器，可以自己搭建，也可以直接去npm上购买私服，此方法只是其中一种，还有很多方式可以搭建私有npm组件库，仅供大家参考，有疑问随时与我联系，大家一起学习一起成长。</p>\n</blockquote>\n","site":{"data":{"musics":[{"name":"Stay","artist":"Tonya Mitchell","url":"/medias/music/Tonya Mitchell-Stay.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"},{"name":"火山翻译","url":"https://translate.volcengine.cn","title":"访问主页","introduction":"提供全球领先的翻译技术与服务","avatar":"/medias/avatars/bytedtrans.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"李佳倩的博客","url":"https://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.com/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://www.cnblogs.com/cww97/","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"https://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"https://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"lucifer的博客","url":"https://lucifer.ren/blog/","title":"访问主页","introduction":"一个脑洞很大的程序员。","avatar":"https://tva1.sinaimg.cn/large/006tNbRwly1ga7ognflh9j30b40b4q3w.jpg"},{"name":"钱栋伟","url":"https://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"CJ Blog","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"},{"name":"Tawn","url":"https://tawn0000.github.io/","title":"访问主页","introduction":"JNU ACMer","avatar":"/medias/avatars/tawn.jpg"},{"name":"Master X","url":"https://masterx.top/","title":"访问主页","introduction":"ECNU&ML&DL","avatar":"/medias/avatars/masterx.jpg"},{"name":"分享客","url":"https://sharerdiary.com/","title":"访问主页","introduction":"爱生活，爱分享！","avatar":"/medias/avatars/yezijie.png"},{"name":"taotao","url":"https://zouzhitao.github.io","title":"访问主页","introduction":"taotao 码字的地方","avatar":"/medias/avatars/taotao.jpg"},{"name":"Xiejiadong","url":"https://xiejiadong.com","title":"访问主页","introduction":"Xiejiadong's blog","avatar":"/medias/avatars/xiejiadong.jpg"},{"name":"飞吧","url":"https://fei.bar","title":"访问主页","introduction":"啓飞的个人博客","avatar":"/medias/avatars/feibar.png"},{"name":"ajin","url":"https://ajin.cloud","title":"访问主页","introduction":"Always be enthusiastic","avatar":"/medias/avatars/ajin.jpg"},{"name":"Hiyoung","url":"https://hiyoungai.com/","title":"访问主页","introduction":"宠辱不惊，看庭前花开花落；去留无意，望天空云卷云舒。","avatar":"https://cdn.jsdelivr.net/gh/hiyoung123/cdn/img/avatar.jpg"},{"name":"无言的博客","url":"https://www.yzplove.top","title":"访问主页","introduction":"代码真是越敲越香","avatar":"https://cdn.jsdelivr.net/gh/yzp-99/yzp-99.github.io/medias/avatars/me.jpg"},{"name":"Naixin Zhang","url":"https://naixinzhang.github.io/","title":"访问主页","introduction":"Econ Master | Data Analyst/scientist Candidate","avatar":"https://naixinzhang.github.io/medias/avatars/avatar.jpg"}]}},"excerpt":"","more":"<h3 id=\"一、搭建npm私有服务器\"><a href=\"#一、搭建npm私有服务器\" class=\"headerlink\" title=\"一、搭建npm私有服务器\"></a>一、搭建npm私有服务器</h3><p>1、首先安装 Node,然后输入以下命令，安装 verdaccio，</p>\n<pre><code>    npm install -g verdaccio</code></pre><p>2、如果在安装过程中报 grywarn 的权限错的话，那么需要加上 –unsafe-perm, 如下命令</p>\n<pre><code>    npm install -g verdaccio --unsafe-perm</code></pre><p>3、在命令行中输入 verdaccio 命令回车, 如下图:</p>\n<ul>\n<li><p>(1)、config file 表示配置文件所在的位置</p>\n<p><img src=\"https://static01.imgkr.com/temp/a1fe5b2609de42f6a203a91992289b64.png\" alt></p>\n</li>\n<li><blockquote>\n<p>http address 表示运行的地址</p>\n</blockquote>\n</li>\n</ul>\n<p>4、打开上图显示的 <a href=\"http://localhost:4873\" target=\"_blank\" rel=\"noopener\">http://localhost:4873</a> 地址，显示以下页面表示安装成功</p>\n<p><img src=\"https://imgkr2.cn-bj.ufileos.com/18ad683c-83b1-42e9-860a-f61661053a6e.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=UrTxP2i%252BIh6mAf7uukjBocu5ATM%253D&Expires=1611726293\" alt></p>\n<p>5、找到以上第三步显示的配置文件地址，修改配置文件，末尾新增 listen: 0.0.0.0:4873 ，通过访问本机 ip 地址访问。</p>\n<blockquote>\n<p>如下是新增的，默认是没有的，只能在本机访问，添加完成后就可以在外网访问了~<br>      listen: 0.0.0.0:4873</p>\n</blockquote>\n<p>6、下载 nrm 管理 npm 镜像地址。</p>\n<ul>\n<li>(1)、安装命令：npm install -g nrm<br>想要了解更多有关的 nrm 命令，可以使用 nrm –help, 会列出所有的命令行的</li>\n<li>(2)、添加私有镜像，设置别名（此处地址为我本地搭建地址，此处可以修改为自己的服务器地址）</li>\n</ul>\n<blockquote>\n<p>nrm add  verdaccio（此名字可自定义）<a href=\"http://192.168.6.98:4873\" target=\"_blank\" rel=\"noopener\">http://192.168.6.98:4873</a></p>\n</blockquote>\n<ul>\n<li>(3)、nrm 查看全部镜像</li>\n</ul>\n<pre><code>  nrm  ls</code></pre><p><img src=\"https://imgkr2.cn-bj.ufileos.com/f7fb7dd7-3d96-4d4d-bcf4-a3032b570dc7.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=n3s%252BlN42GFr6dGIKdvR%252Bpz0cxA0%253D&Expires=1611726454\" alt><br>此处最后一项是我添加的私有镜像。</p>\n<ul>\n<li>(4)、切换镜像<br>nrm use  镜像名称(verdaccio)<br>如果不想使用私有 npm 上下载包的话，可以使用 nrm use xxx 命令，切换镜像</li>\n</ul>\n<p>7、npm 发布包<br>要在私有 npm 仓库中发布包首先需要注册或者登陆账号。如果我们还没有账号的话，通过输入命令 npm adduser，然后依次输入用户名，密码即可创建完毕，如果已有账号，通过 npm login，依次输入用户名密码即可登陆。然后进入我们需要上传的代码目录，执行发布命令即可</p>\n<blockquote>\n<p>如果出现以下错误日志可以先忽略<br><img src=\"https://imgkr2.cn-bj.ufileos.com/1e8be315-df95-4207-bd38-1185955cf993.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=cbfzcQNQnwY7pWwqAyY%252FUVMND5o%253D&Expires=1611726576\" alt></p>\n</blockquote>\n<p>输入用户名、 密码、邮箱  ，出现登录再某某地址表示登录成功<br><img src=\"https://imgkr2.cn-bj.ufileos.com/555471a5-5506-4415-a5e3-ea359d4f4823.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=C6IXiwMnd44tuRs94jON93WxpU4%253D&Expires=1611726595\" alt><br>8、进入需要组件库项目中，输入以下命令 上传组件库到私有服务器中</p>\n<pre><code> npm publish --registry http://192.168.6.98:4873</code></pre><p><img src=\"https://imgkr2.cn-bj.ufileos.com/c517471c-e14b-4419-a333-66292b23e442.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=lDOe1kbLBpTSEkZywEOYWzPoJCc%253D&Expires=1611726954\" alt></p>\n<p><img src=\"https://static01.imgkr.com/temp/69b55129fb9c4bc3beb80a81807bc4d5.png\" alt><br>上传成功后 ，进入刚才启动的cerdaccio服务，刷新页面。看到以下组件库名称，表示上传成功。</p>\n<p><img src=\"https://static01.imgkr.com/temp/5d263d0dbf1b41fca110e3e9dce1787c.png\" alt><br>这样私有组件库就算搭建成功了。</p>\n<h3 id=\"二、私有服务器的组件下载使用\"><a href=\"#二、私有服务器的组件下载使用\" class=\"headerlink\" title=\"二、私有服务器的组件下载使用\"></a>二、私有服务器的组件下载使用</h3><p>1、首先根据上面的nrm use 命令 切换npm 为私有组件库源镜像。</p>\n<p>2、 创建一个vue 项目</p>\n<pre><code>   使用 npm install -s test_ui  </code></pre><p><img src=\"https://static01.imgkr.com/temp/2e35d790c65b452e9f58dbdc2af1dadc.png\" alt></p>\n<blockquote>\n<p>注意：此处的 test_ui 为上面上传到私有组件库服务的组件库名称</p>\n</blockquote>\n<p>3、在main.js里面导入使用组件库</p>\n<p><img src=\"https://imgkr2.cn-bj.ufileos.com/2c81eaa1-9604-470a-b0c7-ec630e033fac.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=DmyNjO7zkbz0gZUen4mOxWx%252BVsQ%253D&Expires=1611727080\" alt></p>\n<p>4、成功后 在组件中引用message组件</p>\n<p><img src=\"https://static01.imgkr.com/temp/cbcf0191f01e4ba088c3ea0cafe28f68.png\" alt></p>\n<p>5、npm run start 启动项目，出现以下字样表示引用成功。</p>\n<p><img src=\"https://static01.imgkr.com/temp/2558b4a84ba146eebfe82a5d87202dee.png\" alt></p>\n<p>这样组件库使用成功咯，是不是非常的简单~~</p>\n<blockquote>\n<p>本文适用于部分中小型公司搭建自己前端的生态体系的私有服务器，可以自己搭建，也可以直接去npm上购买私服，此方法只是其中一种，还有很多方式可以搭建私有npm组件库，仅供大家参考，有疑问随时与我联系，大家一起学习一起成长。</p>\n</blockquote>\n"},{"title":"JavaScript揭秘之原型和原型链","top":true,"cover":false,"toc":true,"mathjax":true,"date":"2021-01-27T07:27:31.000Z","password":false,"summary":false,"_content":"\n## 前言\n作为一名前端从业者，如果理不清JavaScript原型和原型链都显得不够专业，毕竟这是原生JavaScript的重难点和面试必考点，那么到底原型和原型链到底是什么呢？下面我们一起来谈谈吧。\n\n> 开始之前我们先思考一下什么是原型链？究竟有什么特别之处呢？下面我分别为大家揭开它神秘的面纱\n\n## 原型和原型链\n\n首先我们看一段代码\n\n```\n function Animal(){}\n \n let dog = new Animal();\n dog.name = 'black'\n console.log(dog.name) // 'black'\n \n```\n\n在这个代码中，我们创建了一个Animal的构造函数，然后通过构造函数new出来一个dog实例，那么此时的dog就是Animal的实例对象。\n\n\n> 下面我们引入一个新的朋友：**prototype**\n\n\nprototype是每一个函数都有的属性，它的作用是指向自己的原型，比如：\n\n>上面的Animal构造函数，它有一个 prototype 属性，这个属性就是指向的它原型对象。\n所以 Animial的原型就是 Animial.prototype\n\n\n我们可以用一张图表示构造函数和实例原型之间的关系：\n\n\n![](https://imgkr2.cn-bj.ufileos.com/e1fc6917-1168-430b-baa2-44b9db91284e.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=%252FgT7YQeTGMlzlTGrl15uDZrpWiQ%253D&Expires=1614339842)\n\n\n既然Animial构造函数的原型 是 Animial.prototype，那它的实例dog的原型又是谁呢？\n\n> 同样是： Animial.prototype, 可能你会好奇，暂时卖个关子，我们继续向下看，后面会一一给大家阐述为什么\n\n我们看下一段代码\n\n```\nfunction Person(){}\n// 此处我们用prototype属性在Person原型上创建一个属性name，值为Anny\nPerson.prototype.name = 'Anny'\n\n// 然后我们实例化一个person\n\nlet person = new Person()\n\nconsole.log(person.name) // 'Anny'\n\n// 此时可以看出，我们并未在实例上定义name这个属性，为啥访问persone.name可以打印出原型的name属性值呢？\n\n我们测试一下：\n\n// 我们给person这个实例定义一个name属性，值为Sam\nperson.name = 'Sam'; \n\nconsole.log(person.name) // 'Sam' 此时我们打印的值为Sam\n\n// 我们在删除person.name属性\ndelete person.name\n\nconsole.log(person.name) // 'Anny' 此时值又成了 Anny了\n\n通过上面的例子 我们发现，当实例中没有一个属性的时候，它就会从构造函数的 Person.prototype 原型中去寻找这个属性，然后将其的信息展示出来。\n\n```\n\n>从上面的例子看出，实例和构造函数拥有同一个原型 他们都是 Person.prototype\n\n\n那么什么是**原型**呢？你可以这样理解：每一个JavaScript对象(null除外)在创建的时候就会与之关联另一个对象，这个对象就是我们所说的原型，每一个对象都会从原型\"继承\"属性\n\n\n> 下面我们引入另一个新的朋友：**__ proto __**\n\n\n这是每一个JavaScript对象(除了 null )都具有的一个属性，叫__proto__，这个属性会指向该对象的原型。\n\n那么有了 **__ proto __** ，我们就知道我们实例的原型了,我们看下一段代码\n\n```\n  function Person(){}\n  let person = new Person()\n  \n  // 我们通过 __proto__来指向person和Person的原型是不是同一个\n  \n  console.log(person.__proto__ == Person.prototype) // true\n  \n  // 由此可以看出，上面的说法是对的，person和Person的原型指向同一个，Person.prototype\n```\n\n得到以下关系图：\n\n![](https://static01.imgkr.com/temp/58d7a4c1195a49aba1a306828e7acd8e.png)\n\n既然实例对象和构造函数都可以指向原型，那么原型是否有属性指向构造函数或者实例呢？\n\n> 指向实例倒是没有，因为一个构造函数可以生成多个实例，但是原型指向构造函数倒是有的，这就要讲到另一个属性：constructor，每个原型都有一个 constructor 属性指向关联的构造函数。\n\n```\nfunction Person(){}\n\nconsole.log(Person === Person.prototype.constructor) // true\n\n// Person.prototype 代表原型，Person.prototype.constructor代表原型的构造函数，所以上面的值为true\n```\n\n所以我们得到以下关系图\n\n![](https://static01.imgkr.com/temp/591bf50b291946378d3f584d414cd479.png)\n\n上面我们说到，实例读取实例的属性时，如果找不到，就会查找与对象关联的原型中的属性，那如果原型上也没有呢？那它会一直找，找原型的原型，一直找到最顶层为止。\n\n### 原型的原型\n\n在前面，我们已经说了，原型也是一个对象，既然是对象，那我们的原型的原型是不是Object的原型呢?下面我们看以下代码:\n\n```\n// 我们在Object的原型上定义一个name叫'Kangknag'\nObject.prototype.name = 'kangkang'\n\n// 定义一个Person构造函数\nfunction Person(){}\n\n// 在Person的原型上定义一个属性name 为 'Sam'\nPerson.prototype.name = 'Sam';\n\n// 此时我们创建一个实例\nlet person = new Person() \n\n// 此处大家都知道，如果实例上没有name属性，回去它的原型上找，所以此处打印的是Sam\nconsole.log(person.name) // 'Sam'\n \n // 此时我们删除Person上的属性name\n \n delete Person.prototype.name\n \n console.log(person.name) // 'KangKang'\n \n // 此时我们发现，当删除了构造函数Person的属性name后，我们在打印实例的值变成了'KangKang'，上面说道，实例的属性如果没有就会去原型上面找，如果原型上找不到就会去原型的原型上面去找，那此处的Person的原型就是Object.prototype，我们可以验证一下\n \n console.log(person.__proto__.__proto__ == Object.prototype) // true\n // 可以看出 person原型的原型就是Object.prototype\n \n \n```\n\n所以我们得到以下关系图\n\n![](https://imgkr2.cn-bj.ufileos.com/f5fa8f4a-cfba-4f0d-8412-11a5bf599d59.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=sQU4vaF%252BOc%252FPR71zDyIvQqtjDmA%253D&Expires=1614391361)\n\nperson原型的原型就是Object.prototype，那么我们的Object.prototype的原型又是什么呢？\n我们可以打印看一下：\n\n```\n console.log(Object.prototype.__proto__) // null\n```\n\n那么null究竟代表了什么呢？，此处引用阮一峰老师的[《undefined与null的区别》](http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html)一文的说法：\n![](https://static01.imgkr.com/temp/ea444fa2889145b490ca92cd35f080c9.png)\n\n> null 表示\"没有对象\", 即该处不应该有值。\n\n所以Object.prototype.__proto __ 的值为null跟Object.prototype没有原型其实表达了一个意思。null就是原型链的终点，所以一般查找到Object.prototype就可以停止查找了\n\n此时我们可以得到一个关系\n\n> person.__proto __ . __proto __ . __proto __ =  null;\n\n那么什么我们就可以得出结论：\n\n> 原型链：原型链就是从实例通过__proto __逐层向上链接原型形成的链条，叫做原型链。\n\n所以我们可以得到以下关系图\n![](https://static01.imgkr.com/temp/55c06ded7cf7404c8d096757779a0d64.png)\n\n以上图中蓝色的箭头就是原型链。\n\n> 大家都知道，其实原型链是JavaScript继承的核心，但是JavaScript 默认并不会复制对象的属性，相反，JavaScript 只是在两个对象之间创建一个关联，这样，一个对象就可以通过委托访问另一个对象的属性和函数，所以与其叫继承，委托的说法反而更准确些。\n\n\n> 此处需要注意两个点：\n\n- 当获取 person.constructor 时，其实 person 中并没有 constructor 属性,当不能读取到constructor 属性时，会从 person 的原型也就是 Person.prototype 中读取，正好原型中有该属性。\n\n```\nperson.constructor === Person.prototype.constructor // true\n```\n\n- 其次是 __proto__ ，绝大部分浏览器都支持这个非标准的方法访问原型，然而它并不存在于 Person.prototype 中，实际上，它是来自于 Object.prototype ，与其说是一个属性，不如说是一个 getter/setter，当使用 obj.__proto__ 时，可以理解成返回了 Object.getPrototypeOf(obj)\n\n\n\n> 那么 new 一个构造函数到底是做了什么操作呢？\n\nnew操作符新建了一个空对象，这个对象原型指向构造函数的prototype，执行构造函数后返回这个对象\n- 创建一个空的对象\n- 链接到原型\n- 绑定this指向，执行构造函数\n- 确保返回的是对象\n\n### 文章最后\n\n通过以上的知识梳理，是不是对原型和原型链有了更深的理解呢？是不是发现所谓的模棱两可的知识理解起来也不是那么难？对的，其实就是这样，只要知道它们的关系，发现原型链也不过如此。此文带有个人见解，如有错误还请大家指出，我及时更正。大家一起努力，加油。\n\n> 我的博客：https://moonshinean.github.io/\n\n文章借鉴：   \nhttps://github.com/mqyqingfeng/Blog/issues/2   \nhttp://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html\n","source":"_posts/javascript/JavaScript揭秘之原型和原型链.md","raw":"---\ntitle: JavaScript揭秘之原型和原型链\ntop: true\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-01-27 15:27:31\npassword: false\nsummary: false\ntags:\n    - 原型\n    - javascript\n    - prototyoe\ncategories:\n    - JavaScript\n---\n\n## 前言\n作为一名前端从业者，如果理不清JavaScript原型和原型链都显得不够专业，毕竟这是原生JavaScript的重难点和面试必考点，那么到底原型和原型链到底是什么呢？下面我们一起来谈谈吧。\n\n> 开始之前我们先思考一下什么是原型链？究竟有什么特别之处呢？下面我分别为大家揭开它神秘的面纱\n\n## 原型和原型链\n\n首先我们看一段代码\n\n```\n function Animal(){}\n \n let dog = new Animal();\n dog.name = 'black'\n console.log(dog.name) // 'black'\n \n```\n\n在这个代码中，我们创建了一个Animal的构造函数，然后通过构造函数new出来一个dog实例，那么此时的dog就是Animal的实例对象。\n\n\n> 下面我们引入一个新的朋友：**prototype**\n\n\nprototype是每一个函数都有的属性，它的作用是指向自己的原型，比如：\n\n>上面的Animal构造函数，它有一个 prototype 属性，这个属性就是指向的它原型对象。\n所以 Animial的原型就是 Animial.prototype\n\n\n我们可以用一张图表示构造函数和实例原型之间的关系：\n\n\n![](https://imgkr2.cn-bj.ufileos.com/e1fc6917-1168-430b-baa2-44b9db91284e.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=%252FgT7YQeTGMlzlTGrl15uDZrpWiQ%253D&Expires=1614339842)\n\n\n既然Animial构造函数的原型 是 Animial.prototype，那它的实例dog的原型又是谁呢？\n\n> 同样是： Animial.prototype, 可能你会好奇，暂时卖个关子，我们继续向下看，后面会一一给大家阐述为什么\n\n我们看下一段代码\n\n```\nfunction Person(){}\n// 此处我们用prototype属性在Person原型上创建一个属性name，值为Anny\nPerson.prototype.name = 'Anny'\n\n// 然后我们实例化一个person\n\nlet person = new Person()\n\nconsole.log(person.name) // 'Anny'\n\n// 此时可以看出，我们并未在实例上定义name这个属性，为啥访问persone.name可以打印出原型的name属性值呢？\n\n我们测试一下：\n\n// 我们给person这个实例定义一个name属性，值为Sam\nperson.name = 'Sam'; \n\nconsole.log(person.name) // 'Sam' 此时我们打印的值为Sam\n\n// 我们在删除person.name属性\ndelete person.name\n\nconsole.log(person.name) // 'Anny' 此时值又成了 Anny了\n\n通过上面的例子 我们发现，当实例中没有一个属性的时候，它就会从构造函数的 Person.prototype 原型中去寻找这个属性，然后将其的信息展示出来。\n\n```\n\n>从上面的例子看出，实例和构造函数拥有同一个原型 他们都是 Person.prototype\n\n\n那么什么是**原型**呢？你可以这样理解：每一个JavaScript对象(null除外)在创建的时候就会与之关联另一个对象，这个对象就是我们所说的原型，每一个对象都会从原型\"继承\"属性\n\n\n> 下面我们引入另一个新的朋友：**__ proto __**\n\n\n这是每一个JavaScript对象(除了 null )都具有的一个属性，叫__proto__，这个属性会指向该对象的原型。\n\n那么有了 **__ proto __** ，我们就知道我们实例的原型了,我们看下一段代码\n\n```\n  function Person(){}\n  let person = new Person()\n  \n  // 我们通过 __proto__来指向person和Person的原型是不是同一个\n  \n  console.log(person.__proto__ == Person.prototype) // true\n  \n  // 由此可以看出，上面的说法是对的，person和Person的原型指向同一个，Person.prototype\n```\n\n得到以下关系图：\n\n![](https://static01.imgkr.com/temp/58d7a4c1195a49aba1a306828e7acd8e.png)\n\n既然实例对象和构造函数都可以指向原型，那么原型是否有属性指向构造函数或者实例呢？\n\n> 指向实例倒是没有，因为一个构造函数可以生成多个实例，但是原型指向构造函数倒是有的，这就要讲到另一个属性：constructor，每个原型都有一个 constructor 属性指向关联的构造函数。\n\n```\nfunction Person(){}\n\nconsole.log(Person === Person.prototype.constructor) // true\n\n// Person.prototype 代表原型，Person.prototype.constructor代表原型的构造函数，所以上面的值为true\n```\n\n所以我们得到以下关系图\n\n![](https://static01.imgkr.com/temp/591bf50b291946378d3f584d414cd479.png)\n\n上面我们说到，实例读取实例的属性时，如果找不到，就会查找与对象关联的原型中的属性，那如果原型上也没有呢？那它会一直找，找原型的原型，一直找到最顶层为止。\n\n### 原型的原型\n\n在前面，我们已经说了，原型也是一个对象，既然是对象，那我们的原型的原型是不是Object的原型呢?下面我们看以下代码:\n\n```\n// 我们在Object的原型上定义一个name叫'Kangknag'\nObject.prototype.name = 'kangkang'\n\n// 定义一个Person构造函数\nfunction Person(){}\n\n// 在Person的原型上定义一个属性name 为 'Sam'\nPerson.prototype.name = 'Sam';\n\n// 此时我们创建一个实例\nlet person = new Person() \n\n// 此处大家都知道，如果实例上没有name属性，回去它的原型上找，所以此处打印的是Sam\nconsole.log(person.name) // 'Sam'\n \n // 此时我们删除Person上的属性name\n \n delete Person.prototype.name\n \n console.log(person.name) // 'KangKang'\n \n // 此时我们发现，当删除了构造函数Person的属性name后，我们在打印实例的值变成了'KangKang'，上面说道，实例的属性如果没有就会去原型上面找，如果原型上找不到就会去原型的原型上面去找，那此处的Person的原型就是Object.prototype，我们可以验证一下\n \n console.log(person.__proto__.__proto__ == Object.prototype) // true\n // 可以看出 person原型的原型就是Object.prototype\n \n \n```\n\n所以我们得到以下关系图\n\n![](https://imgkr2.cn-bj.ufileos.com/f5fa8f4a-cfba-4f0d-8412-11a5bf599d59.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=sQU4vaF%252BOc%252FPR71zDyIvQqtjDmA%253D&Expires=1614391361)\n\nperson原型的原型就是Object.prototype，那么我们的Object.prototype的原型又是什么呢？\n我们可以打印看一下：\n\n```\n console.log(Object.prototype.__proto__) // null\n```\n\n那么null究竟代表了什么呢？，此处引用阮一峰老师的[《undefined与null的区别》](http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html)一文的说法：\n![](https://static01.imgkr.com/temp/ea444fa2889145b490ca92cd35f080c9.png)\n\n> null 表示\"没有对象\", 即该处不应该有值。\n\n所以Object.prototype.__proto __ 的值为null跟Object.prototype没有原型其实表达了一个意思。null就是原型链的终点，所以一般查找到Object.prototype就可以停止查找了\n\n此时我们可以得到一个关系\n\n> person.__proto __ . __proto __ . __proto __ =  null;\n\n那么什么我们就可以得出结论：\n\n> 原型链：原型链就是从实例通过__proto __逐层向上链接原型形成的链条，叫做原型链。\n\n所以我们可以得到以下关系图\n![](https://static01.imgkr.com/temp/55c06ded7cf7404c8d096757779a0d64.png)\n\n以上图中蓝色的箭头就是原型链。\n\n> 大家都知道，其实原型链是JavaScript继承的核心，但是JavaScript 默认并不会复制对象的属性，相反，JavaScript 只是在两个对象之间创建一个关联，这样，一个对象就可以通过委托访问另一个对象的属性和函数，所以与其叫继承，委托的说法反而更准确些。\n\n\n> 此处需要注意两个点：\n\n- 当获取 person.constructor 时，其实 person 中并没有 constructor 属性,当不能读取到constructor 属性时，会从 person 的原型也就是 Person.prototype 中读取，正好原型中有该属性。\n\n```\nperson.constructor === Person.prototype.constructor // true\n```\n\n- 其次是 __proto__ ，绝大部分浏览器都支持这个非标准的方法访问原型，然而它并不存在于 Person.prototype 中，实际上，它是来自于 Object.prototype ，与其说是一个属性，不如说是一个 getter/setter，当使用 obj.__proto__ 时，可以理解成返回了 Object.getPrototypeOf(obj)\n\n\n\n> 那么 new 一个构造函数到底是做了什么操作呢？\n\nnew操作符新建了一个空对象，这个对象原型指向构造函数的prototype，执行构造函数后返回这个对象\n- 创建一个空的对象\n- 链接到原型\n- 绑定this指向，执行构造函数\n- 确保返回的是对象\n\n### 文章最后\n\n通过以上的知识梳理，是不是对原型和原型链有了更深的理解呢？是不是发现所谓的模棱两可的知识理解起来也不是那么难？对的，其实就是这样，只要知道它们的关系，发现原型链也不过如此。此文带有个人见解，如有错误还请大家指出，我及时更正。大家一起努力，加油。\n\n> 我的博客：https://moonshinean.github.io/\n\n文章借鉴：   \nhttps://github.com/mqyqingfeng/Blog/issues/2   \nhttp://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html\n","slug":"javascript/JavaScript揭秘之原型和原型链","published":1,"updated":"2021-04-07T08:56:18.276Z","_id":"ckn77nlpe000kxwnj4kxfs7r9","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>作为一名前端从业者，如果理不清JavaScript原型和原型链都显得不够专业，毕竟这是原生JavaScript的重难点和面试必考点，那么到底原型和原型链到底是什么呢？下面我们一起来谈谈吧。</p>\n<blockquote>\n<p>开始之前我们先思考一下什么是原型链？究竟有什么特别之处呢？下面我分别为大家揭开它神秘的面纱</p>\n</blockquote>\n<h2 id=\"原型和原型链\"><a href=\"#原型和原型链\" class=\"headerlink\" title=\"原型和原型链\"></a>原型和原型链</h2><p>首先我们看一段代码</p>\n<pre><code> function Animal(){}\n\n let dog = new Animal();\n dog.name = &#39;black&#39;\n console.log(dog.name) // &#39;black&#39;\n</code></pre><p>在这个代码中，我们创建了一个Animal的构造函数，然后通过构造函数new出来一个dog实例，那么此时的dog就是Animal的实例对象。</p>\n<blockquote>\n<p>下面我们引入一个新的朋友：<strong>prototype</strong></p>\n</blockquote>\n<p>prototype是每一个函数都有的属性，它的作用是指向自己的原型，比如：</p>\n<blockquote>\n<p>上面的Animal构造函数，它有一个 prototype 属性，这个属性就是指向的它原型对象。<br>所以 Animial的原型就是 Animial.prototype</p>\n</blockquote>\n<p>我们可以用一张图表示构造函数和实例原型之间的关系：</p>\n<p><img src=\"https://imgkr2.cn-bj.ufileos.com/e1fc6917-1168-430b-baa2-44b9db91284e.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=%252FgT7YQeTGMlzlTGrl15uDZrpWiQ%253D&Expires=1614339842\" alt></p>\n<p>既然Animial构造函数的原型 是 Animial.prototype，那它的实例dog的原型又是谁呢？</p>\n<blockquote>\n<p>同样是： Animial.prototype, 可能你会好奇，暂时卖个关子，我们继续向下看，后面会一一给大家阐述为什么</p>\n</blockquote>\n<p>我们看下一段代码</p>\n<pre><code>function Person(){}\n// 此处我们用prototype属性在Person原型上创建一个属性name，值为Anny\nPerson.prototype.name = &#39;Anny&#39;\n\n// 然后我们实例化一个person\n\nlet person = new Person()\n\nconsole.log(person.name) // &#39;Anny&#39;\n\n// 此时可以看出，我们并未在实例上定义name这个属性，为啥访问persone.name可以打印出原型的name属性值呢？\n\n我们测试一下：\n\n// 我们给person这个实例定义一个name属性，值为Sam\nperson.name = &#39;Sam&#39;; \n\nconsole.log(person.name) // &#39;Sam&#39; 此时我们打印的值为Sam\n\n// 我们在删除person.name属性\ndelete person.name\n\nconsole.log(person.name) // &#39;Anny&#39; 此时值又成了 Anny了\n\n通过上面的例子 我们发现，当实例中没有一个属性的时候，它就会从构造函数的 Person.prototype 原型中去寻找这个属性，然后将其的信息展示出来。\n</code></pre><blockquote>\n<p>从上面的例子看出，实例和构造函数拥有同一个原型 他们都是 Person.prototype</p>\n</blockquote>\n<p>那么什么是<strong>原型</strong>呢？你可以这样理解：每一个JavaScript对象(null除外)在创建的时候就会与之关联另一个对象，这个对象就是我们所说的原型，每一个对象都会从原型”继承”属性</p>\n<blockquote>\n<p>下面我们引入另一个新的朋友：<strong>__ proto __</strong></p>\n</blockquote>\n<p>这是每一个JavaScript对象(除了 null )都具有的一个属性，叫<strong>proto</strong>，这个属性会指向该对象的原型。</p>\n<p>那么有了 <strong>__ proto __</strong> ，我们就知道我们实例的原型了,我们看下一段代码</p>\n<pre><code>  function Person(){}\n  let person = new Person()\n\n  // 我们通过 __proto__来指向person和Person的原型是不是同一个\n\n  console.log(person.__proto__ == Person.prototype) // true\n\n  // 由此可以看出，上面的说法是对的，person和Person的原型指向同一个，Person.prototype</code></pre><p>得到以下关系图：</p>\n<p><img src=\"https://static01.imgkr.com/temp/58d7a4c1195a49aba1a306828e7acd8e.png\" alt></p>\n<p>既然实例对象和构造函数都可以指向原型，那么原型是否有属性指向构造函数或者实例呢？</p>\n<blockquote>\n<p>指向实例倒是没有，因为一个构造函数可以生成多个实例，但是原型指向构造函数倒是有的，这就要讲到另一个属性：constructor，每个原型都有一个 constructor 属性指向关联的构造函数。</p>\n</blockquote>\n<pre><code>function Person(){}\n\nconsole.log(Person === Person.prototype.constructor) // true\n\n// Person.prototype 代表原型，Person.prototype.constructor代表原型的构造函数，所以上面的值为true</code></pre><p>所以我们得到以下关系图</p>\n<p><img src=\"https://static01.imgkr.com/temp/591bf50b291946378d3f584d414cd479.png\" alt></p>\n<p>上面我们说到，实例读取实例的属性时，如果找不到，就会查找与对象关联的原型中的属性，那如果原型上也没有呢？那它会一直找，找原型的原型，一直找到最顶层为止。</p>\n<h3 id=\"原型的原型\"><a href=\"#原型的原型\" class=\"headerlink\" title=\"原型的原型\"></a>原型的原型</h3><p>在前面，我们已经说了，原型也是一个对象，既然是对象，那我们的原型的原型是不是Object的原型呢?下面我们看以下代码:</p>\n<pre><code>// 我们在Object的原型上定义一个name叫&#39;Kangknag&#39;\nObject.prototype.name = &#39;kangkang&#39;\n\n// 定义一个Person构造函数\nfunction Person(){}\n\n// 在Person的原型上定义一个属性name 为 &#39;Sam&#39;\nPerson.prototype.name = &#39;Sam&#39;;\n\n// 此时我们创建一个实例\nlet person = new Person() \n\n// 此处大家都知道，如果实例上没有name属性，回去它的原型上找，所以此处打印的是Sam\nconsole.log(person.name) // &#39;Sam&#39;\n\n // 此时我们删除Person上的属性name\n\n delete Person.prototype.name\n\n console.log(person.name) // &#39;KangKang&#39;\n\n // 此时我们发现，当删除了构造函数Person的属性name后，我们在打印实例的值变成了&#39;KangKang&#39;，上面说道，实例的属性如果没有就会去原型上面找，如果原型上找不到就会去原型的原型上面去找，那此处的Person的原型就是Object.prototype，我们可以验证一下\n\n console.log(person.__proto__.__proto__ == Object.prototype) // true\n // 可以看出 person原型的原型就是Object.prototype\n\n</code></pre><p>所以我们得到以下关系图</p>\n<p><img src=\"https://imgkr2.cn-bj.ufileos.com/f5fa8f4a-cfba-4f0d-8412-11a5bf599d59.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=sQU4vaF%252BOc%252FPR71zDyIvQqtjDmA%253D&Expires=1614391361\" alt></p>\n<p>person原型的原型就是Object.prototype，那么我们的Object.prototype的原型又是什么呢？<br>我们可以打印看一下：</p>\n<pre><code> console.log(Object.prototype.__proto__) // null</code></pre><p>那么null究竟代表了什么呢？，此处引用阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html\" target=\"_blank\" rel=\"noopener\">《undefined与null的区别》</a>一文的说法：<br><img src=\"https://static01.imgkr.com/temp/ea444fa2889145b490ca92cd35f080c9.png\" alt></p>\n<blockquote>\n<p>null 表示”没有对象”, 即该处不应该有值。</p>\n</blockquote>\n<p>所以Object.prototype.__proto __ 的值为null跟Object.prototype没有原型其实表达了一个意思。null就是原型链的终点，所以一般查找到Object.prototype就可以停止查找了</p>\n<p>此时我们可以得到一个关系</p>\n<blockquote>\n<p>person.__proto __ . __proto __ . __proto __ =  null;</p>\n</blockquote>\n<p>那么什么我们就可以得出结论：</p>\n<blockquote>\n<p>原型链：原型链就是从实例通过__proto __逐层向上链接原型形成的链条，叫做原型链。</p>\n</blockquote>\n<p>所以我们可以得到以下关系图<br><img src=\"https://static01.imgkr.com/temp/55c06ded7cf7404c8d096757779a0d64.png\" alt></p>\n<p>以上图中蓝色的箭头就是原型链。</p>\n<blockquote>\n<p>大家都知道，其实原型链是JavaScript继承的核心，但是JavaScript 默认并不会复制对象的属性，相反，JavaScript 只是在两个对象之间创建一个关联，这样，一个对象就可以通过委托访问另一个对象的属性和函数，所以与其叫继承，委托的说法反而更准确些。</p>\n</blockquote>\n<blockquote>\n<p>此处需要注意两个点：</p>\n</blockquote>\n<ul>\n<li>当获取 person.constructor 时，其实 person 中并没有 constructor 属性,当不能读取到constructor 属性时，会从 person 的原型也就是 Person.prototype 中读取，正好原型中有该属性。</li>\n</ul>\n<pre><code>person.constructor === Person.prototype.constructor // true</code></pre><ul>\n<li>其次是 <strong>proto</strong> ，绝大部分浏览器都支持这个非标准的方法访问原型，然而它并不存在于 Person.prototype 中，实际上，它是来自于 Object.prototype ，与其说是一个属性，不如说是一个 getter/setter，当使用 obj.<strong>proto</strong> 时，可以理解成返回了 Object.getPrototypeOf(obj)</li>\n</ul>\n<blockquote>\n<p>那么 new 一个构造函数到底是做了什么操作呢？</p>\n</blockquote>\n<p>new操作符新建了一个空对象，这个对象原型指向构造函数的prototype，执行构造函数后返回这个对象</p>\n<ul>\n<li>创建一个空的对象</li>\n<li>链接到原型</li>\n<li>绑定this指向，执行构造函数</li>\n<li>确保返回的是对象</li>\n</ul>\n<h3 id=\"文章最后\"><a href=\"#文章最后\" class=\"headerlink\" title=\"文章最后\"></a>文章最后</h3><p>通过以上的知识梳理，是不是对原型和原型链有了更深的理解呢？是不是发现所谓的模棱两可的知识理解起来也不是那么难？对的，其实就是这样，只要知道它们的关系，发现原型链也不过如此。此文带有个人见解，如有错误还请大家指出，我及时更正。大家一起努力，加油。</p>\n<blockquote>\n<p>我的博客：<a href=\"https://moonshinean.github.io/\" target=\"_blank\" rel=\"noopener\">https://moonshinean.github.io/</a></p>\n</blockquote>\n<p>文章借鉴：<br><a href=\"https://github.com/mqyqingfeng/Blog/issues/2\" target=\"_blank\" rel=\"noopener\">https://github.com/mqyqingfeng/Blog/issues/2</a><br><a href=\"http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html</a></p>\n","site":{"data":{"musics":[{"name":"Stay","artist":"Tonya Mitchell","url":"/medias/music/Tonya Mitchell-Stay.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"},{"name":"火山翻译","url":"https://translate.volcengine.cn","title":"访问主页","introduction":"提供全球领先的翻译技术与服务","avatar":"/medias/avatars/bytedtrans.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"李佳倩的博客","url":"https://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.com/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://www.cnblogs.com/cww97/","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"https://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"https://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"lucifer的博客","url":"https://lucifer.ren/blog/","title":"访问主页","introduction":"一个脑洞很大的程序员。","avatar":"https://tva1.sinaimg.cn/large/006tNbRwly1ga7ognflh9j30b40b4q3w.jpg"},{"name":"钱栋伟","url":"https://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"CJ Blog","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"},{"name":"Tawn","url":"https://tawn0000.github.io/","title":"访问主页","introduction":"JNU ACMer","avatar":"/medias/avatars/tawn.jpg"},{"name":"Master X","url":"https://masterx.top/","title":"访问主页","introduction":"ECNU&ML&DL","avatar":"/medias/avatars/masterx.jpg"},{"name":"分享客","url":"https://sharerdiary.com/","title":"访问主页","introduction":"爱生活，爱分享！","avatar":"/medias/avatars/yezijie.png"},{"name":"taotao","url":"https://zouzhitao.github.io","title":"访问主页","introduction":"taotao 码字的地方","avatar":"/medias/avatars/taotao.jpg"},{"name":"Xiejiadong","url":"https://xiejiadong.com","title":"访问主页","introduction":"Xiejiadong's blog","avatar":"/medias/avatars/xiejiadong.jpg"},{"name":"飞吧","url":"https://fei.bar","title":"访问主页","introduction":"啓飞的个人博客","avatar":"/medias/avatars/feibar.png"},{"name":"ajin","url":"https://ajin.cloud","title":"访问主页","introduction":"Always be enthusiastic","avatar":"/medias/avatars/ajin.jpg"},{"name":"Hiyoung","url":"https://hiyoungai.com/","title":"访问主页","introduction":"宠辱不惊，看庭前花开花落；去留无意，望天空云卷云舒。","avatar":"https://cdn.jsdelivr.net/gh/hiyoung123/cdn/img/avatar.jpg"},{"name":"无言的博客","url":"https://www.yzplove.top","title":"访问主页","introduction":"代码真是越敲越香","avatar":"https://cdn.jsdelivr.net/gh/yzp-99/yzp-99.github.io/medias/avatars/me.jpg"},{"name":"Naixin Zhang","url":"https://naixinzhang.github.io/","title":"访问主页","introduction":"Econ Master | Data Analyst/scientist Candidate","avatar":"https://naixinzhang.github.io/medias/avatars/avatar.jpg"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>作为一名前端从业者，如果理不清JavaScript原型和原型链都显得不够专业，毕竟这是原生JavaScript的重难点和面试必考点，那么到底原型和原型链到底是什么呢？下面我们一起来谈谈吧。</p>\n<blockquote>\n<p>开始之前我们先思考一下什么是原型链？究竟有什么特别之处呢？下面我分别为大家揭开它神秘的面纱</p>\n</blockquote>\n<h2 id=\"原型和原型链\"><a href=\"#原型和原型链\" class=\"headerlink\" title=\"原型和原型链\"></a>原型和原型链</h2><p>首先我们看一段代码</p>\n<pre><code> function Animal(){}\n\n let dog = new Animal();\n dog.name = &#39;black&#39;\n console.log(dog.name) // &#39;black&#39;\n</code></pre><p>在这个代码中，我们创建了一个Animal的构造函数，然后通过构造函数new出来一个dog实例，那么此时的dog就是Animal的实例对象。</p>\n<blockquote>\n<p>下面我们引入一个新的朋友：<strong>prototype</strong></p>\n</blockquote>\n<p>prototype是每一个函数都有的属性，它的作用是指向自己的原型，比如：</p>\n<blockquote>\n<p>上面的Animal构造函数，它有一个 prototype 属性，这个属性就是指向的它原型对象。<br>所以 Animial的原型就是 Animial.prototype</p>\n</blockquote>\n<p>我们可以用一张图表示构造函数和实例原型之间的关系：</p>\n<p><img src=\"https://imgkr2.cn-bj.ufileos.com/e1fc6917-1168-430b-baa2-44b9db91284e.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=%252FgT7YQeTGMlzlTGrl15uDZrpWiQ%253D&Expires=1614339842\" alt></p>\n<p>既然Animial构造函数的原型 是 Animial.prototype，那它的实例dog的原型又是谁呢？</p>\n<blockquote>\n<p>同样是： Animial.prototype, 可能你会好奇，暂时卖个关子，我们继续向下看，后面会一一给大家阐述为什么</p>\n</blockquote>\n<p>我们看下一段代码</p>\n<pre><code>function Person(){}\n// 此处我们用prototype属性在Person原型上创建一个属性name，值为Anny\nPerson.prototype.name = &#39;Anny&#39;\n\n// 然后我们实例化一个person\n\nlet person = new Person()\n\nconsole.log(person.name) // &#39;Anny&#39;\n\n// 此时可以看出，我们并未在实例上定义name这个属性，为啥访问persone.name可以打印出原型的name属性值呢？\n\n我们测试一下：\n\n// 我们给person这个实例定义一个name属性，值为Sam\nperson.name = &#39;Sam&#39;; \n\nconsole.log(person.name) // &#39;Sam&#39; 此时我们打印的值为Sam\n\n// 我们在删除person.name属性\ndelete person.name\n\nconsole.log(person.name) // &#39;Anny&#39; 此时值又成了 Anny了\n\n通过上面的例子 我们发现，当实例中没有一个属性的时候，它就会从构造函数的 Person.prototype 原型中去寻找这个属性，然后将其的信息展示出来。\n</code></pre><blockquote>\n<p>从上面的例子看出，实例和构造函数拥有同一个原型 他们都是 Person.prototype</p>\n</blockquote>\n<p>那么什么是<strong>原型</strong>呢？你可以这样理解：每一个JavaScript对象(null除外)在创建的时候就会与之关联另一个对象，这个对象就是我们所说的原型，每一个对象都会从原型”继承”属性</p>\n<blockquote>\n<p>下面我们引入另一个新的朋友：<strong>__ proto __</strong></p>\n</blockquote>\n<p>这是每一个JavaScript对象(除了 null )都具有的一个属性，叫<strong>proto</strong>，这个属性会指向该对象的原型。</p>\n<p>那么有了 <strong>__ proto __</strong> ，我们就知道我们实例的原型了,我们看下一段代码</p>\n<pre><code>  function Person(){}\n  let person = new Person()\n\n  // 我们通过 __proto__来指向person和Person的原型是不是同一个\n\n  console.log(person.__proto__ == Person.prototype) // true\n\n  // 由此可以看出，上面的说法是对的，person和Person的原型指向同一个，Person.prototype</code></pre><p>得到以下关系图：</p>\n<p><img src=\"https://static01.imgkr.com/temp/58d7a4c1195a49aba1a306828e7acd8e.png\" alt></p>\n<p>既然实例对象和构造函数都可以指向原型，那么原型是否有属性指向构造函数或者实例呢？</p>\n<blockquote>\n<p>指向实例倒是没有，因为一个构造函数可以生成多个实例，但是原型指向构造函数倒是有的，这就要讲到另一个属性：constructor，每个原型都有一个 constructor 属性指向关联的构造函数。</p>\n</blockquote>\n<pre><code>function Person(){}\n\nconsole.log(Person === Person.prototype.constructor) // true\n\n// Person.prototype 代表原型，Person.prototype.constructor代表原型的构造函数，所以上面的值为true</code></pre><p>所以我们得到以下关系图</p>\n<p><img src=\"https://static01.imgkr.com/temp/591bf50b291946378d3f584d414cd479.png\" alt></p>\n<p>上面我们说到，实例读取实例的属性时，如果找不到，就会查找与对象关联的原型中的属性，那如果原型上也没有呢？那它会一直找，找原型的原型，一直找到最顶层为止。</p>\n<h3 id=\"原型的原型\"><a href=\"#原型的原型\" class=\"headerlink\" title=\"原型的原型\"></a>原型的原型</h3><p>在前面，我们已经说了，原型也是一个对象，既然是对象，那我们的原型的原型是不是Object的原型呢?下面我们看以下代码:</p>\n<pre><code>// 我们在Object的原型上定义一个name叫&#39;Kangknag&#39;\nObject.prototype.name = &#39;kangkang&#39;\n\n// 定义一个Person构造函数\nfunction Person(){}\n\n// 在Person的原型上定义一个属性name 为 &#39;Sam&#39;\nPerson.prototype.name = &#39;Sam&#39;;\n\n// 此时我们创建一个实例\nlet person = new Person() \n\n// 此处大家都知道，如果实例上没有name属性，回去它的原型上找，所以此处打印的是Sam\nconsole.log(person.name) // &#39;Sam&#39;\n\n // 此时我们删除Person上的属性name\n\n delete Person.prototype.name\n\n console.log(person.name) // &#39;KangKang&#39;\n\n // 此时我们发现，当删除了构造函数Person的属性name后，我们在打印实例的值变成了&#39;KangKang&#39;，上面说道，实例的属性如果没有就会去原型上面找，如果原型上找不到就会去原型的原型上面去找，那此处的Person的原型就是Object.prototype，我们可以验证一下\n\n console.log(person.__proto__.__proto__ == Object.prototype) // true\n // 可以看出 person原型的原型就是Object.prototype\n\n</code></pre><p>所以我们得到以下关系图</p>\n<p><img src=\"https://imgkr2.cn-bj.ufileos.com/f5fa8f4a-cfba-4f0d-8412-11a5bf599d59.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=sQU4vaF%252BOc%252FPR71zDyIvQqtjDmA%253D&Expires=1614391361\" alt></p>\n<p>person原型的原型就是Object.prototype，那么我们的Object.prototype的原型又是什么呢？<br>我们可以打印看一下：</p>\n<pre><code> console.log(Object.prototype.__proto__) // null</code></pre><p>那么null究竟代表了什么呢？，此处引用阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html\" target=\"_blank\" rel=\"noopener\">《undefined与null的区别》</a>一文的说法：<br><img src=\"https://static01.imgkr.com/temp/ea444fa2889145b490ca92cd35f080c9.png\" alt></p>\n<blockquote>\n<p>null 表示”没有对象”, 即该处不应该有值。</p>\n</blockquote>\n<p>所以Object.prototype.__proto __ 的值为null跟Object.prototype没有原型其实表达了一个意思。null就是原型链的终点，所以一般查找到Object.prototype就可以停止查找了</p>\n<p>此时我们可以得到一个关系</p>\n<blockquote>\n<p>person.__proto __ . __proto __ . __proto __ =  null;</p>\n</blockquote>\n<p>那么什么我们就可以得出结论：</p>\n<blockquote>\n<p>原型链：原型链就是从实例通过__proto __逐层向上链接原型形成的链条，叫做原型链。</p>\n</blockquote>\n<p>所以我们可以得到以下关系图<br><img src=\"https://static01.imgkr.com/temp/55c06ded7cf7404c8d096757779a0d64.png\" alt></p>\n<p>以上图中蓝色的箭头就是原型链。</p>\n<blockquote>\n<p>大家都知道，其实原型链是JavaScript继承的核心，但是JavaScript 默认并不会复制对象的属性，相反，JavaScript 只是在两个对象之间创建一个关联，这样，一个对象就可以通过委托访问另一个对象的属性和函数，所以与其叫继承，委托的说法反而更准确些。</p>\n</blockquote>\n<blockquote>\n<p>此处需要注意两个点：</p>\n</blockquote>\n<ul>\n<li>当获取 person.constructor 时，其实 person 中并没有 constructor 属性,当不能读取到constructor 属性时，会从 person 的原型也就是 Person.prototype 中读取，正好原型中有该属性。</li>\n</ul>\n<pre><code>person.constructor === Person.prototype.constructor // true</code></pre><ul>\n<li>其次是 <strong>proto</strong> ，绝大部分浏览器都支持这个非标准的方法访问原型，然而它并不存在于 Person.prototype 中，实际上，它是来自于 Object.prototype ，与其说是一个属性，不如说是一个 getter/setter，当使用 obj.<strong>proto</strong> 时，可以理解成返回了 Object.getPrototypeOf(obj)</li>\n</ul>\n<blockquote>\n<p>那么 new 一个构造函数到底是做了什么操作呢？</p>\n</blockquote>\n<p>new操作符新建了一个空对象，这个对象原型指向构造函数的prototype，执行构造函数后返回这个对象</p>\n<ul>\n<li>创建一个空的对象</li>\n<li>链接到原型</li>\n<li>绑定this指向，执行构造函数</li>\n<li>确保返回的是对象</li>\n</ul>\n<h3 id=\"文章最后\"><a href=\"#文章最后\" class=\"headerlink\" title=\"文章最后\"></a>文章最后</h3><p>通过以上的知识梳理，是不是对原型和原型链有了更深的理解呢？是不是发现所谓的模棱两可的知识理解起来也不是那么难？对的，其实就是这样，只要知道它们的关系，发现原型链也不过如此。此文带有个人见解，如有错误还请大家指出，我及时更正。大家一起努力，加油。</p>\n<blockquote>\n<p>我的博客：<a href=\"https://moonshinean.github.io/\" target=\"_blank\" rel=\"noopener\">https://moonshinean.github.io/</a></p>\n</blockquote>\n<p>文章借鉴：<br><a href=\"https://github.com/mqyqingfeng/Blog/issues/2\" target=\"_blank\" rel=\"noopener\">https://github.com/mqyqingfeng/Blog/issues/2</a><br><a href=\"http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html</a></p>\n"},{"title":"Javascript中数据类型那些可能会中招的细节","top":true,"cover":false,"toc":true,"mathjax":true,"date":"2021-01-27T07:27:31.000Z","password":false,"summary":false,"_content":"\n## 前言\nJavascript的数据类型对于大家来说一点都不默认，主要基本数据局类型和引用数据类型，都是入门必学的知识点，而且在日常开发中，频繁使用。大家是否都掌握其中的一些细节呢？下面我们就详细探讨一下。\n\n### 一、number类型注意事项\n\nnumber类型包括：正数、负数、0、小数、NaN\n\n> NaN：意思是not a number 不是一个有效数字，但是它是属于number类型的\n> \n#### (1) = 和 == 和 ===的区别\n\n- = 是赋值\n- == 是判断左右两边的值是否相等(非严格判断，只要字面相等则相等)\n- === 是判断左右两边是否相等,严格判断(包含数据类型,类型和字面相等才相等)\n\n#### (2) NaN\n\n- NaN 和 NaN 是不相等的,NaN == NaN返回的是false\n- isNaN();检测一个值不是有效数字的命题是否成立，是有效数字则返回false，不是有效数字返回的才是true\n\n> isNaN() 如果检测的值不是number类型，浏览器会默认把值转换为number类型，然后在判断是否为有效数字\n \n```\n 例如：\n      console.log(isNaN(\"123\"))  // 打印结果是 true\n 步骤: \n    1、首先把\"123\"转换成number类型的,使用Number()转换方法\n    2、然后判断number类型的值是否满足isNaN的条件\n ```\n\n> - Number()方法 强制将其他数据类型转为number类型(强制数据类型转换)\n\n```\n  Number()方法 强制将其他数据类型转为number类型，\n  要求：如果是字符串，字符串中一定都需要是数字才可以转换\n  例如：Number(\"12\")返回的结果是12，Number(\"12px\")返回的结果就是NaN\n ```\n\n> - 非强制数据类型转换 parseInt()/ parseFloat()\n \n```\n  parseInt: 从左到右，一个个字符查找，把是数字的转为有效数字，中途如果遇到了一个非有效数字，就不在继续查找了\n  parseFloat: 和上面一样，可以多识别一个小数点。\n\n  例如：parseInt('12px')的值为 12\n       parseFloat('12.5px')的值为 12.5\n ```\n\n### 二、数据类型的转换规则\n\n> 常用的boolean转换符号\n\n- **!**  一个感叹号是取反，首先将值转化为布尔类型的值，然后取反\n- **!!**  两个感叹号是将其他的数据类型转换为  boolean 类型，相当于Boolean()\n\n#### 转换规则：\n##### 1、如果只有一个值，判断这个值是真还是假，遵循：只有 0 NaN \"\" null undefined 这五个是假，其余的都是真\n\n```\n例如：\n    console.log(!3)  // false\n    console.log(![]) // false\n    console.log(!{}) // false\n    \n    console.log(!null) // true\n    console.log(!0) // true\n    console.log(!undefined) //true\n    console.log(!\"\")) //true\n```\n\n> **注意：** 此处 数字0才为假，如果是字符串的'0',同样为真\n\n\n```\n例如：\n  if(0){\n    console.log(\"为真\")\n  }else{\n    console.log(\"为假\")\n  }\n  if('0'){\n     console.log(\"为真\")\n  }else{\n     console.log(\"为假\")\n  }\n  \n  第一个输出 为假，第二个输出 为真\n```\n\n##### 2、如果是两个值比较是否相等，遵循这个规则：\n\nval1 == val2 两个值可能不是同一数据类型的，如果是 == 比较的话，会进行默认的数据类型转换\n- 1)、对象 == 对象，永远不相等\n- 2)、对象 == 字符串  现将对象转换为字符串(调用toString的方法)，然后在进行比较\n\n```\n  [] 转换为字符串 \"\"\n  {} 转换为字符串 \"[object Object]\" \n  \n  所以:  [] == \"\" 为 true\n        {} == \"\" 为 false\n```\n\n- 3)、对象 == 布尔类型  对象先转为字符串(toString)，然后把字符串转换为数字(Number),布尔类型也转换为数字(true是1 false 是0)，最后让两个数字比较\n\n```\n    例如：\n        console.log([] == false) // 为 true\n        解析：首先 []转为字符串\"\",然后字符串转为数字类型number，Number(\"\")结果为0，false\n        转为数字类型，Number(false) 结果也为0，所以 [] == false, 就解析成了 0与0的比较，所以相等，\n        返回true\n```\n\n- 4)、对象 == 数字 对象先转为字符串(toString)，然后把字符串转换为数字(Number)\n- 5)、数字 == 布尔 布尔类型转换为数字\n- 6)、数字 == 字符串，字符串转换为数字\n\n```\n  例如：5 == '5' // 为 true\n```\n\n- 7)、字符串 == 布尔  都转换为数字\n- 8)、null === undefined 结果是true\n\n```\n    console.log(null == undefined) // true\n```\n\n- 9)、null和undefined 和其他任何数据类型都不相等\n\n```\n console.log(null == 0) // false\n console.log(undefined == 0) // false\n```\n\n##### 3、除了== 是比较，===也是比较(绝对比较)，如果数据类型不一样肯定不相等\n\n```\n  例如：\n      console.log(0 == false) // true\n      console.log(0 === fasle) // false\n      \n      console.log(5 == \"5\") // true\n      console.log(5 === \"5\") // false\n      \n      console.log(null == undefined) // true\n      console.log(null === undefined) // false\n```\n\n### 三、typeof(数据类型检测)\n\n> typeof 用来检测数据类型的，用法：typeof + 要检查的值,\n返回一个字符串，包含了数据类型的字符( \"number\",\"string\",\"boolean\",\"undefined\",\"function\",\"object\")\n\n- **typeof null** 返回的结果是 **\"object\"**\n- typeof undefined 返回的结果是 \"undefined\"\n\n> 虽然null 和 undefined 同为number数据类型，但是通过typeof检测的值不是number，而且也不相同。\n\n- typeof null 结果是 \"object\"\n- typeof [] 结果是 \"object\"\n\n>注意： 同为对象数据类型的 数组、正则、对象的检测类型都是\"object\"\n ****\n\n>**typeof 局限性**：不能具体的检查object下细分的类型\n\n```\n  console.log(typeof typeof typeof typeof []) // \"string\"\n  此处打印的是\"string\"\n```\n\n> tip：因为typeof 返回的值就是一个字符串，如果用到了两个以及两个以上的typeof 返回的都是 \"string\"类型\n\n### 四、基本数据类型和引用数据类型的本质区别\n例子：\n\n```\n情景一:\n    var num1 = 12;\n    var num2 = num1;\n    num2++;\n    console.log(num1);\n   \n    \n情景二:\n    var obj1 = {\"name\":\"张三\"};\n    var obj2 = obj1;\n    obj2.name = \"李四\";\n    console.log(obj1.name);\n\n    情景一打印的值为 12, 情景二打印的值为 \"李四\"\n```\n\n> 分析：基本数据类型的值是具体的值，此处的var num2=num1;就是将num1的值 12给num2，此时num2和num1的值同为12，但是和num1的num2的值互不相关，所以不论num2怎么变，num1都是12，都不会改变。引用数据类型，存储的是数据内存的地址，var obj1 = {\"name\":\"张三\"} 是开辟一个空间来存放{\"name\":\"张三\"}值，然后将obj1指向存储值的地址，此时，var obj2 = obj1,就是将obj1指向内存空间的地址赋值给obj2，两个都指向同一个内存地址，对应的同一个值。所以后面obj2更改内存空间里面name的值后，obj1的值也会改变。\n\n### 写到最后\n重新回顾基础的知识，发现以前很懵懂的知识似乎瞬间明白了许多，比如上述的引用数据类型指向的是内存空间的地址，相赋值操作后，操作赋值后的值会影响原有的值的结果。所以才有了日常生活中经常使用的深拷贝和浅拷贝，就是为了规避改变两个值互相影响的情况；以前都最顾着自己快速的去上手做项目，学习框架的内容，却忽视了这些最为基本的东西。当基础掌握的足够扎实的时候，也就会看什么都豁然开朗了。\n\n> 个人博客：https://moonshinean.github.io/     \n欢迎来访，希望大家一起加油一起努力，奔赴自己的目标。\n","source":"_posts/javascript/JavaScript数据类型那些可能会中招的细节.md","raw":"---\ntitle: Javascript中数据类型那些可能会中招的细节\ntop: true\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-01-27 15:27:31\npassword: false\nsummary: false\ntags:\n    - 数据类型\n    - javascript\ncategories:\n    - JavaScript\n---\n\n## 前言\nJavascript的数据类型对于大家来说一点都不默认，主要基本数据局类型和引用数据类型，都是入门必学的知识点，而且在日常开发中，频繁使用。大家是否都掌握其中的一些细节呢？下面我们就详细探讨一下。\n\n### 一、number类型注意事项\n\nnumber类型包括：正数、负数、0、小数、NaN\n\n> NaN：意思是not a number 不是一个有效数字，但是它是属于number类型的\n> \n#### (1) = 和 == 和 ===的区别\n\n- = 是赋值\n- == 是判断左右两边的值是否相等(非严格判断，只要字面相等则相等)\n- === 是判断左右两边是否相等,严格判断(包含数据类型,类型和字面相等才相等)\n\n#### (2) NaN\n\n- NaN 和 NaN 是不相等的,NaN == NaN返回的是false\n- isNaN();检测一个值不是有效数字的命题是否成立，是有效数字则返回false，不是有效数字返回的才是true\n\n> isNaN() 如果检测的值不是number类型，浏览器会默认把值转换为number类型，然后在判断是否为有效数字\n \n```\n 例如：\n      console.log(isNaN(\"123\"))  // 打印结果是 true\n 步骤: \n    1、首先把\"123\"转换成number类型的,使用Number()转换方法\n    2、然后判断number类型的值是否满足isNaN的条件\n ```\n\n> - Number()方法 强制将其他数据类型转为number类型(强制数据类型转换)\n\n```\n  Number()方法 强制将其他数据类型转为number类型，\n  要求：如果是字符串，字符串中一定都需要是数字才可以转换\n  例如：Number(\"12\")返回的结果是12，Number(\"12px\")返回的结果就是NaN\n ```\n\n> - 非强制数据类型转换 parseInt()/ parseFloat()\n \n```\n  parseInt: 从左到右，一个个字符查找，把是数字的转为有效数字，中途如果遇到了一个非有效数字，就不在继续查找了\n  parseFloat: 和上面一样，可以多识别一个小数点。\n\n  例如：parseInt('12px')的值为 12\n       parseFloat('12.5px')的值为 12.5\n ```\n\n### 二、数据类型的转换规则\n\n> 常用的boolean转换符号\n\n- **!**  一个感叹号是取反，首先将值转化为布尔类型的值，然后取反\n- **!!**  两个感叹号是将其他的数据类型转换为  boolean 类型，相当于Boolean()\n\n#### 转换规则：\n##### 1、如果只有一个值，判断这个值是真还是假，遵循：只有 0 NaN \"\" null undefined 这五个是假，其余的都是真\n\n```\n例如：\n    console.log(!3)  // false\n    console.log(![]) // false\n    console.log(!{}) // false\n    \n    console.log(!null) // true\n    console.log(!0) // true\n    console.log(!undefined) //true\n    console.log(!\"\")) //true\n```\n\n> **注意：** 此处 数字0才为假，如果是字符串的'0',同样为真\n\n\n```\n例如：\n  if(0){\n    console.log(\"为真\")\n  }else{\n    console.log(\"为假\")\n  }\n  if('0'){\n     console.log(\"为真\")\n  }else{\n     console.log(\"为假\")\n  }\n  \n  第一个输出 为假，第二个输出 为真\n```\n\n##### 2、如果是两个值比较是否相等，遵循这个规则：\n\nval1 == val2 两个值可能不是同一数据类型的，如果是 == 比较的话，会进行默认的数据类型转换\n- 1)、对象 == 对象，永远不相等\n- 2)、对象 == 字符串  现将对象转换为字符串(调用toString的方法)，然后在进行比较\n\n```\n  [] 转换为字符串 \"\"\n  {} 转换为字符串 \"[object Object]\" \n  \n  所以:  [] == \"\" 为 true\n        {} == \"\" 为 false\n```\n\n- 3)、对象 == 布尔类型  对象先转为字符串(toString)，然后把字符串转换为数字(Number),布尔类型也转换为数字(true是1 false 是0)，最后让两个数字比较\n\n```\n    例如：\n        console.log([] == false) // 为 true\n        解析：首先 []转为字符串\"\",然后字符串转为数字类型number，Number(\"\")结果为0，false\n        转为数字类型，Number(false) 结果也为0，所以 [] == false, 就解析成了 0与0的比较，所以相等，\n        返回true\n```\n\n- 4)、对象 == 数字 对象先转为字符串(toString)，然后把字符串转换为数字(Number)\n- 5)、数字 == 布尔 布尔类型转换为数字\n- 6)、数字 == 字符串，字符串转换为数字\n\n```\n  例如：5 == '5' // 为 true\n```\n\n- 7)、字符串 == 布尔  都转换为数字\n- 8)、null === undefined 结果是true\n\n```\n    console.log(null == undefined) // true\n```\n\n- 9)、null和undefined 和其他任何数据类型都不相等\n\n```\n console.log(null == 0) // false\n console.log(undefined == 0) // false\n```\n\n##### 3、除了== 是比较，===也是比较(绝对比较)，如果数据类型不一样肯定不相等\n\n```\n  例如：\n      console.log(0 == false) // true\n      console.log(0 === fasle) // false\n      \n      console.log(5 == \"5\") // true\n      console.log(5 === \"5\") // false\n      \n      console.log(null == undefined) // true\n      console.log(null === undefined) // false\n```\n\n### 三、typeof(数据类型检测)\n\n> typeof 用来检测数据类型的，用法：typeof + 要检查的值,\n返回一个字符串，包含了数据类型的字符( \"number\",\"string\",\"boolean\",\"undefined\",\"function\",\"object\")\n\n- **typeof null** 返回的结果是 **\"object\"**\n- typeof undefined 返回的结果是 \"undefined\"\n\n> 虽然null 和 undefined 同为number数据类型，但是通过typeof检测的值不是number，而且也不相同。\n\n- typeof null 结果是 \"object\"\n- typeof [] 结果是 \"object\"\n\n>注意： 同为对象数据类型的 数组、正则、对象的检测类型都是\"object\"\n ****\n\n>**typeof 局限性**：不能具体的检查object下细分的类型\n\n```\n  console.log(typeof typeof typeof typeof []) // \"string\"\n  此处打印的是\"string\"\n```\n\n> tip：因为typeof 返回的值就是一个字符串，如果用到了两个以及两个以上的typeof 返回的都是 \"string\"类型\n\n### 四、基本数据类型和引用数据类型的本质区别\n例子：\n\n```\n情景一:\n    var num1 = 12;\n    var num2 = num1;\n    num2++;\n    console.log(num1);\n   \n    \n情景二:\n    var obj1 = {\"name\":\"张三\"};\n    var obj2 = obj1;\n    obj2.name = \"李四\";\n    console.log(obj1.name);\n\n    情景一打印的值为 12, 情景二打印的值为 \"李四\"\n```\n\n> 分析：基本数据类型的值是具体的值，此处的var num2=num1;就是将num1的值 12给num2，此时num2和num1的值同为12，但是和num1的num2的值互不相关，所以不论num2怎么变，num1都是12，都不会改变。引用数据类型，存储的是数据内存的地址，var obj1 = {\"name\":\"张三\"} 是开辟一个空间来存放{\"name\":\"张三\"}值，然后将obj1指向存储值的地址，此时，var obj2 = obj1,就是将obj1指向内存空间的地址赋值给obj2，两个都指向同一个内存地址，对应的同一个值。所以后面obj2更改内存空间里面name的值后，obj1的值也会改变。\n\n### 写到最后\n重新回顾基础的知识，发现以前很懵懂的知识似乎瞬间明白了许多，比如上述的引用数据类型指向的是内存空间的地址，相赋值操作后，操作赋值后的值会影响原有的值的结果。所以才有了日常生活中经常使用的深拷贝和浅拷贝，就是为了规避改变两个值互相影响的情况；以前都最顾着自己快速的去上手做项目，学习框架的内容，却忽视了这些最为基本的东西。当基础掌握的足够扎实的时候，也就会看什么都豁然开朗了。\n\n> 个人博客：https://moonshinean.github.io/     \n欢迎来访，希望大家一起加油一起努力，奔赴自己的目标。\n","slug":"javascript/JavaScript数据类型那些可能会中招的细节","published":1,"updated":"2021-04-07T08:59:35.387Z","_id":"ckn77nlpk000txwnj8r7e45lj","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Javascript的数据类型对于大家来说一点都不默认，主要基本数据局类型和引用数据类型，都是入门必学的知识点，而且在日常开发中，频繁使用。大家是否都掌握其中的一些细节呢？下面我们就详细探讨一下。</p>\n<h3 id=\"一、number类型注意事项\"><a href=\"#一、number类型注意事项\" class=\"headerlink\" title=\"一、number类型注意事项\"></a>一、number类型注意事项</h3><p>number类型包括：正数、负数、0、小数、NaN</p>\n<blockquote>\n<p>NaN：意思是not a number 不是一个有效数字，但是它是属于number类型的</p>\n</blockquote>\n<h4 id=\"1-和-和-的区别\"><a href=\"#1-和-和-的区别\" class=\"headerlink\" title=\"(1) = 和 == 和 ===的区别\"></a>(1) = 和 == 和 ===的区别</h4><ul>\n<li>= 是赋值</li>\n<li>== 是判断左右两边的值是否相等(非严格判断，只要字面相等则相等)</li>\n<li>=== 是判断左右两边是否相等,严格判断(包含数据类型,类型和字面相等才相等)</li>\n</ul>\n<h4 id=\"2-NaN\"><a href=\"#2-NaN\" class=\"headerlink\" title=\"(2) NaN\"></a>(2) NaN</h4><ul>\n<li>NaN 和 NaN 是不相等的,NaN == NaN返回的是false</li>\n<li>isNaN();检测一个值不是有效数字的命题是否成立，是有效数字则返回false，不是有效数字返回的才是true</li>\n</ul>\n<blockquote>\n<p>isNaN() 如果检测的值不是number类型，浏览器会默认把值转换为number类型，然后在判断是否为有效数字</p>\n</blockquote>\n<pre><code> 例如：\n      console.log(isNaN(&quot;123&quot;))  // 打印结果是 true\n 步骤: \n    1、首先把&quot;123&quot;转换成number类型的,使用Number()转换方法\n    2、然后判断number类型的值是否满足isNaN的条件</code></pre><blockquote>\n<ul>\n<li>Number()方法 强制将其他数据类型转为number类型(强制数据类型转换)</li>\n</ul>\n</blockquote>\n<pre><code>  Number()方法 强制将其他数据类型转为number类型，\n  要求：如果是字符串，字符串中一定都需要是数字才可以转换\n  例如：Number(&quot;12&quot;)返回的结果是12，Number(&quot;12px&quot;)返回的结果就是NaN</code></pre><blockquote>\n<ul>\n<li>非强制数据类型转换 parseInt()/ parseFloat()</li>\n</ul>\n</blockquote>\n<pre><code>  parseInt: 从左到右，一个个字符查找，把是数字的转为有效数字，中途如果遇到了一个非有效数字，就不在继续查找了\n  parseFloat: 和上面一样，可以多识别一个小数点。\n\n  例如：parseInt(&#39;12px&#39;)的值为 12\n       parseFloat(&#39;12.5px&#39;)的值为 12.5</code></pre><h3 id=\"二、数据类型的转换规则\"><a href=\"#二、数据类型的转换规则\" class=\"headerlink\" title=\"二、数据类型的转换规则\"></a>二、数据类型的转换规则</h3><blockquote>\n<p>常用的boolean转换符号</p>\n</blockquote>\n<ul>\n<li><strong>!</strong>  一个感叹号是取反，首先将值转化为布尔类型的值，然后取反</li>\n<li><strong>!!</strong>  两个感叹号是将其他的数据类型转换为  boolean 类型，相当于Boolean()</li>\n</ul>\n<h4 id=\"转换规则：\"><a href=\"#转换规则：\" class=\"headerlink\" title=\"转换规则：\"></a>转换规则：</h4><h5 id=\"1、如果只有一个值，判断这个值是真还是假，遵循：只有-0-NaN-“”-null-undefined-这五个是假，其余的都是真\"><a href=\"#1、如果只有一个值，判断这个值是真还是假，遵循：只有-0-NaN-“”-null-undefined-这五个是假，其余的都是真\" class=\"headerlink\" title=\"1、如果只有一个值，判断这个值是真还是假，遵循：只有 0 NaN “” null undefined 这五个是假，其余的都是真\"></a>1、如果只有一个值，判断这个值是真还是假，遵循：只有 0 NaN “” null undefined 这五个是假，其余的都是真</h5><pre><code>例如：\n    console.log(!3)  // false\n    console.log(![]) // false\n    console.log(!{}) // false\n\n    console.log(!null) // true\n    console.log(!0) // true\n    console.log(!undefined) //true\n    console.log(!&quot;&quot;)) //true</code></pre><blockquote>\n<p><strong>注意：</strong> 此处 数字0才为假，如果是字符串的’0’,同样为真</p>\n</blockquote>\n<pre><code>例如：\n  if(0){\n    console.log(&quot;为真&quot;)\n  }else{\n    console.log(&quot;为假&quot;)\n  }\n  if(&#39;0&#39;){\n     console.log(&quot;为真&quot;)\n  }else{\n     console.log(&quot;为假&quot;)\n  }\n\n  第一个输出 为假，第二个输出 为真</code></pre><h5 id=\"2、如果是两个值比较是否相等，遵循这个规则：\"><a href=\"#2、如果是两个值比较是否相等，遵循这个规则：\" class=\"headerlink\" title=\"2、如果是两个值比较是否相等，遵循这个规则：\"></a>2、如果是两个值比较是否相等，遵循这个规则：</h5><p>val1 == val2 两个值可能不是同一数据类型的，如果是 == 比较的话，会进行默认的数据类型转换</p>\n<ul>\n<li>1)、对象 == 对象，永远不相等</li>\n<li>2)、对象 == 字符串  现将对象转换为字符串(调用toString的方法)，然后在进行比较</li>\n</ul>\n<pre><code>  [] 转换为字符串 &quot;&quot;\n  {} 转换为字符串 &quot;[object Object]&quot; \n\n  所以:  [] == &quot;&quot; 为 true\n        {} == &quot;&quot; 为 false</code></pre><ul>\n<li>3)、对象 == 布尔类型  对象先转为字符串(toString)，然后把字符串转换为数字(Number),布尔类型也转换为数字(true是1 false 是0)，最后让两个数字比较</li>\n</ul>\n<pre><code>    例如：\n        console.log([] == false) // 为 true\n        解析：首先 []转为字符串&quot;&quot;,然后字符串转为数字类型number，Number(&quot;&quot;)结果为0，false\n        转为数字类型，Number(false) 结果也为0，所以 [] == false, 就解析成了 0与0的比较，所以相等，\n        返回true</code></pre><ul>\n<li>4)、对象 == 数字 对象先转为字符串(toString)，然后把字符串转换为数字(Number)</li>\n<li>5)、数字 == 布尔 布尔类型转换为数字</li>\n<li>6)、数字 == 字符串，字符串转换为数字</li>\n</ul>\n<pre><code>  例如：5 == &#39;5&#39; // 为 true</code></pre><ul>\n<li>7)、字符串 == 布尔  都转换为数字</li>\n<li>8)、null === undefined 结果是true</li>\n</ul>\n<pre><code>    console.log(null == undefined) // true</code></pre><ul>\n<li>9)、null和undefined 和其他任何数据类型都不相等</li>\n</ul>\n<pre><code> console.log(null == 0) // false\n console.log(undefined == 0) // false</code></pre><h5 id=\"3、除了-是比较，-也是比较-绝对比较-，如果数据类型不一样肯定不相等\"><a href=\"#3、除了-是比较，-也是比较-绝对比较-，如果数据类型不一样肯定不相等\" class=\"headerlink\" title=\"3、除了== 是比较，===也是比较(绝对比较)，如果数据类型不一样肯定不相等\"></a>3、除了== 是比较，===也是比较(绝对比较)，如果数据类型不一样肯定不相等</h5><pre><code>  例如：\n      console.log(0 == false) // true\n      console.log(0 === fasle) // false\n\n      console.log(5 == &quot;5&quot;) // true\n      console.log(5 === &quot;5&quot;) // false\n\n      console.log(null == undefined) // true\n      console.log(null === undefined) // false</code></pre><h3 id=\"三、typeof-数据类型检测\"><a href=\"#三、typeof-数据类型检测\" class=\"headerlink\" title=\"三、typeof(数据类型检测)\"></a>三、typeof(数据类型检测)</h3><blockquote>\n<p>typeof 用来检测数据类型的，用法：typeof + 要检查的值,<br>返回一个字符串，包含了数据类型的字符( “number”,”string”,”boolean”,”undefined”,”function”,”object”)</p>\n</blockquote>\n<ul>\n<li><strong>typeof null</strong> 返回的结果是 <strong>“object”</strong></li>\n<li>typeof undefined 返回的结果是 “undefined”</li>\n</ul>\n<blockquote>\n<p>虽然null 和 undefined 同为number数据类型，但是通过typeof检测的值不是number，而且也不相同。</p>\n</blockquote>\n<ul>\n<li>typeof null 结果是 “object”</li>\n<li>typeof [] 结果是 “object”</li>\n</ul>\n<blockquote>\n<p>注意： 同为对象数据类型的 数组、正则、对象的检测类型都是”object”</p>\n</blockquote>\n<hr>\n<blockquote>\n<p><strong>typeof 局限性</strong>：不能具体的检查object下细分的类型</p>\n</blockquote>\n<pre><code>  console.log(typeof typeof typeof typeof []) // &quot;string&quot;\n  此处打印的是&quot;string&quot;</code></pre><blockquote>\n<p>tip：因为typeof 返回的值就是一个字符串，如果用到了两个以及两个以上的typeof 返回的都是 “string”类型</p>\n</blockquote>\n<h3 id=\"四、基本数据类型和引用数据类型的本质区别\"><a href=\"#四、基本数据类型和引用数据类型的本质区别\" class=\"headerlink\" title=\"四、基本数据类型和引用数据类型的本质区别\"></a>四、基本数据类型和引用数据类型的本质区别</h3><p>例子：</p>\n<pre><code>情景一:\n    var num1 = 12;\n    var num2 = num1;\n    num2++;\n    console.log(num1);\n\n\n情景二:\n    var obj1 = {&quot;name&quot;:&quot;张三&quot;};\n    var obj2 = obj1;\n    obj2.name = &quot;李四&quot;;\n    console.log(obj1.name);\n\n    情景一打印的值为 12, 情景二打印的值为 &quot;李四&quot;</code></pre><blockquote>\n<p>分析：基本数据类型的值是具体的值，此处的var num2=num1;就是将num1的值 12给num2，此时num2和num1的值同为12，但是和num1的num2的值互不相关，所以不论num2怎么变，num1都是12，都不会改变。引用数据类型，存储的是数据内存的地址，var obj1 = {“name”:”张三”} 是开辟一个空间来存放{“name”:”张三”}值，然后将obj1指向存储值的地址，此时，var obj2 = obj1,就是将obj1指向内存空间的地址赋值给obj2，两个都指向同一个内存地址，对应的同一个值。所以后面obj2更改内存空间里面name的值后，obj1的值也会改变。</p>\n</blockquote>\n<h3 id=\"写到最后\"><a href=\"#写到最后\" class=\"headerlink\" title=\"写到最后\"></a>写到最后</h3><p>重新回顾基础的知识，发现以前很懵懂的知识似乎瞬间明白了许多，比如上述的引用数据类型指向的是内存空间的地址，相赋值操作后，操作赋值后的值会影响原有的值的结果。所以才有了日常生活中经常使用的深拷贝和浅拷贝，就是为了规避改变两个值互相影响的情况；以前都最顾着自己快速的去上手做项目，学习框架的内容，却忽视了这些最为基本的东西。当基础掌握的足够扎实的时候，也就会看什么都豁然开朗了。</p>\n<blockquote>\n<p>个人博客：<a href=\"https://moonshinean.github.io/\" target=\"_blank\" rel=\"noopener\">https://moonshinean.github.io/</a><br>欢迎来访，希望大家一起加油一起努力，奔赴自己的目标。</p>\n</blockquote>\n","site":{"data":{"musics":[{"name":"Stay","artist":"Tonya Mitchell","url":"/medias/music/Tonya Mitchell-Stay.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"},{"name":"火山翻译","url":"https://translate.volcengine.cn","title":"访问主页","introduction":"提供全球领先的翻译技术与服务","avatar":"/medias/avatars/bytedtrans.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"李佳倩的博客","url":"https://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.com/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://www.cnblogs.com/cww97/","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"https://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"https://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"lucifer的博客","url":"https://lucifer.ren/blog/","title":"访问主页","introduction":"一个脑洞很大的程序员。","avatar":"https://tva1.sinaimg.cn/large/006tNbRwly1ga7ognflh9j30b40b4q3w.jpg"},{"name":"钱栋伟","url":"https://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"CJ Blog","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"},{"name":"Tawn","url":"https://tawn0000.github.io/","title":"访问主页","introduction":"JNU ACMer","avatar":"/medias/avatars/tawn.jpg"},{"name":"Master X","url":"https://masterx.top/","title":"访问主页","introduction":"ECNU&ML&DL","avatar":"/medias/avatars/masterx.jpg"},{"name":"分享客","url":"https://sharerdiary.com/","title":"访问主页","introduction":"爱生活，爱分享！","avatar":"/medias/avatars/yezijie.png"},{"name":"taotao","url":"https://zouzhitao.github.io","title":"访问主页","introduction":"taotao 码字的地方","avatar":"/medias/avatars/taotao.jpg"},{"name":"Xiejiadong","url":"https://xiejiadong.com","title":"访问主页","introduction":"Xiejiadong's blog","avatar":"/medias/avatars/xiejiadong.jpg"},{"name":"飞吧","url":"https://fei.bar","title":"访问主页","introduction":"啓飞的个人博客","avatar":"/medias/avatars/feibar.png"},{"name":"ajin","url":"https://ajin.cloud","title":"访问主页","introduction":"Always be enthusiastic","avatar":"/medias/avatars/ajin.jpg"},{"name":"Hiyoung","url":"https://hiyoungai.com/","title":"访问主页","introduction":"宠辱不惊，看庭前花开花落；去留无意，望天空云卷云舒。","avatar":"https://cdn.jsdelivr.net/gh/hiyoung123/cdn/img/avatar.jpg"},{"name":"无言的博客","url":"https://www.yzplove.top","title":"访问主页","introduction":"代码真是越敲越香","avatar":"https://cdn.jsdelivr.net/gh/yzp-99/yzp-99.github.io/medias/avatars/me.jpg"},{"name":"Naixin Zhang","url":"https://naixinzhang.github.io/","title":"访问主页","introduction":"Econ Master | Data Analyst/scientist Candidate","avatar":"https://naixinzhang.github.io/medias/avatars/avatar.jpg"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Javascript的数据类型对于大家来说一点都不默认，主要基本数据局类型和引用数据类型，都是入门必学的知识点，而且在日常开发中，频繁使用。大家是否都掌握其中的一些细节呢？下面我们就详细探讨一下。</p>\n<h3 id=\"一、number类型注意事项\"><a href=\"#一、number类型注意事项\" class=\"headerlink\" title=\"一、number类型注意事项\"></a>一、number类型注意事项</h3><p>number类型包括：正数、负数、0、小数、NaN</p>\n<blockquote>\n<p>NaN：意思是not a number 不是一个有效数字，但是它是属于number类型的</p>\n</blockquote>\n<h4 id=\"1-和-和-的区别\"><a href=\"#1-和-和-的区别\" class=\"headerlink\" title=\"(1) = 和 == 和 ===的区别\"></a>(1) = 和 == 和 ===的区别</h4><ul>\n<li>= 是赋值</li>\n<li>== 是判断左右两边的值是否相等(非严格判断，只要字面相等则相等)</li>\n<li>=== 是判断左右两边是否相等,严格判断(包含数据类型,类型和字面相等才相等)</li>\n</ul>\n<h4 id=\"2-NaN\"><a href=\"#2-NaN\" class=\"headerlink\" title=\"(2) NaN\"></a>(2) NaN</h4><ul>\n<li>NaN 和 NaN 是不相等的,NaN == NaN返回的是false</li>\n<li>isNaN();检测一个值不是有效数字的命题是否成立，是有效数字则返回false，不是有效数字返回的才是true</li>\n</ul>\n<blockquote>\n<p>isNaN() 如果检测的值不是number类型，浏览器会默认把值转换为number类型，然后在判断是否为有效数字</p>\n</blockquote>\n<pre><code> 例如：\n      console.log(isNaN(&quot;123&quot;))  // 打印结果是 true\n 步骤: \n    1、首先把&quot;123&quot;转换成number类型的,使用Number()转换方法\n    2、然后判断number类型的值是否满足isNaN的条件</code></pre><blockquote>\n<ul>\n<li>Number()方法 强制将其他数据类型转为number类型(强制数据类型转换)</li>\n</ul>\n</blockquote>\n<pre><code>  Number()方法 强制将其他数据类型转为number类型，\n  要求：如果是字符串，字符串中一定都需要是数字才可以转换\n  例如：Number(&quot;12&quot;)返回的结果是12，Number(&quot;12px&quot;)返回的结果就是NaN</code></pre><blockquote>\n<ul>\n<li>非强制数据类型转换 parseInt()/ parseFloat()</li>\n</ul>\n</blockquote>\n<pre><code>  parseInt: 从左到右，一个个字符查找，把是数字的转为有效数字，中途如果遇到了一个非有效数字，就不在继续查找了\n  parseFloat: 和上面一样，可以多识别一个小数点。\n\n  例如：parseInt(&#39;12px&#39;)的值为 12\n       parseFloat(&#39;12.5px&#39;)的值为 12.5</code></pre><h3 id=\"二、数据类型的转换规则\"><a href=\"#二、数据类型的转换规则\" class=\"headerlink\" title=\"二、数据类型的转换规则\"></a>二、数据类型的转换规则</h3><blockquote>\n<p>常用的boolean转换符号</p>\n</blockquote>\n<ul>\n<li><strong>!</strong>  一个感叹号是取反，首先将值转化为布尔类型的值，然后取反</li>\n<li><strong>!!</strong>  两个感叹号是将其他的数据类型转换为  boolean 类型，相当于Boolean()</li>\n</ul>\n<h4 id=\"转换规则：\"><a href=\"#转换规则：\" class=\"headerlink\" title=\"转换规则：\"></a>转换规则：</h4><h5 id=\"1、如果只有一个值，判断这个值是真还是假，遵循：只有-0-NaN-“”-null-undefined-这五个是假，其余的都是真\"><a href=\"#1、如果只有一个值，判断这个值是真还是假，遵循：只有-0-NaN-“”-null-undefined-这五个是假，其余的都是真\" class=\"headerlink\" title=\"1、如果只有一个值，判断这个值是真还是假，遵循：只有 0 NaN “” null undefined 这五个是假，其余的都是真\"></a>1、如果只有一个值，判断这个值是真还是假，遵循：只有 0 NaN “” null undefined 这五个是假，其余的都是真</h5><pre><code>例如：\n    console.log(!3)  // false\n    console.log(![]) // false\n    console.log(!{}) // false\n\n    console.log(!null) // true\n    console.log(!0) // true\n    console.log(!undefined) //true\n    console.log(!&quot;&quot;)) //true</code></pre><blockquote>\n<p><strong>注意：</strong> 此处 数字0才为假，如果是字符串的’0’,同样为真</p>\n</blockquote>\n<pre><code>例如：\n  if(0){\n    console.log(&quot;为真&quot;)\n  }else{\n    console.log(&quot;为假&quot;)\n  }\n  if(&#39;0&#39;){\n     console.log(&quot;为真&quot;)\n  }else{\n     console.log(&quot;为假&quot;)\n  }\n\n  第一个输出 为假，第二个输出 为真</code></pre><h5 id=\"2、如果是两个值比较是否相等，遵循这个规则：\"><a href=\"#2、如果是两个值比较是否相等，遵循这个规则：\" class=\"headerlink\" title=\"2、如果是两个值比较是否相等，遵循这个规则：\"></a>2、如果是两个值比较是否相等，遵循这个规则：</h5><p>val1 == val2 两个值可能不是同一数据类型的，如果是 == 比较的话，会进行默认的数据类型转换</p>\n<ul>\n<li>1)、对象 == 对象，永远不相等</li>\n<li>2)、对象 == 字符串  现将对象转换为字符串(调用toString的方法)，然后在进行比较</li>\n</ul>\n<pre><code>  [] 转换为字符串 &quot;&quot;\n  {} 转换为字符串 &quot;[object Object]&quot; \n\n  所以:  [] == &quot;&quot; 为 true\n        {} == &quot;&quot; 为 false</code></pre><ul>\n<li>3)、对象 == 布尔类型  对象先转为字符串(toString)，然后把字符串转换为数字(Number),布尔类型也转换为数字(true是1 false 是0)，最后让两个数字比较</li>\n</ul>\n<pre><code>    例如：\n        console.log([] == false) // 为 true\n        解析：首先 []转为字符串&quot;&quot;,然后字符串转为数字类型number，Number(&quot;&quot;)结果为0，false\n        转为数字类型，Number(false) 结果也为0，所以 [] == false, 就解析成了 0与0的比较，所以相等，\n        返回true</code></pre><ul>\n<li>4)、对象 == 数字 对象先转为字符串(toString)，然后把字符串转换为数字(Number)</li>\n<li>5)、数字 == 布尔 布尔类型转换为数字</li>\n<li>6)、数字 == 字符串，字符串转换为数字</li>\n</ul>\n<pre><code>  例如：5 == &#39;5&#39; // 为 true</code></pre><ul>\n<li>7)、字符串 == 布尔  都转换为数字</li>\n<li>8)、null === undefined 结果是true</li>\n</ul>\n<pre><code>    console.log(null == undefined) // true</code></pre><ul>\n<li>9)、null和undefined 和其他任何数据类型都不相等</li>\n</ul>\n<pre><code> console.log(null == 0) // false\n console.log(undefined == 0) // false</code></pre><h5 id=\"3、除了-是比较，-也是比较-绝对比较-，如果数据类型不一样肯定不相等\"><a href=\"#3、除了-是比较，-也是比较-绝对比较-，如果数据类型不一样肯定不相等\" class=\"headerlink\" title=\"3、除了== 是比较，===也是比较(绝对比较)，如果数据类型不一样肯定不相等\"></a>3、除了== 是比较，===也是比较(绝对比较)，如果数据类型不一样肯定不相等</h5><pre><code>  例如：\n      console.log(0 == false) // true\n      console.log(0 === fasle) // false\n\n      console.log(5 == &quot;5&quot;) // true\n      console.log(5 === &quot;5&quot;) // false\n\n      console.log(null == undefined) // true\n      console.log(null === undefined) // false</code></pre><h3 id=\"三、typeof-数据类型检测\"><a href=\"#三、typeof-数据类型检测\" class=\"headerlink\" title=\"三、typeof(数据类型检测)\"></a>三、typeof(数据类型检测)</h3><blockquote>\n<p>typeof 用来检测数据类型的，用法：typeof + 要检查的值,<br>返回一个字符串，包含了数据类型的字符( “number”,”string”,”boolean”,”undefined”,”function”,”object”)</p>\n</blockquote>\n<ul>\n<li><strong>typeof null</strong> 返回的结果是 <strong>“object”</strong></li>\n<li>typeof undefined 返回的结果是 “undefined”</li>\n</ul>\n<blockquote>\n<p>虽然null 和 undefined 同为number数据类型，但是通过typeof检测的值不是number，而且也不相同。</p>\n</blockquote>\n<ul>\n<li>typeof null 结果是 “object”</li>\n<li>typeof [] 结果是 “object”</li>\n</ul>\n<blockquote>\n<p>注意： 同为对象数据类型的 数组、正则、对象的检测类型都是”object”</p>\n</blockquote>\n<hr>\n<blockquote>\n<p><strong>typeof 局限性</strong>：不能具体的检查object下细分的类型</p>\n</blockquote>\n<pre><code>  console.log(typeof typeof typeof typeof []) // &quot;string&quot;\n  此处打印的是&quot;string&quot;</code></pre><blockquote>\n<p>tip：因为typeof 返回的值就是一个字符串，如果用到了两个以及两个以上的typeof 返回的都是 “string”类型</p>\n</blockquote>\n<h3 id=\"四、基本数据类型和引用数据类型的本质区别\"><a href=\"#四、基本数据类型和引用数据类型的本质区别\" class=\"headerlink\" title=\"四、基本数据类型和引用数据类型的本质区别\"></a>四、基本数据类型和引用数据类型的本质区别</h3><p>例子：</p>\n<pre><code>情景一:\n    var num1 = 12;\n    var num2 = num1;\n    num2++;\n    console.log(num1);\n\n\n情景二:\n    var obj1 = {&quot;name&quot;:&quot;张三&quot;};\n    var obj2 = obj1;\n    obj2.name = &quot;李四&quot;;\n    console.log(obj1.name);\n\n    情景一打印的值为 12, 情景二打印的值为 &quot;李四&quot;</code></pre><blockquote>\n<p>分析：基本数据类型的值是具体的值，此处的var num2=num1;就是将num1的值 12给num2，此时num2和num1的值同为12，但是和num1的num2的值互不相关，所以不论num2怎么变，num1都是12，都不会改变。引用数据类型，存储的是数据内存的地址，var obj1 = {“name”:”张三”} 是开辟一个空间来存放{“name”:”张三”}值，然后将obj1指向存储值的地址，此时，var obj2 = obj1,就是将obj1指向内存空间的地址赋值给obj2，两个都指向同一个内存地址，对应的同一个值。所以后面obj2更改内存空间里面name的值后，obj1的值也会改变。</p>\n</blockquote>\n<h3 id=\"写到最后\"><a href=\"#写到最后\" class=\"headerlink\" title=\"写到最后\"></a>写到最后</h3><p>重新回顾基础的知识，发现以前很懵懂的知识似乎瞬间明白了许多，比如上述的引用数据类型指向的是内存空间的地址，相赋值操作后，操作赋值后的值会影响原有的值的结果。所以才有了日常生活中经常使用的深拷贝和浅拷贝，就是为了规避改变两个值互相影响的情况；以前都最顾着自己快速的去上手做项目，学习框架的内容，却忽视了这些最为基本的东西。当基础掌握的足够扎实的时候，也就会看什么都豁然开朗了。</p>\n<blockquote>\n<p>个人博客：<a href=\"https://moonshinean.github.io/\" target=\"_blank\" rel=\"noopener\">https://moonshinean.github.io/</a><br>欢迎来访，希望大家一起加油一起努力，奔赴自己的目标。</p>\n</blockquote>\n"},{"title":"javascript中this指向探索","top":true,"cover":false,"toc":true,"mathjax":true,"date":"2021-01-27T07:27:31.000Z","password":false,"summary":false,"_content":"\n[comment]: <> (::: tip 书籍简介)\n\n[comment]: <> (书名：我亦飘零久  )\n\n[comment]: <> (作者：独木舟  )\n\n[comment]: <> (分类：旅行随笔  )\n\n[comment]: <> (第一次读于 2018.08.30  )\n\n[comment]: <> (第二次读于 2019.07.22 至 2020.02.28  )\n\n[comment]: <> (:::)\n<!-- more -->\n\n### 一、普通函数调用\n1、使用let定义\n```\n// 普通函数调用\nlet username = \"hello world\"\nfunction test(){\n  console.log(this.username)\n}\n```\n> 使用node运行，输出的结果是: undefined。\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8b1f5477c2954fd38efb32cb4baf9ecb~tplv-k3u1fbpfcp-zoom-1.image)\n\n> 使用html在谷歌浏览器中运行结果，输出的也是：undefined\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/703a3ee5807a4f749526a8096593fedf~tplv-k3u1fbpfcp-zoom-1.image)\n\n> 总结：使用let定义全局的变量在函数内使用this指向为undefined\n\n2、使用var定义\n```\n// 普通函数调用(使用var定义)\nvar username = \"hello world\"\nfunction test(){\n   console.log(this.username)\n}\ntest();\n```\n> 使用node运行，输出的结果是：undefine\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c5be17839641405091cb93deca9ceb4d~tplv-k3u1fbpfcp-zoom-1.image)\n\n\n> 使用谷歌浏览器中运行的结果是：\"hello world\"\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4d7835ef5d814b6c9dab34663c4483fe~tplv-k3u1fbpfcp-zoom-1.image)\n\n> ps: 大家会发现在node运行环境和浏览器运行环境下，this的指向不太相同；这是因为在node环境下 this指向的是全局global对象，在浏览器环境下this指向的是window对象。\n\n\n>猜想：此处在浏览器环境下，var定义的全局变量会被window管控？而let定义的变量不会被window掌控。\n\n验证：\n\n1)、使用var 定义全局变量，在函数中打印window对象,如果在window对象中能找到定义的全局变量，就表示定义的全局变量被window接管了。\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a9d271b212e44103acbeb495b49ebd46~tplv-k3u1fbpfcp-zoom-1.image)\n此时我们打印发现，window对象有很多属性，我们搜索一下刚才定义的username全局变量\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c481a0d161cb43b08f036b1d02daf508~tplv-k3u1fbpfcp-zoom-1.image)\n在全局属性中找到了username这个全局变量，表示我们的username这个全局变量被window接管了。既然window接管了username这个全局变量，那么我们就可以通过window.username打印该属性参数。\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ecee224a32ca47018ecca29553ab9162~tplv-k3u1fbpfcp-zoom-1.image)\n那么this指向window,window接管了属性username，那么var定义的全局属性就可以通过this来获取了。\n\n2）、同理：我们使用let来定义一个变量，打印window对象，看看数据是否被window接管。\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b00731e9c5943daab2c922055ab5cbc~tplv-k3u1fbpfcp-zoom-1.image)\n搜索发现，username属性不存在于window对象中，原来，var定义的“全局“变量会被window接管，而let定义的变量不会。\n> 注意：此处var是定义的全局变量，才会被接管（局部变量是不会被window对象接管的），跟作用域有关系。\n\n> 我们都知道let ES6引入新的定义方式，它的用法类似于var，但是申明的变量，只在let命令所在的代码块内有效，也就是说它的作用域是有范围的，是块级作用域，不会指向全局作用域，所以不会被window接管，而且会有暂时性死区的约束。\n\n> **暂时性死区：指的是只要块级作用域内存在let命令，它所声明的变量就绑定了这个区域，不在受外部影响。\n\n> 结论：在浏览器环境下只有var定义的作用域为全局的变量才会被window接管，let定义的块级作用域或者var定义的局部变量都不会被window接管。普通函数中，因为this指向的是window对象，所以this可以获取到被window接管的全局变量。在node环境中，this指向的是全局global对象，var或者let定义的变量是不会被global对象接管,所以this获取不到定义的属性值。\n\nps: node环境下，需要使用global挂载属性，才能使用this打印出来。\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d813fa9ae4824a54885e19dc0c88508e~tplv-k3u1fbpfcp-zoom-1.image)\n\n### 二、对象函数的调用\n```\n// 对象函数调用\nlet str = 'hello world'\nlet obj = {\n    id: 123,\n    test: function(){\n        console.log(this.str);\n        console.log(this.id)\n    }\n}\nobj.test();\n```\n运行结果如下：\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/894862f0cec245318184ae61f846cb1d~tplv-k3u1fbpfcp-zoom-1.image)\n打印this看一下\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f5dbb1bc5a99484b90e1e0fd75784bad~tplv-k3u1fbpfcp-zoom-1.image)\n\n从图中不难看出，this指向的是该obj对象，所以上面的this.str为undefined。因为定义的str不属于obj对象的属性，所以this不能拿到指定的属性值。\n***\n***以下情况需要注意***\n```\nlet str = 'hello world'\nlet obj = {\n    id: 111,\n}\nlet obj1 = {\n    id: 123,\n    test: function(){\n        console.log(this.id);\n    }\n}\nobj.test = obj1.test;\nobj.test();\n```\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ff998260495e4de5864c5da9d2f613d5~tplv-k3u1fbpfcp-zoom-1.image)\n其实不难看出，因为obj1将函数赋值给了obj，那么对象obj就有了test函数，此时调用obj的test函数，this应该指向的是obj，那么this.id就是obj的属性id值，所以为111。\n> 结论: 对象函数调用中，那个对象的函数调用this，this就指向那个对象。\n\n### 三、构造函数调用\n\n```\nlet constructorClass = function(name,age){\n    this.name = name;\n    this.age = age;\n}\nlet obj1 = new constructorClass('张三', 18)\nconsole.log(obj1);\n```\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bbc58558cc1842008e62236ffd061762~tplv-k3u1fbpfcp-zoom-1.image)\n此处的this指的是当前的构造函数的对象。\n\n***注意：在构造函数里面返回一个对象，会直接返回这个对象，而不是指向构造函数后面创造的对象***\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cd189415cf144a3881eeba5f01b6139d~tplv-k3u1fbpfcp-zoom-1.image)\n\n> 在构造函数里面使用的this 指向的是当前对象\n\n### 四、apply和call调用\n1、apply和call 会改变传入函数的this指向。\n```\nlet obj1 ={\n    name: '张三'\n}\nlet obj2 = {\n    name: '李四',\n    test: function(){\n        console.log(this.name);\n    }\n}\n\nobj2.test.call(obj1);\n```\n\n![](https://imgkr2.cn-bj.ufileos.com/674cbadc-e2d6-49b3-9d6b-760a74502f7a.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=fcPwLJE%252FRkjT0ngxUL%252FPfh9uIEo%253D&Expires=1609473050)\n此时虽然是使用了obj2的方法，打印本来this是指向obj2的，但是使用了call动态的把this指向了obj1，所以此时打印的this.name 就相当于 obj1.name。\n\n> call和apply的两个主要用途\n> - 改变this的指向(把this从obj2指向obj1)\n> - 方法借用(obj1没有test方法，只是借用了obj2方法)\n\n> call 和 apply的区别\n> - call 和 apply的作用，完全一样，唯一的区别就是在参数上面。\n> - call 接收的参数不固定，第一个参数是函数体内this的指向，第二个参数以下是传入的参数。\n> - apply接收两个参数，第一个参数也是函数体内的this指向，第二个参数是一个集合对象(数组或者类数组)\n\n> bind和call、apply 一样，也是改变this指向的，他的传参方式和call一样，但是它返回的是一个函数，用于后面调用，而apply和call会直接执行。\n\n### 五、箭头函数\n> 箭头函数：\n> - 出现的作用除了让函数的书写变得很简洁，可读性很好外；最大的优点是解决了this执行环境所造成的一些问题。比如：解决了匿名函数this指向的问题（匿名函数的执行环境具有全局性），包括setTimeout和setInterval中使用this所造成的问题。\n> - 箭头函数里面，没有this,箭头函数里面的this是继承于外面的环境。\n```\nlet obj = {\n    str: 'hello',\n    test: function(){\n        setTimeout(function(){\n            console.log(this.str);\n        })\n    }\n}\nobj.test();\n```\n\n![](https://imgkr2.cn-bj.ufileos.com/ca2b6790-ca91-44dd-a89f-7abbbf49cbe0.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=g%252B1ChG4lHePautdBPZvIBkMCrA0%253D&Expires=1609475712)\n从前面演示的结果发现，在test函数中的this指向的是obj，但是传给setTimeout的是普通函数，this指向的是全局 window，window是没有改对象的str属性的，所以为undifined。\n\n![](https://imgkr2.cn-bj.ufileos.com/63c275f7-78f1-4c9a-909e-600d294d9e9e.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=lEi6AqesYY9Gsl8%252FFxV8BryrwOQ%253D&Expires=1609475924)\n此时将setTimeout的普通函数改成箭头函数，然后箭头函数的this继承于外部的环境，也就是test函数的this指向，所以，test函数的this指向是obj，则setTimeout的箭头函数的this也是指向obj，所以可以找到str属性，输出hello。\n\n> 结论：箭头函数里面，没有this,箭头函数里面的this是继承于外面的环境。\n\n> 以上属于个人愚见，文章有不对的地方希望大家指出，共同改进，共同学习。\n\n文章借鉴参考：   \nhttps://www.cnblogs.com/chengxs/p/8679313.html,   \nhttps://blog.csdn.net/qq_41485414/article/details/81481519,\nhttps://www.cnblogs.com/fly_dragon/p/8669057.html\n","source":"_posts/javascript/this的指向探索.md","raw":"---\ntitle: javascript中this指向探索\ntop: true\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-01-27 15:27:31\npassword: false\nsummary: false\ntags:\n    - this\n    - javascript\ncategories:\n    - JavaScript\n---\n\n[comment]: <> (::: tip 书籍简介)\n\n[comment]: <> (书名：我亦飘零久  )\n\n[comment]: <> (作者：独木舟  )\n\n[comment]: <> (分类：旅行随笔  )\n\n[comment]: <> (第一次读于 2018.08.30  )\n\n[comment]: <> (第二次读于 2019.07.22 至 2020.02.28  )\n\n[comment]: <> (:::)\n<!-- more -->\n\n### 一、普通函数调用\n1、使用let定义\n```\n// 普通函数调用\nlet username = \"hello world\"\nfunction test(){\n  console.log(this.username)\n}\n```\n> 使用node运行，输出的结果是: undefined。\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8b1f5477c2954fd38efb32cb4baf9ecb~tplv-k3u1fbpfcp-zoom-1.image)\n\n> 使用html在谷歌浏览器中运行结果，输出的也是：undefined\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/703a3ee5807a4f749526a8096593fedf~tplv-k3u1fbpfcp-zoom-1.image)\n\n> 总结：使用let定义全局的变量在函数内使用this指向为undefined\n\n2、使用var定义\n```\n// 普通函数调用(使用var定义)\nvar username = \"hello world\"\nfunction test(){\n   console.log(this.username)\n}\ntest();\n```\n> 使用node运行，输出的结果是：undefine\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c5be17839641405091cb93deca9ceb4d~tplv-k3u1fbpfcp-zoom-1.image)\n\n\n> 使用谷歌浏览器中运行的结果是：\"hello world\"\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4d7835ef5d814b6c9dab34663c4483fe~tplv-k3u1fbpfcp-zoom-1.image)\n\n> ps: 大家会发现在node运行环境和浏览器运行环境下，this的指向不太相同；这是因为在node环境下 this指向的是全局global对象，在浏览器环境下this指向的是window对象。\n\n\n>猜想：此处在浏览器环境下，var定义的全局变量会被window管控？而let定义的变量不会被window掌控。\n\n验证：\n\n1)、使用var 定义全局变量，在函数中打印window对象,如果在window对象中能找到定义的全局变量，就表示定义的全局变量被window接管了。\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a9d271b212e44103acbeb495b49ebd46~tplv-k3u1fbpfcp-zoom-1.image)\n此时我们打印发现，window对象有很多属性，我们搜索一下刚才定义的username全局变量\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c481a0d161cb43b08f036b1d02daf508~tplv-k3u1fbpfcp-zoom-1.image)\n在全局属性中找到了username这个全局变量，表示我们的username这个全局变量被window接管了。既然window接管了username这个全局变量，那么我们就可以通过window.username打印该属性参数。\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ecee224a32ca47018ecca29553ab9162~tplv-k3u1fbpfcp-zoom-1.image)\n那么this指向window,window接管了属性username，那么var定义的全局属性就可以通过this来获取了。\n\n2）、同理：我们使用let来定义一个变量，打印window对象，看看数据是否被window接管。\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b00731e9c5943daab2c922055ab5cbc~tplv-k3u1fbpfcp-zoom-1.image)\n搜索发现，username属性不存在于window对象中，原来，var定义的“全局“变量会被window接管，而let定义的变量不会。\n> 注意：此处var是定义的全局变量，才会被接管（局部变量是不会被window对象接管的），跟作用域有关系。\n\n> 我们都知道let ES6引入新的定义方式，它的用法类似于var，但是申明的变量，只在let命令所在的代码块内有效，也就是说它的作用域是有范围的，是块级作用域，不会指向全局作用域，所以不会被window接管，而且会有暂时性死区的约束。\n\n> **暂时性死区：指的是只要块级作用域内存在let命令，它所声明的变量就绑定了这个区域，不在受外部影响。\n\n> 结论：在浏览器环境下只有var定义的作用域为全局的变量才会被window接管，let定义的块级作用域或者var定义的局部变量都不会被window接管。普通函数中，因为this指向的是window对象，所以this可以获取到被window接管的全局变量。在node环境中，this指向的是全局global对象，var或者let定义的变量是不会被global对象接管,所以this获取不到定义的属性值。\n\nps: node环境下，需要使用global挂载属性，才能使用this打印出来。\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d813fa9ae4824a54885e19dc0c88508e~tplv-k3u1fbpfcp-zoom-1.image)\n\n### 二、对象函数的调用\n```\n// 对象函数调用\nlet str = 'hello world'\nlet obj = {\n    id: 123,\n    test: function(){\n        console.log(this.str);\n        console.log(this.id)\n    }\n}\nobj.test();\n```\n运行结果如下：\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/894862f0cec245318184ae61f846cb1d~tplv-k3u1fbpfcp-zoom-1.image)\n打印this看一下\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f5dbb1bc5a99484b90e1e0fd75784bad~tplv-k3u1fbpfcp-zoom-1.image)\n\n从图中不难看出，this指向的是该obj对象，所以上面的this.str为undefined。因为定义的str不属于obj对象的属性，所以this不能拿到指定的属性值。\n***\n***以下情况需要注意***\n```\nlet str = 'hello world'\nlet obj = {\n    id: 111,\n}\nlet obj1 = {\n    id: 123,\n    test: function(){\n        console.log(this.id);\n    }\n}\nobj.test = obj1.test;\nobj.test();\n```\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ff998260495e4de5864c5da9d2f613d5~tplv-k3u1fbpfcp-zoom-1.image)\n其实不难看出，因为obj1将函数赋值给了obj，那么对象obj就有了test函数，此时调用obj的test函数，this应该指向的是obj，那么this.id就是obj的属性id值，所以为111。\n> 结论: 对象函数调用中，那个对象的函数调用this，this就指向那个对象。\n\n### 三、构造函数调用\n\n```\nlet constructorClass = function(name,age){\n    this.name = name;\n    this.age = age;\n}\nlet obj1 = new constructorClass('张三', 18)\nconsole.log(obj1);\n```\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bbc58558cc1842008e62236ffd061762~tplv-k3u1fbpfcp-zoom-1.image)\n此处的this指的是当前的构造函数的对象。\n\n***注意：在构造函数里面返回一个对象，会直接返回这个对象，而不是指向构造函数后面创造的对象***\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cd189415cf144a3881eeba5f01b6139d~tplv-k3u1fbpfcp-zoom-1.image)\n\n> 在构造函数里面使用的this 指向的是当前对象\n\n### 四、apply和call调用\n1、apply和call 会改变传入函数的this指向。\n```\nlet obj1 ={\n    name: '张三'\n}\nlet obj2 = {\n    name: '李四',\n    test: function(){\n        console.log(this.name);\n    }\n}\n\nobj2.test.call(obj1);\n```\n\n![](https://imgkr2.cn-bj.ufileos.com/674cbadc-e2d6-49b3-9d6b-760a74502f7a.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=fcPwLJE%252FRkjT0ngxUL%252FPfh9uIEo%253D&Expires=1609473050)\n此时虽然是使用了obj2的方法，打印本来this是指向obj2的，但是使用了call动态的把this指向了obj1，所以此时打印的this.name 就相当于 obj1.name。\n\n> call和apply的两个主要用途\n> - 改变this的指向(把this从obj2指向obj1)\n> - 方法借用(obj1没有test方法，只是借用了obj2方法)\n\n> call 和 apply的区别\n> - call 和 apply的作用，完全一样，唯一的区别就是在参数上面。\n> - call 接收的参数不固定，第一个参数是函数体内this的指向，第二个参数以下是传入的参数。\n> - apply接收两个参数，第一个参数也是函数体内的this指向，第二个参数是一个集合对象(数组或者类数组)\n\n> bind和call、apply 一样，也是改变this指向的，他的传参方式和call一样，但是它返回的是一个函数，用于后面调用，而apply和call会直接执行。\n\n### 五、箭头函数\n> 箭头函数：\n> - 出现的作用除了让函数的书写变得很简洁，可读性很好外；最大的优点是解决了this执行环境所造成的一些问题。比如：解决了匿名函数this指向的问题（匿名函数的执行环境具有全局性），包括setTimeout和setInterval中使用this所造成的问题。\n> - 箭头函数里面，没有this,箭头函数里面的this是继承于外面的环境。\n```\nlet obj = {\n    str: 'hello',\n    test: function(){\n        setTimeout(function(){\n            console.log(this.str);\n        })\n    }\n}\nobj.test();\n```\n\n![](https://imgkr2.cn-bj.ufileos.com/ca2b6790-ca91-44dd-a89f-7abbbf49cbe0.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=g%252B1ChG4lHePautdBPZvIBkMCrA0%253D&Expires=1609475712)\n从前面演示的结果发现，在test函数中的this指向的是obj，但是传给setTimeout的是普通函数，this指向的是全局 window，window是没有改对象的str属性的，所以为undifined。\n\n![](https://imgkr2.cn-bj.ufileos.com/63c275f7-78f1-4c9a-909e-600d294d9e9e.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=lEi6AqesYY9Gsl8%252FFxV8BryrwOQ%253D&Expires=1609475924)\n此时将setTimeout的普通函数改成箭头函数，然后箭头函数的this继承于外部的环境，也就是test函数的this指向，所以，test函数的this指向是obj，则setTimeout的箭头函数的this也是指向obj，所以可以找到str属性，输出hello。\n\n> 结论：箭头函数里面，没有this,箭头函数里面的this是继承于外面的环境。\n\n> 以上属于个人愚见，文章有不对的地方希望大家指出，共同改进，共同学习。\n\n文章借鉴参考：   \nhttps://www.cnblogs.com/chengxs/p/8679313.html,   \nhttps://blog.csdn.net/qq_41485414/article/details/81481519,\nhttps://www.cnblogs.com/fly_dragon/p/8669057.html\n","slug":"javascript/this的指向探索","published":1,"updated":"2021-04-07T08:51:32.838Z","_id":"ckn77nlrf000yxwnj7vhlbm06","comments":1,"layout":"post","photos":[],"link":"","content":"<a id=\"more\"></a>\n\n<h3 id=\"一、普通函数调用\"><a href=\"#一、普通函数调用\" class=\"headerlink\" title=\"一、普通函数调用\"></a>一、普通函数调用</h3><p>1、使用let定义</p>\n<pre><code>// 普通函数调用\nlet username = &quot;hello world&quot;\nfunction test(){\n  console.log(this.username)\n}</code></pre><blockquote>\n<p>使用node运行，输出的结果是: undefined。</p>\n</blockquote>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8b1f5477c2954fd38efb32cb4baf9ecb~tplv-k3u1fbpfcp-zoom-1.image\" alt></p>\n<blockquote>\n<p>使用html在谷歌浏览器中运行结果，输出的也是：undefined</p>\n</blockquote>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/703a3ee5807a4f749526a8096593fedf~tplv-k3u1fbpfcp-zoom-1.image\" alt></p>\n<blockquote>\n<p>总结：使用let定义全局的变量在函数内使用this指向为undefined</p>\n</blockquote>\n<p>2、使用var定义</p>\n<pre><code>// 普通函数调用(使用var定义)\nvar username = &quot;hello world&quot;\nfunction test(){\n   console.log(this.username)\n}\ntest();</code></pre><blockquote>\n<p>使用node运行，输出的结果是：undefine</p>\n</blockquote>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c5be17839641405091cb93deca9ceb4d~tplv-k3u1fbpfcp-zoom-1.image\" alt></p>\n<blockquote>\n<p>使用谷歌浏览器中运行的结果是：”hello world”</p>\n</blockquote>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4d7835ef5d814b6c9dab34663c4483fe~tplv-k3u1fbpfcp-zoom-1.image\" alt></p>\n<blockquote>\n<p>ps: 大家会发现在node运行环境和浏览器运行环境下，this的指向不太相同；这是因为在node环境下 this指向的是全局global对象，在浏览器环境下this指向的是window对象。</p>\n</blockquote>\n<blockquote>\n<p>猜想：此处在浏览器环境下，var定义的全局变量会被window管控？而let定义的变量不会被window掌控。</p>\n</blockquote>\n<p>验证：</p>\n<p>1)、使用var 定义全局变量，在函数中打印window对象,如果在window对象中能找到定义的全局变量，就表示定义的全局变量被window接管了。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a9d271b212e44103acbeb495b49ebd46~tplv-k3u1fbpfcp-zoom-1.image\" alt><br>此时我们打印发现，window对象有很多属性，我们搜索一下刚才定义的username全局变量</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c481a0d161cb43b08f036b1d02daf508~tplv-k3u1fbpfcp-zoom-1.image\" alt><br>在全局属性中找到了username这个全局变量，表示我们的username这个全局变量被window接管了。既然window接管了username这个全局变量，那么我们就可以通过window.username打印该属性参数。<br><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ecee224a32ca47018ecca29553ab9162~tplv-k3u1fbpfcp-zoom-1.image\" alt><br>那么this指向window,window接管了属性username，那么var定义的全局属性就可以通过this来获取了。</p>\n<p>2）、同理：我们使用let来定义一个变量，打印window对象，看看数据是否被window接管。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b00731e9c5943daab2c922055ab5cbc~tplv-k3u1fbpfcp-zoom-1.image\" alt><br>搜索发现，username属性不存在于window对象中，原来，var定义的“全局“变量会被window接管，而let定义的变量不会。</p>\n<blockquote>\n<p>注意：此处var是定义的全局变量，才会被接管（局部变量是不会被window对象接管的），跟作用域有关系。</p>\n</blockquote>\n<blockquote>\n<p>我们都知道let ES6引入新的定义方式，它的用法类似于var，但是申明的变量，只在let命令所在的代码块内有效，也就是说它的作用域是有范围的，是块级作用域，不会指向全局作用域，所以不会被window接管，而且会有暂时性死区的约束。</p>\n</blockquote>\n<blockquote>\n<p>**暂时性死区：指的是只要块级作用域内存在let命令，它所声明的变量就绑定了这个区域，不在受外部影响。</p>\n</blockquote>\n<blockquote>\n<p>结论：在浏览器环境下只有var定义的作用域为全局的变量才会被window接管，let定义的块级作用域或者var定义的局部变量都不会被window接管。普通函数中，因为this指向的是window对象，所以this可以获取到被window接管的全局变量。在node环境中，this指向的是全局global对象，var或者let定义的变量是不会被global对象接管,所以this获取不到定义的属性值。</p>\n</blockquote>\n<p>ps: node环境下，需要使用global挂载属性，才能使用this打印出来。<br><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d813fa9ae4824a54885e19dc0c88508e~tplv-k3u1fbpfcp-zoom-1.image\" alt></p>\n<h3 id=\"二、对象函数的调用\"><a href=\"#二、对象函数的调用\" class=\"headerlink\" title=\"二、对象函数的调用\"></a>二、对象函数的调用</h3><pre><code>// 对象函数调用\nlet str = &#39;hello world&#39;\nlet obj = {\n    id: 123,\n    test: function(){\n        console.log(this.str);\n        console.log(this.id)\n    }\n}\nobj.test();</code></pre><p>运行结果如下：<br><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/894862f0cec245318184ae61f846cb1d~tplv-k3u1fbpfcp-zoom-1.image\" alt><br>打印this看一下<br><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f5dbb1bc5a99484b90e1e0fd75784bad~tplv-k3u1fbpfcp-zoom-1.image\" alt></p>\n<p>从图中不难看出，this指向的是该obj对象，所以上面的this.str为undefined。因为定义的str不属于obj对象的属性，所以this不能拿到指定的属性值。</p>\n<hr>\n<p><strong><em>以下情况需要注意</em></strong></p>\n<pre><code>let str = &#39;hello world&#39;\nlet obj = {\n    id: 111,\n}\nlet obj1 = {\n    id: 123,\n    test: function(){\n        console.log(this.id);\n    }\n}\nobj.test = obj1.test;\nobj.test();</code></pre><p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ff998260495e4de5864c5da9d2f613d5~tplv-k3u1fbpfcp-zoom-1.image\" alt><br>其实不难看出，因为obj1将函数赋值给了obj，那么对象obj就有了test函数，此时调用obj的test函数，this应该指向的是obj，那么this.id就是obj的属性id值，所以为111。</p>\n<blockquote>\n<p>结论: 对象函数调用中，那个对象的函数调用this，this就指向那个对象。</p>\n</blockquote>\n<h3 id=\"三、构造函数调用\"><a href=\"#三、构造函数调用\" class=\"headerlink\" title=\"三、构造函数调用\"></a>三、构造函数调用</h3><pre><code>let constructorClass = function(name,age){\n    this.name = name;\n    this.age = age;\n}\nlet obj1 = new constructorClass(&#39;张三&#39;, 18)\nconsole.log(obj1);</code></pre><p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bbc58558cc1842008e62236ffd061762~tplv-k3u1fbpfcp-zoom-1.image\" alt><br>此处的this指的是当前的构造函数的对象。</p>\n<p><strong><em>注意：在构造函数里面返回一个对象，会直接返回这个对象，而不是指向构造函数后面创造的对象</em></strong><br><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cd189415cf144a3881eeba5f01b6139d~tplv-k3u1fbpfcp-zoom-1.image\" alt></p>\n<blockquote>\n<p>在构造函数里面使用的this 指向的是当前对象</p>\n</blockquote>\n<h3 id=\"四、apply和call调用\"><a href=\"#四、apply和call调用\" class=\"headerlink\" title=\"四、apply和call调用\"></a>四、apply和call调用</h3><p>1、apply和call 会改变传入函数的this指向。</p>\n<pre><code>let obj1 ={\n    name: &#39;张三&#39;\n}\nlet obj2 = {\n    name: &#39;李四&#39;,\n    test: function(){\n        console.log(this.name);\n    }\n}\n\nobj2.test.call(obj1);</code></pre><p><img src=\"https://imgkr2.cn-bj.ufileos.com/674cbadc-e2d6-49b3-9d6b-760a74502f7a.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=fcPwLJE%252FRkjT0ngxUL%252FPfh9uIEo%253D&Expires=1609473050\" alt><br>此时虽然是使用了obj2的方法，打印本来this是指向obj2的，但是使用了call动态的把this指向了obj1，所以此时打印的this.name 就相当于 obj1.name。</p>\n<blockquote>\n<p>call和apply的两个主要用途</p>\n<ul>\n<li>改变this的指向(把this从obj2指向obj1)</li>\n<li>方法借用(obj1没有test方法，只是借用了obj2方法)</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>call 和 apply的区别</p>\n<ul>\n<li>call 和 apply的作用，完全一样，唯一的区别就是在参数上面。</li>\n<li>call 接收的参数不固定，第一个参数是函数体内this的指向，第二个参数以下是传入的参数。</li>\n<li>apply接收两个参数，第一个参数也是函数体内的this指向，第二个参数是一个集合对象(数组或者类数组)</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>bind和call、apply 一样，也是改变this指向的，他的传参方式和call一样，但是它返回的是一个函数，用于后面调用，而apply和call会直接执行。</p>\n</blockquote>\n<h3 id=\"五、箭头函数\"><a href=\"#五、箭头函数\" class=\"headerlink\" title=\"五、箭头函数\"></a>五、箭头函数</h3><blockquote>\n<p>箭头函数：</p>\n<ul>\n<li>出现的作用除了让函数的书写变得很简洁，可读性很好外；最大的优点是解决了this执行环境所造成的一些问题。比如：解决了匿名函数this指向的问题（匿名函数的执行环境具有全局性），包括setTimeout和setInterval中使用this所造成的问题。</li>\n<li>箭头函数里面，没有this,箭头函数里面的this是继承于外面的环境。<pre><code>let obj = {\n  str: &#39;hello&#39;,\n  test: function(){\n      setTimeout(function(){\n          console.log(this.str);\n      })\n  }\n}\nobj.test();</code></pre></li>\n</ul>\n</blockquote>\n<p><img src=\"https://imgkr2.cn-bj.ufileos.com/ca2b6790-ca91-44dd-a89f-7abbbf49cbe0.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=g%252B1ChG4lHePautdBPZvIBkMCrA0%253D&Expires=1609475712\" alt><br>从前面演示的结果发现，在test函数中的this指向的是obj，但是传给setTimeout的是普通函数，this指向的是全局 window，window是没有改对象的str属性的，所以为undifined。</p>\n<p><img src=\"https://imgkr2.cn-bj.ufileos.com/63c275f7-78f1-4c9a-909e-600d294d9e9e.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=lEi6AqesYY9Gsl8%252FFxV8BryrwOQ%253D&Expires=1609475924\" alt><br>此时将setTimeout的普通函数改成箭头函数，然后箭头函数的this继承于外部的环境，也就是test函数的this指向，所以，test函数的this指向是obj，则setTimeout的箭头函数的this也是指向obj，所以可以找到str属性，输出hello。</p>\n<blockquote>\n<p>结论：箭头函数里面，没有this,箭头函数里面的this是继承于外面的环境。</p>\n</blockquote>\n<blockquote>\n<p>以上属于个人愚见，文章有不对的地方希望大家指出，共同改进，共同学习。</p>\n</blockquote>\n<p>文章借鉴参考：<br><a href=\"https://www.cnblogs.com/chengxs/p/8679313.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/chengxs/p/8679313.html</a>,<br><a href=\"https://blog.csdn.net/qq_41485414/article/details/81481519\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_41485414/article/details/81481519</a>,<br><a href=\"https://www.cnblogs.com/fly_dragon/p/8669057.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/fly_dragon/p/8669057.html</a></p>\n","site":{"data":{"musics":[{"name":"Stay","artist":"Tonya Mitchell","url":"/medias/music/Tonya Mitchell-Stay.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"},{"name":"火山翻译","url":"https://translate.volcengine.cn","title":"访问主页","introduction":"提供全球领先的翻译技术与服务","avatar":"/medias/avatars/bytedtrans.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"李佳倩的博客","url":"https://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.com/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://www.cnblogs.com/cww97/","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"https://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"https://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"lucifer的博客","url":"https://lucifer.ren/blog/","title":"访问主页","introduction":"一个脑洞很大的程序员。","avatar":"https://tva1.sinaimg.cn/large/006tNbRwly1ga7ognflh9j30b40b4q3w.jpg"},{"name":"钱栋伟","url":"https://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"CJ Blog","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"},{"name":"Tawn","url":"https://tawn0000.github.io/","title":"访问主页","introduction":"JNU ACMer","avatar":"/medias/avatars/tawn.jpg"},{"name":"Master X","url":"https://masterx.top/","title":"访问主页","introduction":"ECNU&ML&DL","avatar":"/medias/avatars/masterx.jpg"},{"name":"分享客","url":"https://sharerdiary.com/","title":"访问主页","introduction":"爱生活，爱分享！","avatar":"/medias/avatars/yezijie.png"},{"name":"taotao","url":"https://zouzhitao.github.io","title":"访问主页","introduction":"taotao 码字的地方","avatar":"/medias/avatars/taotao.jpg"},{"name":"Xiejiadong","url":"https://xiejiadong.com","title":"访问主页","introduction":"Xiejiadong's blog","avatar":"/medias/avatars/xiejiadong.jpg"},{"name":"飞吧","url":"https://fei.bar","title":"访问主页","introduction":"啓飞的个人博客","avatar":"/medias/avatars/feibar.png"},{"name":"ajin","url":"https://ajin.cloud","title":"访问主页","introduction":"Always be enthusiastic","avatar":"/medias/avatars/ajin.jpg"},{"name":"Hiyoung","url":"https://hiyoungai.com/","title":"访问主页","introduction":"宠辱不惊，看庭前花开花落；去留无意，望天空云卷云舒。","avatar":"https://cdn.jsdelivr.net/gh/hiyoung123/cdn/img/avatar.jpg"},{"name":"无言的博客","url":"https://www.yzplove.top","title":"访问主页","introduction":"代码真是越敲越香","avatar":"https://cdn.jsdelivr.net/gh/yzp-99/yzp-99.github.io/medias/avatars/me.jpg"},{"name":"Naixin Zhang","url":"https://naixinzhang.github.io/","title":"访问主页","introduction":"Econ Master | Data Analyst/scientist Candidate","avatar":"https://naixinzhang.github.io/medias/avatars/avatar.jpg"}]}},"excerpt":"","more":"<h3 id=\"一、普通函数调用\"><a href=\"#一、普通函数调用\" class=\"headerlink\" title=\"一、普通函数调用\"></a>一、普通函数调用</h3><p>1、使用let定义</p>\n<pre><code>// 普通函数调用\nlet username = &quot;hello world&quot;\nfunction test(){\n  console.log(this.username)\n}</code></pre><blockquote>\n<p>使用node运行，输出的结果是: undefined。</p>\n</blockquote>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8b1f5477c2954fd38efb32cb4baf9ecb~tplv-k3u1fbpfcp-zoom-1.image\" alt></p>\n<blockquote>\n<p>使用html在谷歌浏览器中运行结果，输出的也是：undefined</p>\n</blockquote>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/703a3ee5807a4f749526a8096593fedf~tplv-k3u1fbpfcp-zoom-1.image\" alt></p>\n<blockquote>\n<p>总结：使用let定义全局的变量在函数内使用this指向为undefined</p>\n</blockquote>\n<p>2、使用var定义</p>\n<pre><code>// 普通函数调用(使用var定义)\nvar username = &quot;hello world&quot;\nfunction test(){\n   console.log(this.username)\n}\ntest();</code></pre><blockquote>\n<p>使用node运行，输出的结果是：undefine</p>\n</blockquote>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c5be17839641405091cb93deca9ceb4d~tplv-k3u1fbpfcp-zoom-1.image\" alt></p>\n<blockquote>\n<p>使用谷歌浏览器中运行的结果是：”hello world”</p>\n</blockquote>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4d7835ef5d814b6c9dab34663c4483fe~tplv-k3u1fbpfcp-zoom-1.image\" alt></p>\n<blockquote>\n<p>ps: 大家会发现在node运行环境和浏览器运行环境下，this的指向不太相同；这是因为在node环境下 this指向的是全局global对象，在浏览器环境下this指向的是window对象。</p>\n</blockquote>\n<blockquote>\n<p>猜想：此处在浏览器环境下，var定义的全局变量会被window管控？而let定义的变量不会被window掌控。</p>\n</blockquote>\n<p>验证：</p>\n<p>1)、使用var 定义全局变量，在函数中打印window对象,如果在window对象中能找到定义的全局变量，就表示定义的全局变量被window接管了。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a9d271b212e44103acbeb495b49ebd46~tplv-k3u1fbpfcp-zoom-1.image\" alt><br>此时我们打印发现，window对象有很多属性，我们搜索一下刚才定义的username全局变量</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c481a0d161cb43b08f036b1d02daf508~tplv-k3u1fbpfcp-zoom-1.image\" alt><br>在全局属性中找到了username这个全局变量，表示我们的username这个全局变量被window接管了。既然window接管了username这个全局变量，那么我们就可以通过window.username打印该属性参数。<br><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ecee224a32ca47018ecca29553ab9162~tplv-k3u1fbpfcp-zoom-1.image\" alt><br>那么this指向window,window接管了属性username，那么var定义的全局属性就可以通过this来获取了。</p>\n<p>2）、同理：我们使用let来定义一个变量，打印window对象，看看数据是否被window接管。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b00731e9c5943daab2c922055ab5cbc~tplv-k3u1fbpfcp-zoom-1.image\" alt><br>搜索发现，username属性不存在于window对象中，原来，var定义的“全局“变量会被window接管，而let定义的变量不会。</p>\n<blockquote>\n<p>注意：此处var是定义的全局变量，才会被接管（局部变量是不会被window对象接管的），跟作用域有关系。</p>\n</blockquote>\n<blockquote>\n<p>我们都知道let ES6引入新的定义方式，它的用法类似于var，但是申明的变量，只在let命令所在的代码块内有效，也就是说它的作用域是有范围的，是块级作用域，不会指向全局作用域，所以不会被window接管，而且会有暂时性死区的约束。</p>\n</blockquote>\n<blockquote>\n<p>**暂时性死区：指的是只要块级作用域内存在let命令，它所声明的变量就绑定了这个区域，不在受外部影响。</p>\n</blockquote>\n<blockquote>\n<p>结论：在浏览器环境下只有var定义的作用域为全局的变量才会被window接管，let定义的块级作用域或者var定义的局部变量都不会被window接管。普通函数中，因为this指向的是window对象，所以this可以获取到被window接管的全局变量。在node环境中，this指向的是全局global对象，var或者let定义的变量是不会被global对象接管,所以this获取不到定义的属性值。</p>\n</blockquote>\n<p>ps: node环境下，需要使用global挂载属性，才能使用this打印出来。<br><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d813fa9ae4824a54885e19dc0c88508e~tplv-k3u1fbpfcp-zoom-1.image\" alt></p>\n<h3 id=\"二、对象函数的调用\"><a href=\"#二、对象函数的调用\" class=\"headerlink\" title=\"二、对象函数的调用\"></a>二、对象函数的调用</h3><pre><code>// 对象函数调用\nlet str = &#39;hello world&#39;\nlet obj = {\n    id: 123,\n    test: function(){\n        console.log(this.str);\n        console.log(this.id)\n    }\n}\nobj.test();</code></pre><p>运行结果如下：<br><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/894862f0cec245318184ae61f846cb1d~tplv-k3u1fbpfcp-zoom-1.image\" alt><br>打印this看一下<br><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f5dbb1bc5a99484b90e1e0fd75784bad~tplv-k3u1fbpfcp-zoom-1.image\" alt></p>\n<p>从图中不难看出，this指向的是该obj对象，所以上面的this.str为undefined。因为定义的str不属于obj对象的属性，所以this不能拿到指定的属性值。</p>\n<hr>\n<p><strong><em>以下情况需要注意</em></strong></p>\n<pre><code>let str = &#39;hello world&#39;\nlet obj = {\n    id: 111,\n}\nlet obj1 = {\n    id: 123,\n    test: function(){\n        console.log(this.id);\n    }\n}\nobj.test = obj1.test;\nobj.test();</code></pre><p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ff998260495e4de5864c5da9d2f613d5~tplv-k3u1fbpfcp-zoom-1.image\" alt><br>其实不难看出，因为obj1将函数赋值给了obj，那么对象obj就有了test函数，此时调用obj的test函数，this应该指向的是obj，那么this.id就是obj的属性id值，所以为111。</p>\n<blockquote>\n<p>结论: 对象函数调用中，那个对象的函数调用this，this就指向那个对象。</p>\n</blockquote>\n<h3 id=\"三、构造函数调用\"><a href=\"#三、构造函数调用\" class=\"headerlink\" title=\"三、构造函数调用\"></a>三、构造函数调用</h3><pre><code>let constructorClass = function(name,age){\n    this.name = name;\n    this.age = age;\n}\nlet obj1 = new constructorClass(&#39;张三&#39;, 18)\nconsole.log(obj1);</code></pre><p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bbc58558cc1842008e62236ffd061762~tplv-k3u1fbpfcp-zoom-1.image\" alt><br>此处的this指的是当前的构造函数的对象。</p>\n<p><strong><em>注意：在构造函数里面返回一个对象，会直接返回这个对象，而不是指向构造函数后面创造的对象</em></strong><br><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cd189415cf144a3881eeba5f01b6139d~tplv-k3u1fbpfcp-zoom-1.image\" alt></p>\n<blockquote>\n<p>在构造函数里面使用的this 指向的是当前对象</p>\n</blockquote>\n<h3 id=\"四、apply和call调用\"><a href=\"#四、apply和call调用\" class=\"headerlink\" title=\"四、apply和call调用\"></a>四、apply和call调用</h3><p>1、apply和call 会改变传入函数的this指向。</p>\n<pre><code>let obj1 ={\n    name: &#39;张三&#39;\n}\nlet obj2 = {\n    name: &#39;李四&#39;,\n    test: function(){\n        console.log(this.name);\n    }\n}\n\nobj2.test.call(obj1);</code></pre><p><img src=\"https://imgkr2.cn-bj.ufileos.com/674cbadc-e2d6-49b3-9d6b-760a74502f7a.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=fcPwLJE%252FRkjT0ngxUL%252FPfh9uIEo%253D&Expires=1609473050\" alt><br>此时虽然是使用了obj2的方法，打印本来this是指向obj2的，但是使用了call动态的把this指向了obj1，所以此时打印的this.name 就相当于 obj1.name。</p>\n<blockquote>\n<p>call和apply的两个主要用途</p>\n<ul>\n<li>改变this的指向(把this从obj2指向obj1)</li>\n<li>方法借用(obj1没有test方法，只是借用了obj2方法)</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>call 和 apply的区别</p>\n<ul>\n<li>call 和 apply的作用，完全一样，唯一的区别就是在参数上面。</li>\n<li>call 接收的参数不固定，第一个参数是函数体内this的指向，第二个参数以下是传入的参数。</li>\n<li>apply接收两个参数，第一个参数也是函数体内的this指向，第二个参数是一个集合对象(数组或者类数组)</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>bind和call、apply 一样，也是改变this指向的，他的传参方式和call一样，但是它返回的是一个函数，用于后面调用，而apply和call会直接执行。</p>\n</blockquote>\n<h3 id=\"五、箭头函数\"><a href=\"#五、箭头函数\" class=\"headerlink\" title=\"五、箭头函数\"></a>五、箭头函数</h3><blockquote>\n<p>箭头函数：</p>\n<ul>\n<li>出现的作用除了让函数的书写变得很简洁，可读性很好外；最大的优点是解决了this执行环境所造成的一些问题。比如：解决了匿名函数this指向的问题（匿名函数的执行环境具有全局性），包括setTimeout和setInterval中使用this所造成的问题。</li>\n<li>箭头函数里面，没有this,箭头函数里面的this是继承于外面的环境。<pre><code>let obj = {\n  str: &#39;hello&#39;,\n  test: function(){\n      setTimeout(function(){\n          console.log(this.str);\n      })\n  }\n}\nobj.test();</code></pre></li>\n</ul>\n</blockquote>\n<p><img src=\"https://imgkr2.cn-bj.ufileos.com/ca2b6790-ca91-44dd-a89f-7abbbf49cbe0.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=g%252B1ChG4lHePautdBPZvIBkMCrA0%253D&Expires=1609475712\" alt><br>从前面演示的结果发现，在test函数中的this指向的是obj，但是传给setTimeout的是普通函数，this指向的是全局 window，window是没有改对象的str属性的，所以为undifined。</p>\n<p><img src=\"https://imgkr2.cn-bj.ufileos.com/63c275f7-78f1-4c9a-909e-600d294d9e9e.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=lEi6AqesYY9Gsl8%252FFxV8BryrwOQ%253D&Expires=1609475924\" alt><br>此时将setTimeout的普通函数改成箭头函数，然后箭头函数的this继承于外部的环境，也就是test函数的this指向，所以，test函数的this指向是obj，则setTimeout的箭头函数的this也是指向obj，所以可以找到str属性，输出hello。</p>\n<blockquote>\n<p>结论：箭头函数里面，没有this,箭头函数里面的this是继承于外面的环境。</p>\n</blockquote>\n<blockquote>\n<p>以上属于个人愚见，文章有不对的地方希望大家指出，共同改进，共同学习。</p>\n</blockquote>\n<p>文章借鉴参考：<br><a href=\"https://www.cnblogs.com/chengxs/p/8679313.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/chengxs/p/8679313.html</a>,<br><a href=\"https://blog.csdn.net/qq_41485414/article/details/81481519\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_41485414/article/details/81481519</a>,<br><a href=\"https://www.cnblogs.com/fly_dragon/p/8669057.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/fly_dragon/p/8669057.html</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckn77mqok000dxwnjayh8dicd","category_id":"ckn77iy470004xwnj7l1jwy9k","_id":"ckn77mqom000fxwnj9cs2wqkp"},{"post_id":"ckn77mqp0000gxwnjn5wbe2kt","category_id":"ckn77iy470004xwnj7l1jwy9k","_id":"ckn77mqp2000jxwnjtqxqc885"},{"post_id":"ckn77nlpe000kxwnj4kxfs7r9","category_id":"ckn77nlpf000lxwnjh1z0nfcj","_id":"ckn77nlpg000oxwnj04u7asal"},{"post_id":"ckn77nlpk000txwnj8r7e45lj","category_id":"ckn77nlpf000lxwnjh1z0nfcj","_id":"ckn77nlpl000vxwnjhfk3njba"},{"post_id":"ckn77nlrf000yxwnj7vhlbm06","category_id":"ckn77nlpf000lxwnjh1z0nfcj","_id":"ckn77nlrh0010xwnjis0wpare"},{"post_id":"ckn75jvix0000p8nj9q54g9dt","category_id":"ckn75jvkv0001p8njl4zs5ujg","_id":"ckn77r8i70013xwnj2vykc0a8"},{"post_id":"ckn75jvix0000p8nj9q54g9dt","category_id":"ckn77rjmv0014xwnjaynzh5gs","_id":"ckn77rjmv0015xwnjzjswrj9k"}],"PostTag":[{"post_id":"ckn75jvix0000p8nj9q54g9dt","tag_id":"ckn74id9d0008w8nj9wgdkhr2","_id":"ckn75o7qw0000ignjhdo1ap44"},{"post_id":"ckn75jvix0000p8nj9q54g9dt","tag_id":"ckn75jvkw0002p8njf1dkno4y","_id":"ckn77gltf0001xwnjofy4hovv"},{"post_id":"ckn75jvix0000p8nj9q54g9dt","tag_id":"ckn77gltd0000xwnjj4gftcjq","_id":"ckn77glth0002xwnjnllc04yv"},{"post_id":"ckn77mqok000dxwnjayh8dicd","tag_id":"ckn77iy480005xwnjdjhtuwvd","_id":"ckn77mqom000exwnjxqkciu36"},{"post_id":"ckn77mqp0000gxwnjn5wbe2kt","tag_id":"ckn77iy480005xwnjdjhtuwvd","_id":"ckn77mqp1000hxwnjc4n9snit"},{"post_id":"ckn77mqp0000gxwnjn5wbe2kt","tag_id":"ckn77l6b80009xwnj23mkmm73","_id":"ckn77mqp2000ixwnjmqwq9owq"},{"post_id":"ckn77nlpe000kxwnj4kxfs7r9","tag_id":"ckn77nlpf000mxwnjfcwpreqk","_id":"ckn77nlpg000qxwnjgxl0dw04"},{"post_id":"ckn77nlpe000kxwnj4kxfs7r9","tag_id":"ckn77nlpf000nxwnjy9ko2tar","_id":"ckn77nlpg000rxwnjur7xnpyo"},{"post_id":"ckn77nlpe000kxwnj4kxfs7r9","tag_id":"ckn77nlpg000pxwnjl1f2aaix","_id":"ckn77nlpg000sxwnjfl4vb7w0"},{"post_id":"ckn77nlpk000txwnj8r7e45lj","tag_id":"ckn77nlpl000uxwnjyoxsk54i","_id":"ckn77nlpl000wxwnjaww4r438"},{"post_id":"ckn77nlpk000txwnj8r7e45lj","tag_id":"ckn77nlpf000nxwnjy9ko2tar","_id":"ckn77nlpl000xxwnjdbbr70q0"},{"post_id":"ckn77nlrf000yxwnj7vhlbm06","tag_id":"ckn77nlrh000zxwnjy4n5crwm","_id":"ckn77nlri0011xwnj8zfouw1w"},{"post_id":"ckn77nlrf000yxwnj7vhlbm06","tag_id":"ckn77nlpf000nxwnjy9ko2tar","_id":"ckn77nlri0012xwnjv2b5soid"}],"Tag":[{"name":"博客","_id":"ckn74id9d0008w8nj9wgdkhr2"},{"name":"git","_id":"ckn75jvkw0002p8njf1dkno4y"},{"name":"命令","_id":"ckn77gltd0000xwnjj4gftcjq"},{"name":"npm","_id":"ckn77iy480005xwnjdjhtuwvd"},{"name":"服务器","_id":"ckn77l6b80009xwnj23mkmm73"},{"name":"原型","_id":"ckn77nlpf000mxwnjfcwpreqk"},{"name":"javascript","_id":"ckn77nlpf000nxwnjy9ko2tar"},{"name":"prototyoe","_id":"ckn77nlpg000pxwnjl1f2aaix"},{"name":"数据类型","_id":"ckn77nlpl000uxwnjyoxsk54i"},{"name":"this","_id":"ckn77nlrh000zxwnjy4n5crwm"}]}}